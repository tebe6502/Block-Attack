mads 2.1.6 build 70 (8 Aug 23)
Source: block_attack.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.9 [2023/08/21] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 0980			CODEORIGIN	= $0980
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.if .def(@vbxe_detect)
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
Source: basicoff.asm
     1 				// BASIC OFF
     2 				// author: Michael Jaskula
     3 				// changes: 2023-03-28
     4
     5 				//	lda #$01		; OSS cart disabled
     6 				//	sta $d508
     7
     8 FFFF> 0980-09C0> AD 01 + 	lda PORTB
     9 0983 09 02			ora #$02
    10 0985 8D 01 D3			sta PORTB
    11 					
    12 0988 A9 70			lda #$70		; disable BREAK
    13 098A 85 10			sta $10
    14 098C 8D 0E D2			sta $D20E
    15
    16 098F A9 C0			lda #$C0
    17 0991 85 6A			sta $6A
    18 0993 8D E4 02			sta $2E4
    19
    20 0996 A9 01			lda #$01
    21 0998 8D F8 03			sta $03F8
    22
    23 099B A2 00			ldx #0			; reset E:
    24 099D A9 0C			lda #$0c
    25 099F 20 B8 09			jsr xcio
    26
    27 09A2 A9 BE 9D 44 03 A9 + 	mwa #ename icbufa,x
    28
    29 09AC A9 0C 9D 4A 03		mva #$0c icax1,x
    30 09B1 A9 00 9D 4B 03		mva #$00 icax2,x
    31
    32 09B6 A9 03			lda #$03
    33
    34 09B8 9D 42 03		xcio	sta iccmd,x
    35
    36 09BB 4C 56 E4			jmp	ciov
    37
    38 09BE 45 3A 9B		ename	.byte 'E:',$9b
    95 02E2-02E3> 80 09			ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 09C1				org CODEORIGIN
   105
   106 0980			.local	MAIN.@RESOURCE
   107 				.endl
   108
   109 0980			.local	RESOURCE
   110 0980				icl 'atari\resource.asm'
Source: resource.asm
     1
  1228 					opt l+
   111 = 0000				?EXTDETECT = 0
   112 = 0000				?VBXDETECT = 0
   113
   114 09F5				SAPRPLAY '' SAPR_PLAYER 0 0 0 0 0 0 0 0
Macro: RESOURCE.SAPRPLAY [Source: resource.asm]
     2 09F5				org RESORIGIN
     4 = 0300			len	= .sizeof(_SAPR_PLAYER)
     8 				mcpy	ift (main.SAPR_PLAYER<$bc20) && (main.SAPR_PLAYER+len >= $bc20)
    13 09F5 20 C1 09			jsr sys.off
    15 09F8 A9 16 85 88 A9 0A +  MWA #DATA EDX
    15 0A00 A9 00 85 8C A9 A4 +  MWA #MAIN.SAPR_PLAYER ECX
    15 0A08 A9 00 85 84 A9 03 +  MWA #LEN EAX
    15 0A10 20 80 09		 JSR RESOURCE.MEMCPY
    17 0A13 4C E5 09			jmp sys.on
    18 0A16			data
    25 					.print '$R SAPRPLAY ',main.SAPR_PLAYER,'..',main.SAPR_PLAYER+$c00-1
    25 				$R SAPRPLAY $A400..$AFFF
    27 02E2-02E3> F5 09			ini mcpy
Source: block_attack.a65
   115 				.endl
   116
   117 				; ------------------------------------------------------------
   118
   119 0D16				org CODEORIGIN
   120
   121 0980				STATICDATA
Macro: STATICDATA [Source: block_attack.a65]
     1 0980-A176> 04 54 52 55 + .by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $15 $41 $4E  $54 $49 $43 $20 $50 $41 $4C $20
     2 0998 69 73 20 72 65 71 + .by  $69 $73 $20 $72 $65 $71 $75 $69  $72 $65 $64 $00 $15 $20 $36 $35  $30 $32 $20 $43 $50 $55 $20 $69
     3 09B0 73 20 72 65 71 75 + .by  $73 $20 $72 $65 $71 $75 $69 $72  $65 $64 $00 $19 $53 $65 $63 $6F  $6E $64 $20 $50 $4F $4B $45 $59
     4 09C8 20 6E 6F 74 20 64 + .by  $20 $6E $6F $74 $20 $64 $65 $74  $65 $63 $74 $65 $64 $00 $15 $44  $69 $73 $61 $62 $6C $65 $20 $65
     5 09E0 78 74 65 72 6E 61 + .by  $78 $74 $65 $72 $6E $61 $6C $20  $63 $61 $72 $74 $00 $0D $50 $72  $65 $73 $73 $20 $61 $6E $79 $20
     6 09F8 6B 65 79 00 0D 73 + .by  $6B $65 $79 $00 $0D $73 $61 $70  $72 $5F $63 $72 $69 $74 $69 $63  $61 $6C $00 $0A $73 $61 $70 $72
     7 0A10 5F 79 6F 73 68 69 + .by  $5F $79 $6F $73 $68 $69 $00 $05  $74 $5F $70 $6D $30 $00 $05 $66  $5F $69 $64 $30 $00 $05 $66 $5F
     8 0A28 69 64 32 00 05 66 + .by  $69 $64 $32 $00 $05 $66 $5F $69  $64 $31 $00 $07 $66 $5F $69 $64  $32 $5F $61 $00 $07 $66 $5F $69
     9 0A40 64 32 5F 62 00 07 + .by  $64 $32 $5F $62 $00 $07 $66 $5F  $69 $64 $31 $5F $61 $00 $07 $66  $5F $69 $64 $31 $5F $62 $00 $05
    10 0A58 74 5F 74 69 74 00 + .by  $74 $5F $74 $69 $74 $00 $0A $73  $61 $70 $72 $5F $6D $6F $64 $75  $6C $00 $06 $74 $5F $74 $69 $74
    11 0A70 32 00 03 02 02 01 + .by  $32 $00 $03 $02 $02 $01 $01 $02  $02 $03 $03 $03 $03 $03 $03 $03  $02 $03 $28 $14 $14 $28 $50 $50
    12 0A88 A0 A0 40 50 50 50 + .by  $A0 $A0 $40 $50 $50 $50 $28 $28  $A0 $A0 $18 $18 $0C $18 $30 $30  $60 $60 $C0 $C0 $C0 $C0 $18 $0C
    13 0AA0 C0 C0 00 4F A8 4E + .by  $C0 $C0 $00 $4F $A8 $4E $A8 $4D  $A8 $4C $A6 $4B $A4 $49 $A3 $48  $A2 $00 $A0 $00 $00 $00 $37 $A8
    14 0AB8 36 A8 35 A8 34 A6 + .by  $36 $A8 $35 $A8 $34 $A6 $33 $A4  $32 $A3 $31 $A2 $00 $A0 $00 $00  $00 $1F $A8 $1E $A8 $1D $A8 $1C
    15 0AD0 A6 1B A4 19 A3 18 + .by  $A6 $1B $A4 $19 $A3 $18 $A2 $E0  $A0 $00 $00 $00 $00 $A3 $00 $A0  $00 $A3 $00 $A0 $00 $A3 $00 $A0
    16 0AE8 00 A0 00 A0 00 00 + .by  $00 $A0 $00 $A0 $00 $00 $00 $00  $04 $00 $02 $00 $01 $00 $00 $00  $02 $00 $04 $00 $00 $00 $00 $00
    17 0B00 00 00 FA FA FA FA + .by  $00 $00 $FA $FA $FA $FA $FA $FA  $FA $FA $00 $00 $00 $00 $00 $00  $38 $38 $4C $4C $54 $54 $64 $64
    18 0B18 44 44 44 44 38 38 + .by  $44 $44 $44 $44 $38 $38 $00 $00  $10 $10 $30 $30 $10 $10 $10 $10  $10 $10 $10 $10 $7C $7C $00 $00
    19 0B30 38 38 04 04 38 38 + .by  $38 $38 $04 $04 $38 $38 $40 $40  $40 $40 $40 $40 $7C $7C $00 $00  $7C $7C $08 $08 $18 $18 $04 $04
    20 0B48 04 04 44 44 38 38 + .by  $04 $04 $44 $44 $38 $38 $00 $00  $40 $40 $50 $50 $7C $7C $10 $10  $10 $10 $10 $10 $10 $10 $00 $00
    21 0B60 7C 7C 40 40 78 78 + .by  $7C $7C $40 $40 $78 $78 $04 $04  $04 $04 $44 $44 $38 $38 $00 $00  $38 $38 $40 $40 $78 $78 $44 $44
    22 0B78 44 44 44 44 38 38 + .by  $44 $44 $44 $44 $38 $38 $00 $00  $7C $7C $04 $04 $08 $08 $10 $10  $10 $10 $10 $10 $10 $10 $00 $00
    23 0B90 38 38 44 44 38 38 + .by  $38 $38 $44 $44 $38 $38 $44 $44  $44 $44 $44 $44 $38 $38 $00 $00  $3C $3C $44 $44 $44 $44 $3C $3C
    24 0BA8 04 04 04 04 04 04 + .by  $04 $04 $04 $04 $04 $04 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $60 $A0 $A0 $A0 $A0 $C0 $00 $00
    25 0BC0 C0 40 40 40 40 40 + .by  $C0 $40 $40 $40 $40 $40 $00 $00  $C0 $20 $60 $80 $80 $E0 $00 $00  $E0 $20 $60 $20 $20 $C0 $00 $00
    26 0BD8 80 A0 A0 E0 20 20 + .by  $80 $A0 $A0 $E0 $20 $20 $00 $00  $E0 $80 $E0 $20 $20 $C0 $00 $00  $C0 $80 $E0 $A0 $A0 $C0 $00 $00
    27 0BF0 E0 20 20 20 20 20 + .by  $E0 $20 $20 $20 $20 $20 $00 $00  $E0 $A0 $E0 $A0 $A0 $E0 $00 $00  $E0 $A0 $A0 $E0 $20 $20 $00 $00
    28 0C08 00 40 40 00 40 40 + .by  $00 $40 $40 $00 $40 $40 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $06 $0A $0A $0A $0A $0C $00 $00
    29 0C20 0C 04 04 04 04 04 + .by  $0C $04 $04 $04 $04 $04 $00 $00  $0C $02 $06 $08 $08 $0E $00 $00  $0E $02 $06 $02 $02 $0C $00 $00
    30 0C38 08 0A 0A 0E 02 02 + .by  $08 $0A $0A $0E $02 $02 $00 $00  $0E $08 $0E $02 $02 $0C $00 $00  $0C $08 $0E $0A $0A $0C $00 $00
    31 0C50 0E 02 02 02 02 02 + .by  $0E $02 $02 $02 $02 $02 $00 $00  $0E $0A $0E $0A $0A $0E $00 $00  $0E $0A $0A $0E $02 $02 $00 $00
    32 0C68 00 04 04 00 04 04 + .by  $00 $04 $04 $00 $04 $04 $00 $00  $00 $01 $00 $01 $00 $01 $02 $03  $04 $05 $06 $07 $08 $09 $0A $0B
    33 0C80 0C 0D 00 01 00 01 + .by  $0C $0D $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $02 $03  $04 $05 $06 $07 $08 $09 $0A $0B
    34 0C98 0C 0D 00 01 00 01 + .by  $0C $0D $00 $01 $00 $01 $00 $01  $0E $0F $10 $11 $12 $13 $14 $15  $16 $17 $18 $19 $1A $1B $1C $1D
    35 0CB0 1E 1F 00 01 00 01 + .by  $1E $1F $00 $01 $00 $01 $00 $01  $0E $0F $10 $11 $12 $13 $14 $15  $16 $17 $18 $19 $1A $1B $1C $1D
    36 0CC8 1E 1F 00 01 00 01 + .by  $1E $1F $00 $01 $00 $01 $00 $01  $20 $21 $22 $23 $24 $25 $26 $27  $28 $29 $2A $2B $2C $2D $2E $2F
    37 0CE0 30 31 32 33 00 01 + .by  $30 $31 $32 $33 $00 $01 $00 $01  $20 $21 $22 $23 $24 $25 $26 $27  $28 $29 $2A $2B $2C $2D $2E $2F
    38 0CF8 30 31 32 33 00 01 + .by  $30 $31 $32 $33 $00 $01 $00 $01  $00 $01 $00 $01 $34 $35 $36 $37  $38 $39 $3A $3B $3C $3D $3E $3F
    39 0D10 40 41 42 43 44 45 + .by  $40 $41 $42 $43 $44 $45 $00 $01  $00 $01 $00 $01 $34 $35 $36 $37  $38 $39 $3A $3B $3C $3D $3E $3F
    40 0D28 40 41 42 43 44 45 + .by  $40 $41 $42 $43 $44 $45 $00 $01  $00 $00 $01 $02 $03 $00 $04 $05  $06 $07 $08 $09 $0A $0B $0C $0D
    41 0D40 0E 00 00 00 00 00 + .by  $0E $00 $00 $00 $00 $00 $00 $00  $0F $10 $11 $12 $13 $14 $15 $16  $17 $18 $19 $1A $1B $1C $1D $1E
    42 0D58 1F 00 00 00 00 00 + .by  $1F $00 $00 $00 $00 $00 $00 $00  $20 $21 $22 $23 $24 $25 $26 $27  $28 $29 $2A $2B $2C $2D $2E $2F
    43 0D70 30 00 00 00 00 00 + .by  $30 $00 $00 $00 $00 $00 $00 $00  $00 $31 $32 $33 $34 $35 $36 $37  $38 $39 $3A $3B $3C $3D $3E $3F
    44 0D88 40 41 42 43 00 00 + .by  $40 $41 $42 $43 $00 $00 $00 $00  $00 $00 $00 $00 $0F $10 $44 $45  $46 $47 $48 $49 $4A $4B $4C $4D
    45 0DA0 4E 4F 50 51 00 00 + .by  $4E $4F $50 $51 $00 $00 $00 $00  $00 $00 $00 $00 $52 $53 $54 $55  $56 $57 $58 $59 $5A $5B $5C $5D
    46 0DB8 5E 5F 60 61 62 00 + .by  $5E $5F $60 $61 $62 $00 $00 $00  $00 $00 $00 $00 $00 $63 $64 $65  $66 $00 $00 $00 $00 $00 $00 $00
    47 0DD0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $01 $02  $03 $04 $05 $06 $07 $08 $09 $0A
    48 0DE8 0B 00 00 00 00 00 + .by  $0B $00 $00 $00 $00 $00 $00 $00  $00 $0C $0D $0E $0F $10 $11 $12  $13 $14 $15 $16 $17 $18 $19 $1A
    49 0E00 1B 00 00 00 00 00 + .by  $1B $00 $00 $00 $00 $00 $00 $00  $1C $1D $1E $1F $20 $21 $22 $23  $24 $25 $26 $27 $28 $29 $2A $2B
    50 0E18 2C 00 00 00 00 00 + .by  $2C $00 $00 $00 $00 $00 $00 $00  $2D $2E $2F $30 $31 $32 $33 $34  $35 $36 $37 $38 $39 $3A $3B $3C
    51 0E30 3D 0A 3E 3F 00 00 + .by  $3D $0A $3E $3F $00 $00 $00 $00  $00 $00 $00 $00 $00 $0C $40 $41  $42 $43 $44 $45 $46 $47 $48 $49
    52 0E48 4A 4B 4C 4D 00 00 + .by  $4A $4B $4C $4D $00 $00 $00 $00  $00 $00 $00 $00 $4E $4F $50 $51  $52 $53 $54 $55 $56 $57 $58 $59
    53 0E60 5A 5B 5C 5D 5E 00 + .by  $5A $5B $5C $5D $5E $00 $00 $00  $00 $00 $00 $00 $00 $5F $60 $61  $62 $63 $00 $00 $00 $00 $00 $00
    54 0E78 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $01 $02  $00 $03 $04 $05 $06 $07 $08 $09
    55 0E90 0A 00 00 00 00 00 + .by  $0A $00 $00 $00 $00 $00 $00 $00  $00 $0B $0C $0D $0E $0F $10 $11  $12 $13 $14 $15 $16 $17 $18 $19
    56 0EA8 1A 00 00 00 00 00 + .by  $1A $00 $00 $00 $00 $00 $00 $00  $1B $1C $1D $1E $1F $20 $21 $22  $23 $24 $25 $26 $27 $28 $29 $2A
    57 0EC0 2B 00 00 00 00 00 + .by  $2B $00 $00 $00 $00 $00 $00 $00  $2C $2D $2E $2F $30 $31 $32 $07  $33 $34 $35 $36 $37 $38 $39 $3A
    58 0ED8 3B 09 3C 3D 00 00 + .by  $3B $09 $3C $3D $00 $00 $00 $00  $00 $00 $3E $3F $00 $0B $40 $41  $42 $43 $44 $45 $46 $47 $48 $49
    59 0EF0 4A 4B 4C 4D 00 00 + .by  $4A $4B $4C $4D $00 $00 $00 $00  $00 $00 $00 $00 $4E $4F $50 $51  $52 $53 $54 $55 $56 $57 $58 $59
    60 0F08 5A 5B 5C 5D 5E 00 + .by  $5A $5B $5C $5D $5E $00 $00 $00  $00 $00 $00 $00 $00 $5F $60 $61  $62 $63 $64 $00 $65 $66 $00 $00
    61 0F20 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $01 $00 $02 $03
    62 0F38 04 00 00 00 00 00 + .by  $04 $00 $00 $00 $00 $00 $00 $00  $00 $05 $06 $07 $08 $09 $0A $0B  $0C $0D $0E $0F $10 $11 $12 $13
    63 0F50 14 00 00 00 00 00 + .by  $14 $00 $00 $00 $00 $00 $00 $00  $15 $16 $17 $18 $19 $1A $1B $1C  $1D $1E $1F $20 $21 $22 $23 $24
    64 0F68 25 00 00 00 00 00 + .by  $25 $00 $00 $00 $00 $00 $00 $00  $26 $27 $28 $29 $2A $2B $2C $00  $2D $2E $2F $30 $31 $32 $33 $34
    65 0F80 35 03 04 00 00 00 + .by  $35 $03 $04 $00 $00 $00 $00 $00  $00 $36 $37 $38 $39 $05 $3A $3B  $3C $3D $3E $3F $40 $41 $42 $43
    66 0F98 44 45 46 47 00 00 + .by  $44 $45 $46 $47 $00 $00 $00 $00  $00 $00 $00 $00 $15 $16 $48 $49  $4A $4B $4C $4D $4E $4F $50 $51
    67 0FB0 52 53 54 55 56 00 + .by  $52 $53 $54 $55 $56 $00 $00 $00  $00 $00 $00 $00 $57 $58 $59 $5A  $5B $5C $5D $5E $5F $60 $61 $62
    68 0FC8 63 36 64 65 00 00 + .by  $63 $36 $64 $65 $00 $00 $00 $00  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01
    69 0FE0 00 01 00 01 00 01 + .by  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01
    70 0FF8 00 01 00 01 00 01 + .by  $00 $01 $00 $01 $00 $01 $00 $01  $82 $83 $84 $85 $86 $07 $88 $09  $8A $8B $8C $8D $8E $8F $90 $91
    71 1010 92 93 94 15 00 01 + .by  $92 $93 $94 $15 $00 $01 $00 $01  $82 $83 $84 $85 $86 $87 $88 $89  $8A $8B $8C $8D $8E $8F $90 $91
    72 1028 92 93 94 95 00 01 + .by  $92 $93 $94 $95 $00 $01 $00 $01  $96 $97 $98 $99 $9A $9B $9C $9D  $9E $9F $A0 $A1 $A2 $A3 $A4 $A5
    73 1040 A6 A7 A8 A9 00 01 + .by  $A6 $A7 $A8 $A9 $00 $01 $00 $01  $16 $97 $98 $99 $9A $9B $9C $9D  $9E $9F $A0 $A1 $A2 $A3 $A4 $A5
    74 1058 A6 A7 A8 A9 00 01 + .by  $A6 $A7 $A8 $A9 $00 $01 $00 $01  $2A $AB $AC $AD $AE $AF $B0 $B1  $B2 $B3 $B4 $B5 $B6 $B7 $B8 $B9
    75 1070 BA BB BC BD 00 01 + .by  $BA $BB $BC $BD $00 $01 $00 $01  $2A $2B $2C $2D $2E $2F $30 $31  $32 $33 $34 $35 $36 $37 $38 $39
    76 1088 3A 3B 3C 3D 00 01 + .by  $3A $3B $3C $3D $00 $01 $00 $01  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
    77 10A0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $81 $82 $83 $84 $85 $86 $87 $88  $89 $8A $8B $8C $8D $8E $8F $90
    78 10B8 91 92 93 94 00 00 + .by  $91 $92 $93 $94 $00 $00 $00 $00  $95 $96 $97 $98 $99 $9A $9B $9C  $9D $9E $9F $A0 $A1 $A2 $A3 $A4
    79 10D0 A5 9F A6 A7 00 00 + .by  $A5 $9F $A6 $A7 $00 $00 $00 $00  $00 $A8 $A9 $AA $AB $AC $AD $A1  $AE $AF $9F $B0 $B1 $B2 $B3 $B4
    80 10E8 B5 B6 B7 B8 00 00 + .by  $B5 $B6 $B7 $B8 $00 $00 $00 $00  $00 $B9 $BA $BB $BC $BD $BE $BF  $C0 $C1 $C2 $C3 $C4 $C5 $C6 $C7
    81 1100 C8 C9 CA CB 00 00 + .by  $C8 $C9 $CA $CB $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
    82 1118 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
    83 1130 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
    84 1148 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $81 $82 $83 $84 $85 $86 $87 $88  $89 $8A $8B $8C $8D $8E $8F $90
    85 1160 91 8F 84 92 00 00 + .by  $91 $8F $84 $92 $00 $00 $00 $00  $93 $94 $95 $96 $97 $98 $99 $9A  $9B $9C $9D $9E $9F $A0 $A1 $A2
    86 1178 A3 A4 A5 A6 00 00 + .by  $A3 $A4 $A5 $A6 $00 $00 $00 $00  $00 $A7 $A8 $A9 $AA $AB $AC $AD  $AE $AF $A4 $B0 $B1 $B2 $B3 $B4
    87 1190 B5 B6 B7 B8 00 00 + .by  $B5 $B6 $B7 $B8 $00 $00 $00 $00  $00 $B9 $BA $BB $BC $BD $BE $BF  $C0 $C1 $C2 $C3 $C4 $C5 $C6 $C7
    88 11A8 C8 C9 CA CB 00 00 + .by  $C8 $C9 $CA $CB $00 $00 $00 $00  $00 $CC $CD $CE $CD $CF $80 $D0  $CE $80 $D0 $CE $D1 $CC $D1 $D2
    89 11C0 D3 CE CC D1 00 00 + .by  $D3 $CE $CC $D1 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
    90 11D8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
    91 11F0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $81 $82 $83 $84 $85 $80 $86 $80  $81 $85 $87 $88 $89 $85 $8A $8B
    92 1208 84 8A 84 80 00 00 + .by  $84 $8A $84 $80 $00 $00 $00 $00  $8C $8D $8E $8F $90 $91 $92 $93  $94 $95 $96 $97 $98 $99 $9A $9B
    93 1220 9C 9D 9E 9F 00 00 + .by  $9C $9D $9E $9F $00 $00 $00 $00  $A0 $A1 $A2 $A3 $A4 $A5 $A6 $A7  $A8 $A9 $AA $AB $AC $AD $AE $AF
    94 1238 B0 B1 B2 B3 00 00 + .by  $B0 $B1 $B2 $B3 $00 $00 $00 $00  $00 $B4 $B5 $B6 $B7 $B8 $B9 $BA  $BB $BC $BD $BE $BF $C0 $C1 $C2
    95 1250 C3 C4 C5 C6 00 00 + .by  $C3 $C4 $C5 $C6 $00 $00 $00 $00  $00 $C7 $C8 $C9 $CA $CB $CC $CD  $C9 $CE $CF $D0 $D1 $D2 $D3 $D4
    96 1268 D5 D6 D7 D1 00 00 + .by  $D5 $D6 $D7 $D1 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
    97 1280 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
    98 1298 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $80 $81 $82 $80 $80 $80 $82 $80  $80 $80 $80 $82 $83 $80 $80 $80
    99 12B0 80 80 80 80 00 00 + .by  $80 $80 $80 $80 $00 $00 $00 $00  $84 $85 $86 $87 $88 $89 $8A $8B  $8C $8D $8E $8F $90 $91 $92 $93
   100 12C8 94 95 96 97 00 00 + .by  $94 $95 $96 $97 $00 $00 $00 $00  $98 $99 $9A $9B $9C $9D $9E $9F  $A0 $A1 $A2 $A3 $A4 $A5 $A6 $A7
   101 12E0 A8 A9 AA AB 00 00 + .by  $A8 $A9 $AA $AB $00 $00 $00 $00  $00 $AC $AD $AE $AF $B0 $B1 $A4  $B2 $B3 $A2 $B4 $B5 $B6 $B7 $B8
   102 12F8 B9 BA BB BC 00 00 + .by  $B9 $BA $BB $BC $00 $00 $00 $00  $80 $BD $BE $BF $C0 $C1 $C2 $C3  $C4 $C5 $C6 $C7 $C8 $C9 $CA $CB
   103 1310 CC CD CE CF 00 00 + .by  $CC $CD $CE $CF $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   104 1328 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01
   105 1340 00 01 00 01 00 01 + .by  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01
   106 1358 00 01 00 01 00 01 + .by  $00 $01 $00 $01 $00 $01 $00 $01  $46 $C7 $C8 $C9 $CA $CB $CC $CD  $CE $CF $D0 $D1 $D2 $D3 $D4 $D5
   107 1370 D6 D7 D8 D9 00 01 + .by  $D6 $D7 $D8 $D9 $00 $01 $00 $01  $46 $C7 $C8 $C9 $CA $CB $4C $CD  $CE $CF $D0 $D1 $D2 $D3 $D4 $D5
   108 1388 D6 D7 D8 D9 00 01 + .by  $D6 $D7 $D8 $D9 $00 $01 $00 $01  $00 $01 $00 $01 $5A $5B $5C $5D  $5E $5F $00 $01 $60 $61 $62 $63
   109 13A0 64 65 00 01 00 01 + .by  $64 $65 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $5A $5B $5C $5D  $5E $5F $00 $01 $60 $61 $62 $63
   110 13B8 64 65 00 01 00 01 + .by  $64 $65 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $66 $67 $68 $69  $6A $6B $00 $01 $6C $6D $6E $6F
   111 13D0 70 71 00 01 00 01 + .by  $70 $71 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $66 $67 $68 $69  $6A $6B $00 $01 $6C $6D $6E $6F
   112 13E8 70 71 00 01 00 01 + .by  $70 $71 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01
   113 1400 00 01 00 01 00 01 + .by  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01
   114 1418 00 01 00 01 00 01 + .by  $00 $01 $00 $01 $00 $01 $00 $01  $3E $BF $C0 $C1 $C2 $C3 $C4 $C5  $C6 $C7 $C8 $C9 $CA $CB $CC $CD
   115 1430 CE CF D0 D1 00 01 + .by  $CE $CF $D0 $D1 $00 $01 $00 $01  $3E $BF $C0 $C1 $C2 $C3 $44 $C5  $C6 $C7 $C8 $C9 $CA $CB $CC $CD
   116 1448 CE CF D0 D1 00 01 + .by  $CE $CF $D0 $D1 $00 $01 $00 $01  $00 $01 $00 $01 $52 $53 $54 $55  $56 $57 $00 $01 $58 $59 $5A $5B
   117 1460 5C 5D 00 01 00 01 + .by  $5C $5D $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $52 $53 $54 $55  $56 $57 $00 $01 $58 $59 $5A $5B
   118 1478 5C 5D 00 01 00 01 + .by  $5C $5D $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $5E $5F $60 $61  $62 $63 $00 $01 $64 $65 $66 $67
   119 1490 68 69 00 01 00 01 + .by  $68 $69 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $5E $5F $60 $61  $62 $63 $00 $01 $64 $65 $66 $67
   120 14A8 68 69 00 01 00 01 + .by  $68 $69 $00 $01 $00 $01 $00 $01  $0E $D7 $8F $4F $0B $2F $26 $00  $10 $0A $00 $15 $14 $0D $2C $2C
   121 14C0 1C 54 20 44 00 00 + .by  $1C $54 $20 $44 $00 $00 $40 $FE  $0E $D7 $8F $4B $0B $2B $26 $00  $10 $0A $00 $15 $14 $0C $2C $2D
   122 14D8 1C 54 20 44 00 00 + .by  $1C $54 $20 $44 $00 $00 $40 $FE  $0E $D7 $89 $49 $09 $2B $26 $00  $11 $0B $01 $11 $14 $0C $2C $2C
   123 14F0 1D 54 20 44 00 00 + .by  $1D $54 $20 $44 $00 $00 $40 $FE  $4E $57 $6F $4F $6B $4F $66 $E0  $51 $5A $F0 $53 $03 $51 $55 $F4
   124 1508 76 65 40 04 00 00 + .by  $76 $65 $40 $04 $00 $00 $00 $81  $4E $57 $6F $4B $6B $4B $66 $E0  $51 $5A $F0 $53 $03 $01 $05 $54
   125 1520 56 F5 70 64 40 00 + .by  $56 $F5 $70 $64 $40 $00 $00 $81  $4E $57 $69 $49 $49 $6B $E6 $50  $59 $F2 $50 $13 $03 $41 $05 $04
   126 1538 56 55 F0 74 60 40 + .by  $56 $55 $F0 $74 $60 $40 $00 $81  $E0 $32 $18 $0A $08 $42 $2A $23  $05 $08 $80 $17 $2B $17 $0F $20
   127 1550 07 0B 13 07 00 00 + .by  $07 $0B $13 $07 $00 $00 $00 $E8  $E0 $32 $18 $0A $08 $82 $8A $43  $45 $08 $80 $17 $28 $11 $27 $01
   128 1568 27 01 20 01 0B 00 + .by  $27 $01 $20 $01 $0B $00 $00 $E8  $E0 $32 $18 $0A $08 $82 $8A $83  $45 $08 $80 $17 $28 $11 $4F $01
   129 1580 5F 0F 41 00 1B 00 + .by  $5F $0F $41 $00 $1B $00 $00 $E8  $3E $7E $86 $03 $03 $13 $8B $8B  $82 $C4 $7A $76 $A7 $E3 $F5 $73
   130 1598 60 E0 C0 80 00 00 + .by  $60 $E0 $C0 $80 $00 $00 $00 $00  $3E $7E $86 $03 $03 $23 $A3 $93  $92 $C4 $7A $76 $A7 $63 $B5 $23
   131 15B0 B0 20 20 C0 80 00 + .by  $B0 $20 $20 $C0 $80 $00 $00 $00  $3E $7E $86 $03 $03 $23 $A3 $A3  $92 $C4 $7A $76 $A7 $63 $D5 $13
   132 15C8 D0 90 10 E0 80 00 + .by  $D0 $90 $10 $E0 $80 $00 $00 $00  $0F $47 $23 $51 $59 $04 $22 $14  $01 $2A $19 $2A $1A $08 $02 $05
   133 15E0 02 01 00 00 00 00 + .by  $02 $01 $00 $00 $00 $00 $00 $4C  $0F $47 $2B $51 $59 $04 $22 $14  $01 $2A $18 $2A $1A $08 $02 $05
   134 15F8 02 01 00 00 00 00 + .by  $02 $01 $00 $00 $00 $00 $00 $4C  $0F $47 $2B $51 $59 $04 $22 $14  $01 $2A $18 $2A $1A $08 $02 $05
   135 1610 02 01 00 00 00 00 + .by  $02 $01 $00 $00 $00 $00 $00 $4C  $46 $54 $48 $51 $E3 $A4 $A8 $E5  $70 $FA $19 $0B $49 $EA $0C $1C
   136 1628 78 70 E0 00 00 00 + .by  $78 $70 $E0 $00 $00 $00 $00 $00  $46 $54 $4A $51 $E3 $A4 $A8 $E5  $10 $0A $09 $0B $69 $EA $6C $24
   137 1640 31 5E EC 43 00 00 + .by  $31 $5E $EC $43 $00 $00 $00 $00  $46 $54 $4A $51 $E3 $A4 $A8 $E5  $10 $0A $09 $0B $69 $EA $6C $34
   138 1658 10 58 EF 44 02 00 + .by  $10 $58 $EF $44 $02 $00 $00 $00  $00 $00 $A8 $00 $50 $01 $F8 $01
Source: block_attack.a65
   122
   123 				; ------------------------------------------------------------
   124
   125 1668			RTLIB
   126 1668				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    84 					opt l+
   127
   128 				.print 'ZPAGE: ',zpage,'..',zpend-1
   128 				ZPAGE: $0080..$00D3
   129
   130 				.print 'RTBUF: ',@buf,'..',@buf+255
   130 				RTBUF: $0400..$04FF
   131
   132 				.print 'RTLIB: ',RTLIB,'..',*-1
   132 				RTLIB: $1668..$18B9
   133
   134 				; ------------------------------------------------------------
   135
   136 18BA			START
   137 18BA BA				tsx
   138 18BB 8E C8 40			stx MAIN.@halt+1
   139
   140 = 014F			VLEN	= VARDATASIZE-VARINITSIZE
   141 = A27F			VADR	= DATAORIGIN+VARINITSIZE
   142
   143 					ift VADR > $BFFF
   144 					ert 'Invalid memory address range ',VADR
   145 					eli (VLEN > 0) && (VLEN <= 256)
   146 					ldx #256-VLEN
   147 					lda #$00
   148 					sta:rne VADR+VLEN-256,x+
   149 					eli VLEN>256
   150 18BE				m@init
Macro: M@INIT [Source: macros.asm]
     2 18BE A0 7F			ldy <VADR
     3 18C0 A2 A2			ldx >VADR
     5 18C2 A9 00			lda #$00
     6 18C4 F0 07			beq skp_
     8 18C6 99 00 10		clr	sta adr: $1000,y
    10 18C9 C8				iny
    11 18CA D0 04			bne skp
    12 18CC E8				inx
    13 18CD 8E C8 18		skp_	stx adr+1
    15 18D0 E0 A3		skp	cpx >VADR+VLEN
    16 18D2 D0 F2			bne clr
    17 18D4 C0 CE			cpy <VADR+VLEN
    18 18D6 D0 EE			bne clr
   151 					eif
   152
   153 				.ifdef psptr
   154 					mwa #PROGRAMSTACK psptr
   155 				.fi
   156
   157 					.ifdef MAIN.@DEFINES.ROMOFF
   158 					icl 'atari\romoff.asm'
   159 					.fi
   160
   161 18D8 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   162 18DA BD 40 03 9D CD 40 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   163
   164 18E3 E8				inx						; X = 0
   165 18E4 86 80			stx bp						; BP = 0
   166
   167 18E6 8E 08 D2			stx audctl					; reset POKEY
   168 18E9 8E 18 D2			stx audctl+$10
   169 18EC A9 03			lda #3
   170 18EE 8D 0F D2			sta skctl
   171 18F1 8D 1F D2			sta skctl+$10
   172
   173 18F4 CA				dex						; X = 255
   174
   175 18F5				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: block_attack.a65]
    51 18F5 20 EA 1C			jsr MAIN.SYSREQ.@UnitInit
    55 18F8 20 84 1E			jsr MAIN.SAPLZSS.@UnitInit
   176
   177 18FB			.local	MAIN						; PROCEDURE
   178
   179 18FB 4C 59 3D			jmp l_00F9
   180
   181 				; ------------------------------------------------------------
   182
   183 18FE			.local	SYSTEM						; UNIT
   184
   185 18FE			.local	STR_0133					; PROCEDURE | ASSEMBLER | OVERLOAD
   186
   187 				; ------------------------------------------------------------
   188
   189 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   190 				; as Pointer
   191 18FE B5 94			lda :STACKORIGIN,x
   192 1900 8D EE A1			sta A
   193 1903 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   194 1905 8D EF A1			sta A+1
   195 1908 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
   196 190A 8D F0 A1			sta A+2
   197 190D B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
   198 190F 8D F1 A1			sta A+3
   199 1912 CA				dex
   200 1913 30 0B			jmi @main
   201
   202 				; ------------------------------------------------------------
   203
   204 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   205 				; as Pointer
   206 1915 B5 94			lda :STACKORIGIN,x
   207 1917 8D F2 A1			sta S
   208 191A B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   209 191C 8D F3 A1			sta S+1
   210 191F CA				dex
   211 1920			@main
   212
   213 				; -------------------  ASM Block 00000023  -------------------
   214
   215 1920 8A 48			txa:pha
   216
   217 1922 E8				inx		; parameter A
   218 1923 E8				inx		; parameter S
   219
   220 					@ValueToStr #@printCARD
   220 				 LDY> @PRINTCARD\ LDA< @PRINTCARD\ JSR @VALUETOSTR
   220 1924 A0 18		 LDY> @PRINTCARD
   220 1926 A9 16		 LDA< @PRINTCARD
   220 1928 20 BE 17		 JSR @VALUETOSTR
   221
   222 					@buf2str s	; !!! koniecznie przez wskaznik
   222 				 LDY S+1\ LDA S\ JSR @BUF2STR
   222 192B AC F3 A1		 LDY S+1
   222 192E AD F2 A1		 LDA S
   222 1931 20 40 17		 JSR @BUF2STR
   223
   224 1934 68 AA			pla:tax
   225
   226 				; ------------------------------------------------------------
   227
   228 = A1EE			A	= DATAORIGIN+$000B
   229 = A1F2			S	= DATAORIGIN+$000F
   230
   231 = A1EE			@VarData	= A
   232 = 0006			@VarDataSize	= 6
   233
   234 1936			@exit
   235 					.ifdef @new
   236 					lda <@VarData
   237 					sta :ztmp
   238 					lda >@VarData
   239 					ldy #@VarDataSize-1
   240 					jmp @FreeMem
   241 					els
   242 1936 60				rts						; ret
   243 					eif
   244 				.endl
   245
   246 1937			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   247
   248 				; ------------------------------------------------------------
   249
   250 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   251 				; as Pointer
   252 1937 B5 94			lda :STACKORIGIN,x
   253 1939 85 88			sta A
   254 193B B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   255 193D 85 89			sta A+1
   256 193F CA				dex
   257 1940 30 05			jmi @main
   258
   259 				; ------------------------------------------------------------
   260
   261 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   262 				; as Pointer
   263 1942 B5 94			lda :STACKORIGIN,x
   264 1944 85 8C			sta VALUE
   265 1946 CA				dex
   266 1947			@main
   267
   268 				; -------------------  ASM Block 00000024  -------------------
   269
   270 1947 A0 00			ldy #0
   271 1949 A5 8C 91 88			mva value (:edx),y
   272
   273 				; ------------------------------------------------------------
   274
   275 = 0088			A	= :EDX
   276 = 008C			VALUE	= :ECX
   277 194D			@exit
   278 					.ifdef @new
   279 					lda <@VarData
   280 					sta :ztmp
   281 					lda >@VarData
   282 					ldy #@VarDataSize-1
   283 					jmp @FreeMem
   284 					els
   285 194D 60				rts						; ret
   286 					eif
   287 				.endl
   288
   289 194E			.local	FILLCHAR_0141					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   290
   291 					.MACRO m@INLINE
   292 				
   293 				; -------------------  ASM Block 00000027  -------------------
   294 				
   295 					jsr @fill
   296 				
   297 					.ENDM
   298
   299 				; ------------------------------------------------------------
   300
   301 = 0088			A	= :EDX
   302 = 008C			COUNT	= :ECX
   303 = 0084			VALUE	= :EAX
   304 194E			@exit
   305 				.endl
   306
   307 194E			.local	FILLCHAR_0142					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   308
   309 					.MACRO m@INLINE
   310 				
   311 				; -------------------  ASM Block 00000030  -------------------
   312 				
   313 					jsr @fill
   314 				
   315 					.ENDM
   316
   317 				; ------------------------------------------------------------
   318
   319 = 0088			A	= :EDX
   320 = 008C			COUNT	= :ECX
   321 = 0084			VALUE	= :EAX
   322 194E			@exit
   323 				.endl
   324
   325 194E			.local	MOVE_0143					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   326
   327 					.MACRO m@INLINE
   328 				
   329 				; -------------------  ASM Block 00000033  -------------------
   330 				
   331 					jsr @move
   332 				
   333 					.ENDM
   334
   335 				; ------------------------------------------------------------
   336
   337 = 0088			SOURCE	= :EDX
   338 = 008C			DEST	= :ECX
   339 = 0084			COUNT	= :EAX
   340 194E			@exit
   341 				.endl
   342
   343 194E			.local	MOVE_0144					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   344
   345 					.MACRO m@INLINE
   346 				
   347 				; -------------------  ASM Block 00000035  -------------------
   348 				
   349 					jsr @move
   350 				
   351 					.ENDM
   352
   353 				; ------------------------------------------------------------
   354
   355 = 0088			SOURCE	= :EDX
   356 = 008C			DEST	= :ECX
   357 = 0084			COUNT	= :EAX
   358 194E			@exit
   359 				.endl
   360
   361 194E			.local	PAUSE_016D					; PROCEDURE | ASSEMBLER | OVERLOAD
   362
   363 				; -------------------  ASM Block 00000042  -------------------
   364
   365 194E A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   366
   367 1954			@exit
   368 					.ifdef @new
   369 					lda <@VarData
   370 					sta :ztmp
   371 					lda >@VarData
   372 					ldy #@VarDataSize-1
   373 					jmp @FreeMem
   374 					els
   375 1954 60				rts						; ret
   376 					eif
   377 				.endl
   378
   379 1955			.local	PAUSE_016E					; PROCEDURE | ASSEMBLER | OVERLOAD
   380
   381 				; -------------------  ASM Block 00000043  -------------------
   382
   383
   384 1955 AD F4 A1		loop	lda n
   385 1958 0D F5 A1			ora n+1
   386 195B F0 14			beq stop
   387
   388 195D A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   389
   390 1963 AD F4 A1 D0 03 CE + 	dew n
   391
   392 196E 4C 55 19			jmp loop
   393 1971			stop
   394
   395
   396 				; ------------------------------------------------------------
   397
   398 = A1F4			N	= DATAORIGIN+$0011
   399
   400 = A1F4			@VarData	= N
   401 = 0002			@VarDataSize	= 2
   402
   403 1971			@exit
   404 					.ifdef @new
   405 					lda <@VarData
   406 					sta :ztmp
   407 					lda >@VarData
   408 					ldy #@VarDataSize-1
   409 					jmp @FreeMem
   410 					els
   411 1971 60				rts						; ret
   412 					eif
   413 				.endl
   414
   415 1972			.local	RANDOMIZE					; PROCEDURE | ASSEMBLER
   416
   417 				; -------------------  ASM Block 00000044  -------------------
   418
   419
   420 1972 AD 0A D2 8D EC A1	  mva $d20a RndSeed
   421 1978 A9 00 8D ED A1	  mva #$00  RndSeed+1
   422
   423
   424 197D			@exit
   425 					.ifdef @new
   426 					lda <@VarData
   427 					sta :ztmp
   428 					lda >@VarData
   429 					ldy #@VarDataSize-1
   430 					jmp @FreeMem
   431 					els
   432 197D 60				rts						; ret
   433 					eif
   434 				.endl
   435
   436 197E			.local	RANDOM_0170					; FUNCTION | ASSEMBLER | OVERLOAD
   437 197E 8D F6 A1			sta RANGE
   438
   439 				; -------------------  ASM Block 00000048  -------------------
   440
   441
   442 				;BYTE FUNC Rand(BYTE range)
   443 				; returns random number between 0 and
   444 				; range-1.  If range=0, then a random
   445 				; number between 0 and 255 is returned
   446
   447 1981 AC 0A D2		  ldy $d20a   ; RANDOM
   448
   449 1984 AD F6 A1		  lda range
   450 1987 F0 08		  beq stop
   451
   452 1989 85 8C		  sta :ecx
   453 198B 84 84		  sty :eax
   454
   455 198D 20 60 17		  jsr imulCL
   456 1990 A8			  tay
   457
   458 1991 8C F7 A1		stop  sty Result
   459
   460
   461 1994			@exit
   462
   463 				; ------------------------------------------------------------
   464
   465 = A1F6			RANGE	= DATAORIGIN+$0013
   466 = A1F7			RESULT	= DATAORIGIN+$0014
   467
   468 = A1F6			@VarData	= RANGE
   469 = 0001			@VarDataSize	= 1
   470
   471 1994 60				rts						; ret
   472 				.endl
   473
   474 				; ------------------------------------------------------------
   475
   476 = 0101			__PORTB_BANKS	= $0101
   477 = 0648			M_PI_2	= $0648
   478 = 0192			D_PI_2	= $0192
   479 = 0004			D_PI_180	= $04
   480 = 0000			MGTIA	= $00
   481 = 0080			MVBXE	= $80
   482 = 0000			VBXE_XDLADR	= $00
   483 = 00E0			VBXE_BCBTMP	= $E0
   484 = 0100			VBXE_BCBADR	= $0100
   485 = 1000			VBXE_MAPADR	= $1000
   486 = 1000			VBXE_CHBASE	= $1000
   487 = 5000			VBXE_OVRADR	= $5000
   488 = B000			VBXE_WINDOW	= $B000
   489 = 0000			IDLI	= $00
   490 = 0001			IVBL	= $01
   491 = 0001			IVBLD	= $01
   492 = 0002			IVBLI	= $02
   493 = 0003			ITIM1	= $03
   494 = 0004			ITIM2	= $04
   495 = 0005			ITIM4	= $05
   496 = 00FE			CH_DELCHR	= $FE
   497 = 009B			CH_ENTER	= $9B
   498 = 001B			CH_ESC	= $1B
   499 = 001C			CH_CURS_UP	= $1C
   500 = 001D			CH_CURS_DOWN	= $1D
   501 = 001E			CH_CURS_LEFT	= $1E
   502 = 001F			CH_CURS_RIGHT	= $1F
   503 = 007F			CH_TAB	= $7F
   504 = 009B			CH_EOL	= $9B
   505 = 007D			CH_CLR	= $7D
   506 = 00FD			CH_BELL	= $FD
   507 = 007E			CH_DEL	= $7E
   508 = 009C			CH_DELLINE	= $9C
   509 = 009D			CH_INSLINE	= $9D
   510 = 0000			PAL_PMCOLOR0	= $00
   511 = 0001			PAL_PMCOLOR1	= $01
   512 = 0002			PAL_PMCOLOR2	= $02
   513 = 0003			PAL_PMCOLOR3	= $03
   514 = 0004			PAL_COLOR0	= $04
   515 = 0005			PAL_COLOR1	= $05
   516 = 0006			PAL_COLOR2	= $06
   517 = 0007			PAL_COLOR3	= $07
   518 = 0008			PAL_COLBAK	= $08
   519 = 0000			COLOR_BLACK	= $00
   520 = 000E			COLOR_WHITE	= $0E
   521 = 0032			COLOR_RED	= $32
   522 = 0096			COLOR_CYAN	= $96
   523 = 0068			COLOR_VIOLET	= $68
   524 = 00C4			COLOR_GREEN	= $C4
   525 = 0074			COLOR_BLUE	= $74
   526 = 00EE			COLOR_YELLOW	= $EE
   527 = 0028			COLOR_ORANGE	= $28
   528 = 00E4			COLOR_BROWN	= $E4
   529 = 003C			COLOR_LIGHTRED	= $3C
   530 = 0004			COLOR_GRAY1	= $04
   531 = 0006			COLOR_GRAY2	= $06
   532 = 000A			COLOR_GRAY3	= $0A
   533 = 00CC			COLOR_LIGHTGREEN	= $CC
   534 = 007C			COLOR_LIGHTBLUE	= $7C
   535 = 0004			FMOPENREAD	= $04
   536 = 0008			FMOPENWRITE	= $08
   537 = 0009			FMOPENAPPEND	= $09
   538 = 000C			FMOPENREADWRITE	= $0C
   539 = A1E3			SCREENWIDTH	= DATAORIGIN+$0000
   540 = A1E5			SCREENHEIGHT	= DATAORIGIN+$0002
   541 = A1E7			DATESEPARATOR	= DATAORIGIN+$0004
   542 = D20A			RND	= $D20A
   543 = 02C0			adr.PALETTE	= $02C0
   544 1995			.var PALETTE	= adr.PALETTE .word
   545 = D012			adr.HPALETTE	= $D012
   546 1995			.var HPALETTE	= adr.HPALETTE .word
   547 = A1E8			FILEMODE	= DATAORIGIN+$0005
   548 = A1E9			GRAPHMODE	= DATAORIGIN+$0006
   549 = A1EA			IORESULT	= DATAORIGIN+$0007
   550 = A1EB			EOLN	= DATAORIGIN+$0008
   551 = A1EC			RNDSEED	= DATAORIGIN+$0009
   552
   553 = 1995 C0 02		PALETTE
   553 = 1997 12 D0		HPALETTE
   553 				.endl							; UNIT SYSTEM
   554
   555 				; ------------------------------------------------------------
   556
   557 1999			.local	ATARI						; UNIT
   558
   559 				; ------------------------------------------------------------
   560
   561 = 0010			IRQENS	= $10
   562 = 0012			RTCLOK	= $12
   563 = 0012			RTCLOK1	= $12
   564 = 0013			RTCLOK2	= $13
   565 = 0014			RTCLOK3	= $14
   566 = 004D			ATRACT	= $4D
   567 = 0052			LMARGIN	= $52
   568 = 0053			RMARGIN	= $53
   569 = 0054			ROWCRS	= $54
   570 = 0055			COLCRS	= $55
   571 = 0057			DINDEX	= $57
   572 = 0058			SAVMSC	= $58
   573 = 0062			PALNTS	= $62
   574 = 006A			RAMTOP	= $6A
   575 = 0200			VDSLST	= $0200
   576 = 0230			SDLSTL	= $0230
   577 = 0290			TXTROW	= $0290
   578 = 0291			TXTCOL	= $0291
   579 = 0293			TINDEX	= $0293
   580 = 0294			TXTMSC	= $0294
   581 = 022F			SDMCTL	= $022F
   582 = 026F			GPRIOR	= $026F
   583 = 02F0			CRSINH	= $02F0
   584 = 02F3			CHACT	= $02F3
   585 = 02F4			CHBAS	= $02F4
   586 = 02FC			CH	= $02FC
   587 = 02FD			FILDAT	= $02FD
   588 = 02C0			PCOLR0	= $02C0
   589 = 02C1			PCOLR1	= $02C1
   590 = 02C2			PCOLR2	= $02C2
   591 = 02C3			PCOLR3	= $02C3
   592 = 02C4			COLOR0	= $02C4
   593 = 02C5			COLOR1	= $02C5
   594 = 02C6			COLOR2	= $02C6
   595 = 02C7			COLOR3	= $02C7
   596 = 02C8			COLOR4	= $02C8
   597 = 02C8			COLBAKS	= $02C8
   598 = D000			HPOSP0	= $D000
   599 = D001			HPOSP1	= $D001
   600 = D002			HPOSP2	= $D002
   601 = D003			HPOSP3	= $D003
   602 = D004			HPOSM0	= $D004
   603 = D005			HPOSM1	= $D005
   604 = D006			HPOSM2	= $D006
   605 = D007			HPOSM3	= $D007
   606 = D008			SIZEP0	= $D008
   607 = D009			SIZEP1	= $D009
   608 = D00A			SIZEP2	= $D00A
   609 = D00B			SIZEP3	= $D00B
   610 = D00C			SIZEM	= $D00C
   611 = D00D			GRAFP0	= $D00D
   612 = D00E			GRAFP1	= $D00E
   613 = D00F			GRAFP2	= $D00F
   614 = D010			GRAFP3	= $D010
   615 = D011			GRAFM	= $D011
   616 = D004			P0PF	= $D004
   617 = D014			PAL	= $D014
   618 = D013			TRIG3	= $D013
   619 = D012			COLPM0	= $D012
   620 = D013			COLPM1	= $D013
   621 = D014			COLPM2	= $D014
   622 = D015			COLPM3	= $D015
   623 = D016			COLPF0	= $D016
   624 = D017			COLPF1	= $D017
   625 = D018			COLPF2	= $D018
   626 = D019			COLPF3	= $D019
   627 = D01A			COLBK	= $D01A
   628 = D01B			PRIOR	= $D01B
   629 = D01D			GRACTL	= $D01D
   630 = D01E			HITCLR	= $D01E
   631 = D01F			CONSOL	= $D01F
   632 = D200			AUDF1	= $D200
   633 = D201			AUDC1	= $D201
   634 = D202			AUDF2	= $D202
   635 = D203			AUDC2	= $D203
   636 = D204			AUDF3	= $D204
   637 = D205			AUDC3	= $D205
   638 = D206			AUDF4	= $D206
   639 = D207			AUDC4	= $D207
   640 = D208			AUDCTL	= $D208
   641 = D209			KBCODE	= $D209
   642 = D20E			IRQEN	= $D20E
   643 = D20F			SKSTAT	= $D20F
   644 = D300			PORTA	= $D300
   645 = D301			PORTB	= $D301
   646 = D302			PACTL	= $D302
   647 = D400			DMACTL	= $D400
   648 = D401			CHACTL	= $D401
   649 = D402			DLISTL	= $D402
   650 = D404			HSCROL	= $D404
   651 = D405			VSCROL	= $D405
   652 = D407			PMBASE	= $D407
   653 = D409			CHBASE	= $D409
   654 = D40A			WSYNC	= $D40A
   655 = D40B			VCOUNT	= $D40B
   656 = D40C			PENH	= $D40C
   657 = D40D			PENV	= $D40D
   658 = D40E			NMIEN	= $D40E
   659 = FFFA			NMIVEC	= $FFFA
   660 = FFFC			RESETVEC	= $FFFC
   661 = FFFE			IRQVEC	= $FFFE
   662
   663 				.endl							; UNIT ATARI
   664
   665 				; ------------------------------------------------------------
   666
   667 1999			.local	CRT						; UNIT
   668
   669 1999			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   670
   671 				; -------------------  ASM Block 00000062  -------------------
   672
   673 1999 A0 00			ldy #$00	; false
   674 199B AD FC 02			lda kbcodes
   675 199E C9 FF			cmp #$ff
   676 19A0 F0 01			seq
   677 19A2 C8				iny		; true
   678 19A3 8C F9 A1			sty Result
   679
   680 19A6			@exit
   681
   682 				; ------------------------------------------------------------
   683
   684 = A1F9			RESULT	= DATAORIGIN+$0016
   685 19A6 60				rts						; ret
   686 				.endl
   687
   688 				; ------------------------------------------------------------
   689
   690 = A1F8			TEXTATTR	= DATAORIGIN+$0015
   691 = D01F			CONSOL	= $D01F
   692 = 0000			CN_START_SELECT_OPTION	= $00
   693 = 0001			CN_SELECT_OPTION	= $01
   694 = 0002			CN_START_OPTION	= $02
   695 = 0003			CN_OPTION	= $03
   696 = 0004			CN_START_SELECT	= $04
   697 = 0005			CN_SELECT	= $05
   698 = 0006			CN_START	= $06
   699 = 0007			CN_NONE	= $07
   700 = 0000			BW40	= $00
   701 = 0001			CO40	= $01
   702 = 0002			BW80	= $02
   703 = 0003			CO80	= $03
   704 = 0007			MONO	= $07
   705 = 0001			C40	= $01
   706 = 0003			C80	= $03
   707 = 0000			BLACK	= $00
   708 = 000F			WHITE	= $0F
   709 = 0026			RED	= $26
   710 = 00AC			CYAN	= $AC
   711 = 0048			PURPLE	= $48
   712 = 00B6			GREEN	= $B6
   713 = 0086			BLUE	= $86
   714 = 00DC			YELLOW	= $DC
   715 = 0018			ORANGE	= $18
   716 = 00F4			BROWN	= $F4
   717 = 002A			LIGHT_RED	= $2A
   718 = 0004			DARK_GREY	= $04
   719 = 0008			GREY	= $08
   720 = 00BC			LIGHT_GREEN	= $BC
   721 = 009A			LIGHT_BLUE	= $9A
   722 = 000C			LIGHT_GREY	= $0C
   723 = 0080			BLINK	= $80
   724
   725 				.endl							; UNIT CRT
   726
   727 				; ------------------------------------------------------------
   728
   729 19A7			.local	DOS						; UNIT
   730
   731 				; ------------------------------------------------------------
   732
   733 = D014			PALNTSC	= $D014
   734
   735 				.endl							; UNIT DOS
   736
   737 				; ------------------------------------------------------------
   738
   739 19A7			.local	STRUTILS					; UNIT
   740
   741 				; ------------------------------------------------------------
   742
   743 				.endl							; UNIT STRUTILS
   744
   745 				; ------------------------------------------------------------
   746
   747 19A7			.local	SYSUTILS					; UNIT
   748
   749 19A7			.local	BYTETOSTR					; FUNCTION | ASSEMBLER
   750 19A7 8D FA A1			sta A
   751
   752 				; -------------------  ASM Block 00000079  -------------------
   753
   754 19AA 8A 48			txa:pha
   755
   756 19AC AD FA A1			lda a
   757 19AF A0 2F			ldy #$2f
   758 19B1 A2 3A			ldx #$3a
   759 19B3 38				sec
   760 19B4 C8			@	iny
   761 19B5 E9 64			sbc #100
   762 19B7 B0 FB			bcs @-
   763 19B9 CA			@	dex
   764 19BA 69 0A			adc #10
   765 19BC 30 FB			bmi @-
   766 19BE 69 2F			adc #$2f
   767
   768 19C0 8D FE A1			sta adr.Result+3
   769 19C3 8E FD A1			stx adr.Result+2
   770 19C6 8C FC A1			sty adr.Result+1
   771
   772 19C9 A0 03			ldy #3
   773 19CB C0 01		lp	cpy #1
   774 19CD F0 16			beq skp
   775 19CF AD FC A1			lda adr.Result+1
   776 19D2 C9 30			cmp #$30
   777 19D4 D0 0F			bne skp
   778
   779 19D6 AD FD A1			lda adr.Result+2
   780 19D9 8D FC A1			sta adr.Result+1
   781 19DC AD FE A1			lda adr.Result+3
   782 19DF 8D FD A1			sta adr.Result+2
   783
   784 19E2 88				dey
   785 19E3 D0 E6			bne lp
   786
   787 19E5 8C FB A1		skp	sty adr.Result
   788
   789 19E8 68 AA			pla:tax
   790
   791 19EA			@exit
   792
   793 				; ------------------------------------------------------------
   794
   795 = A1FA			A	= DATAORIGIN+$0017
   796 = A1FB			adr.RESULT	= [DATAORIGIN+$0018] .array [33]
   797 19EA			.var RESULT	= adr.RESULT .word
   798
   799 = A1FA			@VarData	= A
   800 = 0022			@VarDataSize	= 34
   801
   802 19EA 60				rts						; ret
   803 = 19EB FB A1		RESULT
   803 				.endl
   804
   805 				; ------------------------------------------------------------
   806
   807 = 0001			FAREADONLY	= $01
   808 = 0002			FAHIDDEN	= $02
   809 = 0004			FASYSFILE	= $04
   810 = 0008			FAVOLUMEID	= $08
   811 = 0010			FADIRECTORY	= $10
   812 = 0020			FAARCHIVE	= $20
   813 = 003F			FAANYFILE	= $3F
   814
   815 				.endl							; UNIT SYSUTILS
   816
   817 				; ------------------------------------------------------------
   818
   819 19ED			.local	JGP2						; UNIT
   820
   821 19ED			.local	JGPDLI						; PROCEDURE | ASSEMBLER | INTERRUPT
   822
   823 				; -------------------  ASM Block 00000089  -------------------
   824
   825 19ED 48				pha
   826
   827 19EE A9 00			lda #0
   828 = 19EF			.def	:JGPCharset = *-1
   829
   830 19F0 EE FC 19			inc dliCnt	; cycle latency
   831
   832 19F3 8D 09 D4			sta chbase
   833
   834 19F6 49 04			eor #4
   835 = 19F7			.def	:JGPEor = *-1
   836 19F8 8D EF 19			sta JGPCharset
   837
   838 19FB A9 00			lda #0
   839 = 19FC			.def	:dliCnt = *-1
   840 19FD 18 6D 83 A2			add cntRow
   841
   842 1A01 10 0A			bpl skp
   843
   844 1A03 A9 06			lda #6
   845 1A05 8D 17 D0			sta colpf1
   846 1A08 A9 04			lda #4
   847 1A0A 8D 18 D0			sta colpf2
   848
   849 1A0D			skp
   850 1A0D 68				pla
   851
   852 1A0E 40				rti						; ret
   853 				.endl
   854
   855 1A0F			.local	DLPOKE						; PROCEDURE
   856 1A0F 8D 22 A2			sta B
   857
   858 				; optimize OK (JGP2), line = 73
   859
   860 1A12 AC 1D A2			ldy DLIST+1
   861 1A15 84 81			sty :bp+1
   862 1A17 AC 1C A2			ldy DLIST
   863 1A1A AD 22 A2			lda B
   864 1A1D 91 80			sta (:bp),y
   865
   866 				; optimize FAIL (0, JGP2), line = 74
   867
   868 1A1F EE 1C A2			inc DLIST
   869 1A22 D0 03			sne
   870 1A24 EE 1D A2			inc DLIST+1
   871
   872 				; ------------------------------------------------------------
   873
   874 = A222			B	= DATAORIGIN+$003F
   875
   876 = A222			@VarData	= B
   877 = 0001			@VarDataSize	= 1
   878
   879 1A27			@exit
   880 					.ifdef @new
   881 					lda <@VarData
   882 					sta :ztmp
   883 					lda >@VarData
   884 					ldy #@VarDataSize-1
   885 					jmp @FreeMem
   886 					els
   887 1A27 60				rts						; ret
   888 					eif
   889 				.endl
   890
   891 1A28			.local	DLPOKEW						; PROCEDURE
   892
   893 				; optimize OK (JGP2), line = 79
   894
   895 1A28 AC 1D A2			ldy DLIST+1
   896 1A2B 84 81			sty :bp+1
   897 1A2D AC 1C A2			ldy DLIST
   898 1A30 AD 23 A2			lda W
   899 1A33 91 80			sta (:bp),y
   900
   901 				; optimize OK (JGP2), line = 80
   902
   903 1A35 AD 24 A2			lda W+1
   904 1A38 AC 1C A2 84 82 AC + 	mwy DLIST :bp2
   905 1A42 A0 01			ldy #$01
   906 1A44 91 82			sta (:bp2),y
   907
   908 				; optimize OK (JGP2), line = 81
   909
   910 1A46 AD 1C A2			lda DLIST
   911 1A49 18 69 02			add #$02
   912 1A4C 8D 1C A2			sta DLIST
   913 1A4F 90 03			scc
   914 1A51 EE 1D A2			inc DLIST+1
   915
   916 				; ------------------------------------------------------------
   917
   918 = A223			W	= DATAORIGIN+$0040
   919
   920 = A223			@VarData	= W
   921 = 0002			@VarDataSize	= 2
   922
   923 1A54			@exit
   924 					.ifdef @new
   925 					lda <@VarData
   926 					sta :ztmp
   927 					lda >@VarData
   928 					ldy #@VarDataSize-1
   929 					jmp @FreeMem
   930 					els
   931 1A54 60				rts						; ret
   932 					eif
   933 				.endl
   934
   935 1A55			.local	BUILDDISPLAYLIST				; PROCEDURE
   936
   937 				; optimize OK (JGP2), line = 88
   938
   939 1A55 AD 25 A2			lda DLISTADDRESS
   940 1A58 8D 1C A2			sta DLIST
   941 1A5B AD 26 A2			lda DLISTADDRESS+1
   942 1A5E 8D 1D A2			sta DLIST+1
   943
   944 				; --- WhileProlog
   945 1A61 4C 6C 1A			jmp l_01E7
   946 1A64			l_01E8
   947
   948 				; optimize OK (JGP2), line = 90
   949
   950 1A64 A9 F0			lda #$F0
   951 1A66 20 0F 1A			jsr DLPOKE
   952
   953 				; optimize FAIL (0, JGP2), line = 91
   954
   955 1A69 CE 2A A2			dec BLANKS
   956 1A6C			l_01E7
   957
   958 				; optimize OK (JGP2), line = 89
   959
   960 1A6C AD 2A A2			lda BLANKS
   961 1A6F D0 F3			jne l_01E8
   962
   963 				; optimize OK (JGP2), line = 94
   964
   965 1A71 CE 29 A2			dec LINES
   966
   967 				; optimize OK (JGP2), line = 96
   968
   969 1A74 A9 E4			lda #$E4
   970 1A76 20 0F 1A			jsr DLPOKE
   971
   972 				; optimize OK (JGP2), line = 97
   973
   974 1A79 AD 27 A2			lda VRAMADDRESS
   975 1A7C 8D 23 A2			sta DLPOKEW.W
   976 1A7F AD 28 A2			lda VRAMADDRESS+1
   977 1A82 8D 24 A2			sta DLPOKEW.W+1
   978 1A85 20 28 1A			jsr DLPOKEW
   979
   980 				; --- WhileProlog
   981 1A88 4C 93 1A			jmp l_020B
   982 1A8B			l_020C
   983
   984 				; optimize OK (JGP2), line = 100
   985
   986 1A8B A9 A4			lda #$A4
   987 1A8D 20 0F 1A			jsr DLPOKE
   988
   989 				; optimize FAIL (0, JGP2), line = 102
   990
   991 1A90 CE 29 A2			dec LINES
   992 1A93			l_020B
   993
   994 				; optimize OK (JGP2), line = 99
   995
   996 1A93 AD 29 A2			lda LINES
   997 1A96 D0 F3			jne l_020C
   998
   999 				; optimize OK (JGP2), line = 104
  1000
  1001 1A98 A9 04			lda #$04
  1002 1A9A 20 0F 1A			jsr DLPOKE
  1003
  1004 				; optimize OK (JGP2), line = 106
  1005
  1006 1A9D A9 41			lda #$41
  1007 1A9F 20 0F 1A			jsr DLPOKE
  1008
  1009 				; optimize OK (JGP2), line = 107
  1010
  1011 1AA2 AD 25 A2			lda DLISTADDRESS
  1012 1AA5 8D 23 A2			sta DLPOKEW.W
  1013 1AA8 AD 26 A2			lda DLISTADDRESS+1
  1014 1AAB 8D 24 A2			sta DLPOKEW.W+1
  1015 1AAE 20 28 1A			jsr DLPOKEW
  1016
  1017 				; ------------------------------------------------------------
  1018
  1019 = A225			DLISTADDRESS	= DATAORIGIN+$0042
  1020 = A227			VRAMADDRESS	= DATAORIGIN+$0044
  1021 = A229			LINES	= DATAORIGIN+$0046
  1022 = A22A			BLANKS	= DATAORIGIN+$0047
  1023
  1024 = A225			@VarData	= DLISTADDRESS
  1025 = 0006			@VarDataSize	= 6
  1026
  1027 1AB1			@exit
  1028 					.ifdef @new
  1029 					lda <@VarData
  1030 					sta :ztmp
  1031 					lda >@VarData
  1032 					ldy #@VarDataSize-1
  1033 					jmp @FreeMem
  1034 					els
  1035 1AB1 60				rts						; ret
  1036 					eif
  1037 				.endl
  1038
  1039 1AB2			.local	JGPINIT						; PROCEDURE
  1040
  1041 				; optimize OK (JGP2), line = 112
  1042
  1043 1AB2 AD 2B A2			lda DLISTADDRESS
  1044 1AB5 8D 25 A2			sta BUILDDISPLAYLIST.DLISTADDRESS
  1045 1AB8 AD 2C A2			lda DLISTADDRESS+1
  1046 1ABB 8D 26 A2			sta BUILDDISPLAYLIST.DLISTADDRESS+1
  1047 1ABE AD 2D A2			lda VRAMADDRESS
  1048 1AC1 8D 27 A2			sta BUILDDISPLAYLIST.VRAMADDRESS
  1049 1AC4 AD 2E A2			lda VRAMADDRESS+1
  1050 1AC7 8D 28 A2			sta BUILDDISPLAYLIST.VRAMADDRESS+1
  1051 1ACA AD 2F A2			lda LINES
  1052 1ACD 8D 29 A2			sta BUILDDISPLAYLIST.LINES
  1053 1AD0 AD 30 A2			lda BLANKS
  1054 1AD3 8D 2A A2			sta BUILDDISPLAYLIST.BLANKS
  1055 1AD6 20 55 1A			jsr BUILDDISPLAYLIST
  1056
  1057 				; optimize OK (JGP2), line = 113
  1058
  1059 1AD9 AD 2B A2			lda DLISTADDRESS
  1060 1ADC 8D 30 02			sta ATARI.SDLSTL
  1061 1ADF AD 2C A2			lda DLISTADDRESS+1
  1062 1AE2 8D 31 02			sta ATARI.SDLSTL+1
  1063
  1064 				; optimize OK (JGP2), line = 114
  1065
  1066 1AE5 AD 2D A2			lda VRAMADDRESS
  1067 1AE8 85 58			sta ATARI.SAVMSC
  1068 1AEA AD 2E A2			lda VRAMADDRESS+1
  1069 1AED 85 59			sta ATARI.SAVMSC+1
  1070
  1071 				; optimize OK (JGP2), line = 115
  1072
  1073 1AEF A9 ED 8D 00 02		mva <JGPDLI VDSLST
  1074 1AF4 A9 19 8D 01 02		mva >JGPDLI VDSLST+1
  1075
  1076 				; optimize OK (JGP2), line = 116
  1077
  1078 1AF9 A9 C0			lda #$C0
  1079 1AFB 8D 0E D4			sta ATARI.NMIEN
  1080
  1081 				; ------------------------------------------------------------
  1082
  1083 = A22B			DLISTADDRESS	= DATAORIGIN+$0048
  1084 = A22D			VRAMADDRESS	= DATAORIGIN+$004A
  1085 = A22F			LINES	= DATAORIGIN+$004C
  1086 = A230			BLANKS	= DATAORIGIN+$004D
  1087
  1088 = A22B			@VarData	= DLISTADDRESS
  1089 = 0006			@VarDataSize	= 6
  1090
  1091 1AFE			@exit
  1092 					.ifdef @new
  1093 					lda <@VarData
  1094 					sta :ztmp
  1095 					lda >@VarData
  1096 					ldy #@VarDataSize-1
  1097 					jmp @FreeMem
  1098 					els
  1099 1AFE 60				rts						; ret
  1100 					eif
  1101 				.endl
  1102
  1103 				; ------------------------------------------------------------
  1104
  1105 = 0070			DL_BLANK8	= $70
  1106 = 0080			DL_DLI	= $80
  1107 = 0040			DL_LMS	= $40
  1108 = 0020			DL_VSCROLL	= $20
  1109 = 0010			DL_HSCROLL	= $10
  1110 = 0004			DL_MODE	= $04
  1111 = 0041			DL_JVB	= $41
  1112 = A21C			DLIST	= DATAORIGIN+$0039
  1113
  1114 				.endl							; UNIT JGP2
  1115
  1116 				; ------------------------------------------------------------
  1117
  1118 1AFF			.local	JOYSTICK					; UNIT
  1119
  1120 1AFF			.local	PADDLE0						; FUNCTION | ASSEMBLER
  1121
  1122 				; -------------------  ASM Block 00000090  -------------------
  1123
  1124 1AFF AC 00 D2			ldy pot0
  1125
  1126 1B02 AD 08 D2			lda allpot
  1127 1B05 29 01			and #1
  1128 1B07 D0 01			sne
  1129
  1130 1B09 2C				dta $2c		; bit*
  1131 1B0A A0 01			ldy #1
  1132 1B0C 8C 31 A2			sty Result
  1133
  1134 1B0F 8D 0B D2			sta potgo
  1135
  1136 1B12			@exit
  1137
  1138 				; ------------------------------------------------------------
  1139
  1140 = A231			RESULT	= DATAORIGIN+$004E
  1141 1B12 60				rts						; ret
  1142 				.endl
  1143
  1144 1B13			.local	FIRE2						; FUNCTION
  1145
  1146 1B13 20 FF 1A			jsr PADDLE0
  1147
  1148 				; -------------------  ASM Block 00000091  -------------------
  1149
  1150 1B16 C0 E4			cpy #$e4
  1151 1B18 F0 0B			beq pressed
  1152
  1153 1B1A A9 00			lda exists: #$00
  1154 1B1C 09 02			ora #$02
  1155 1B1E 8D 1B 1B			sta exists
  1156
  1157 1B21 A9 00			lda #0
  1158 1B23 F0 15			beq setvol
  1159 1B25			pressed
  1160 1B25 AD 1B 1B			lda exists
  1161 1B28 29 02			and #$02
  1162 1B2A F0 11			beq next
  1163
  1164 1B2C A9 00			lda vol_b1: #$00
  1165 1B2E D0 04			bne decay
  1166 1B30 A9 8F			lda #$8f
  1167 1B32 D0 06			bne setvol
  1168 1B34			decay
  1169 1B34 C9 0F			cmp #$f
  1170 1B36 90 05			bcc next
  1171 1B38 E9 01			sbc #1
  1172 1B3A			setvol
  1173 1B3A 8D 2D 1B			sta vol_b1
  1174 1B3D			next
  1175 1B3D AD 2D 1B			lda vol_b1
  1176 1B40 8D 32 A2			sta Result
  1177 				 
  1178 1B43			@exit
  1179
  1180 				; ------------------------------------------------------------
  1181
  1182 = A232			RESULT	= DATAORIGIN+$004F
  1183 1B43 60				rts						; ret
  1184 				.endl
  1185
  1186 				; ------------------------------------------------------------
  1187
  1188 = 000F			JOY_NONE	= $0F
  1189 = 000E			JOY_UP	= $0E
  1190 = 000D			JOY_DOWN	= $0D
  1191 = 000B			JOY_LEFT	= $0B
  1192 = 000A			JOY_LEFT_UP	= $0A
  1193 = 0009			JOY_LEFT_DOWN	= $09
  1194 = 0007			JOY_RIGHT	= $07
  1195 = 0006			JOY_RIGHT_UP	= $06
  1196 = 0005			JOY_RIGHT_DOWN	= $05
  1197 = 0278			JOY_1	= $0278
  1198 = 0279			JOY_2	= $0279
  1199 = 0278			adr.STICK	= $0278
  1200 1B44			.var STICK	= adr.STICK .word
  1201 = 0278			STICK0	= $0278
  1202 = 0279			STICK1	= $0279
  1203 = 0284			adr.STRIG	= $0284
  1204 1B44			.var STRIG	= adr.STRIG .word
  1205 = 0284			STRIG0	= $0284
  1206 = 0285			STRIG1	= $0285
  1207 = 0270			adr.PADDL	= $0270
  1208 1B44			.var PADDL	= adr.PADDL .word
  1209 = 0270			PADDL0	= $0270
  1210 = 0271			PADDL1	= $0271
  1211 = 0272			PADDL2	= $0272
  1212 = 0273			PADDL3	= $0273
  1213 = 0274			PADDL4	= $0274
  1214 = 0275			PADDL5	= $0275
  1215 = 0276			PADDL6	= $0276
  1216 = 0277			PADDL7	= $0277
  1217 = 027C			adr.PTRIG	= $027C
  1218 1B44			.var PTRIG	= adr.PTRIG .word
  1219 = 027C			PTRIG0	= $027C
  1220 = 027D			PTRIG1	= $027D
  1221 = 027E			PTRIG2	= $027E
  1222 = 027F			PTRIG3	= $027F
  1223 = 0280			PTRIG4	= $0280
  1224 = 0281			PTRIG5	= $0281
  1225 = 0282			PTRIG6	= $0282
  1226 = 0283			PTRIG7	= $0283
  1227 = D010			TRIG0	= $D010
  1228 = D011			TRIG1	= $D011
  1229 = D200			POT0	= $D200
  1230 = D208			ALLPOT	= $D208
  1231 = D20B			POTGO	= $D20B
  1232
  1233 = 1B44 78 02		STICK
  1233 = 1B46 84 02		STRIG
  1233 = 1B48 70 02		PADDL
  1233 = 1B4A 7C 02		PTRIG
  1233 				.endl							; UNIT JOYSTICK
  1234
  1235 				; ------------------------------------------------------------
  1236
  1237 1B4C			.local	TYPES						; UNIT
  1238
  1239 				; ------------------------------------------------------------
  1240
  1241 				.endl							; UNIT TYPES
  1242
  1243 				; ------------------------------------------------------------
  1244
  1245 1B4C			.local	GRAPH						; UNIT
  1246
  1247 				; ------------------------------------------------------------
  1248
  1249 = 0080			CURRENTDRIVER	= $80
  1250 = 0000			DETECT	= $00
  1251 = 0001			CGA	= $01
  1252 = 0002			MCGA	= $02
  1253 = 0003			EGA	= $03
  1254 = 0004			EGA64	= $04
  1255 = 0005			EGAMONO	= $05
  1256 = 0006			LOWRES	= $06
  1257 = 0007			HERCMONO	= $07
  1258 = 0009			VGA	= $09
  1259 = 000A			VESA	= $0A
  1260 = 000B			D1BIT	= $0B
  1261 = 000C			D2BIT	= $0C
  1262 = 000D			D4BIT	= $0D
  1263 = 000E			D6BIT	= $0E
  1264 = 000F			D8BIT	= $0F
  1265 = 0010			D12BIT	= $10
  1266 = 0018			M640X400	= $18
  1267 = 0018			M640X480	= $18
  1268 = 0001			GROK	= $01
  1269 = 00FF			GRNOINITGRAPH	= $FF
  1270 = 00FE			GRNOTDETECTED	= $FE
  1271 = 00FD			GRFILENOTFOUND	= $FD
  1272 = 00FC			GRINVALIDDRIVER	= $FC
  1273 = 00FB			GRNOLOADMEM	= $FB
  1274 = 00FA			GRNOSCANMEM	= $FA
  1275 = 00F9			GRNOFLOODMEM	= $F9
  1276 = 00F8			GRFONTNOTFOUND	= $F8
  1277 = 00F7			GRNOFONTMEM	= $F7
  1278 = 00F6			GRINVALIDMODE	= $F6
  1279 = 00F5			GRERROR	= $F5
  1280 = 00F4			GRIOERROR	= $F4
  1281 = 00F3			GRINVALIDFONT	= $F3
  1282 = 00F2			GRINVALIDFONTNUM	= $F2
  1283 = 00EE			GRINVALIDVERSION	= $EE
  1284 = 0000			CGAC0	= $00
  1285 = 0001			CGAC1	= $01
  1286 = 0002			CGAC2	= $02
  1287 = 0003			CGAC3	= $03
  1288 = 0004			CGAHI	= $04
  1289 = 0000			MCGAC0	= $00
  1290 = 0001			MCGAC1	= $01
  1291 = 0002			MCGAC2	= $02
  1292 = 0003			MCGAC3	= $03
  1293 = 0004			MCGAMED	= $04
  1294 = 0005			MCGAHI	= $05
  1295 = 0000			EGALO	= $00
  1296 = 0001			EGAHI	= $01
  1297 = 0000			EGA64LO	= $00
  1298 = 0001			EGA64HI	= $01
  1299 = 0003			EGAMONOHI	= $03
  1300 = 000A			VGALO	= $0A
  1301 = 001F			VGAMED	= $1F
  1302 = 0018			VGAHI	= $18
  1303 = A233			WIN_LEFT	= DATAORIGIN+$0050
  1304 = A235			WIN_RIGHT	= DATAORIGIN+$0052
  1305 = A237			WIN_TOP	= DATAORIGIN+$0054
  1306 = A239			WIN_BOTTOM	= DATAORIGIN+$0056
  1307 = A23B			GRAPHRESULT	= DATAORIGIN+$0058
  1308 = A23C			GETCOLOR	= DATAORIGIN+$0059
  1309 = A23D			VIDEORAM	= DATAORIGIN+$005A
  1310 = A23F			adr.LASTARCCOORDS	= DATAORIGIN+$005C	; [12] RECORD
  1311 1B4C			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1312 = A23F			LASTARCCOORDS.X	= DATAORIGIN+$005C
  1313 = A241			LASTARCCOORDS.Y	= DATAORIGIN+$005E
  1314 = A243			LASTARCCOORDS.XSTART	= DATAORIGIN+$0060
  1315 = A245			LASTARCCOORDS.YSTART	= DATAORIGIN+$0062
  1316 = A247			LASTARCCOORDS.XEND	= DATAORIGIN+$0064
  1317 = A249			LASTARCCOORDS.YEND	= DATAORIGIN+$0066
  1318 = A24B			SCANLINE_WIDTH	= DATAORIGIN+$0068
  1319 = A24C			CURRENTX	= DATAORIGIN+$0069
  1320 = A24E			CURRENTY	= DATAORIGIN+$006B
  1321
  1322 = 1B4C 3F A2		LASTARCCOORDS
  1322 				.endl							; UNIT GRAPH
  1323
  1324 				; ------------------------------------------------------------
  1325
  1326 1B4E			.local	ZX5						; UNIT
  1327
  1328 1B4E			.local	UNZX5_02A4					; PROCEDURE | ASSEMBLER | OVERLOAD
  1329
  1330 				; -------------------  ASM Block 00000119  -------------------
  1331
  1332 = 0084			ZX5_OUTPUT      equ :EAX+0
  1333 = 0086			copysrc         equ :EAX+2
  1334 = 0088			offset          equ :EAX+4
  1335 = 008A			offset2         equ :EAX+6
  1336 = 008C			offset3         equ :EAX+8
  1337 = 008E			len             equ :EAX+$A
  1338 = 0090			pnb             equ :EAX+$C
  1339
  1340 1B4E 8E 70 1C		unZX5		stx @sp
  1341
  1342 1B51 AD 50 A2 8D 64 1C + 		mwa inputPointer ZX5_INPUT
  1343 1B5D AD 52 A2 85 84 AD + 		mwa outputPointer ZX5_OUTPUT
  1344
  1345 1B67 A9 FF				lda   #$ff
  1346 1B69 85 88				sta   offset
  1347 1B6B 85 89				sta   offset+1
  1348 1B6D A0 00				ldy   #$00
  1349 1B6F 84 8E				sty   len
  1350 1B71 84 8F				sty   len+1
  1351 1B73 A9 80				lda   #$80
  1352
  1353 1B75			dzx5s_literals
  1354 1B75 20 4E 1C				jsr   dzx5s_elias
  1355 1B78 48					pha
  1356 1B79 20 63 1C		cop0		jsr   _GET_BYTE
  1357 1B7C A0 00				ldy   #$00
  1358 1B7E 91 84				sta   (ZX5_OUTPUT),y
  1359 1B80 E6 84 D0 02 E6 85			inw   ZX5_OUTPUT
  1360 1B86 A5 8E				lda   len
  1361 1B88 D0 02				bne   @+
  1362 1B8A C6 8F				dec   len+1
  1363 1B8C C6 8E		@		dec   len
  1364 1B8E D0 E9				bne   cop0
  1365 1B90 A5 8F				lda   len+1
  1366 1B92 D0 E5				bne   cop0
  1367 1B94 68					pla
  1368 1B95 0A					asl   @
  1369 1B96 B0 43				bcs   dzx5s_other_offset
  1370
  1371 1B98			dzx5s_last_offset
  1372 1B98 20 4E 1C				jsr   dzx5s_elias
  1373 1B9B 48			dzx5s_copy	pha
  1374 1B9C A5 84				lda   ZX5_OUTPUT
  1375 1B9E 18					clc
  1376 1B9F 65 88				adc   offset
  1377 1BA1 85 86				sta   copysrc
  1378 1BA3 A5 85				lda   ZX5_OUTPUT+1
  1379 1BA5 65 89				adc   offset+1
  1380 1BA7 85 87				sta   copysrc+1
  1381 1BA9 A0 00				ldy   #$00
  1382 1BAB A6 8F				ldx   len+1
  1383 1BAD F0 0E				beq   Remainder
  1384 1BAF B1 86		Page		lda   (copysrc),y
  1385 1BB1 91 84				sta   (ZX5_OUTPUT),y
  1386 1BB3 C8					iny
  1387 1BB4 D0 F9				bne   Page
  1388 1BB6 E6 87				inc   copysrc+1
  1389 1BB8 E6 85				inc   ZX5_OUTPUT+1
  1390 1BBA CA					dex
  1391 1BBB D0 F2				bne   Page
  1392 1BBD A6 8E		Remainder	ldx   len
  1393 1BBF F0 12				beq   copyDone
  1394 1BC1 B1 86		copyByte	lda   (copysrc),y
  1395 1BC3 91 84				sta   (ZX5_OUTPUT),y
  1396 1BC5 C8					iny
  1397 1BC6 CA					dex
  1398 1BC7 D0 F8				bne   copyByte
  1399 1BC9 98					tya
  1400 1BCA 18					clc
  1401 1BCB 65 84				adc   ZX5_OUTPUT
  1402 1BCD 85 84				sta   ZX5_OUTPUT
  1403 1BCF 90 02				bcc   copyDone
  1404 1BD1 E6 85				inc   ZX5_OUTPUT+1
  1405 1BD3 86 8F		copyDone	stx   len+1
  1406 1BD5 86 8E				stx   len
  1407 1BD7 68					pla
  1408 1BD8 0A					asl   @
  1409 1BD9 90 9A				bcc   dzx5s_literals
  1410
  1411 1BDB			dzx5s_other_offset
  1412 1BDB 0A					asl   @
  1413 1BDC D0 05				bne   dzx5s_other_offset_skip
  1414 1BDE 20 63 1C				jsr   _GET_BYTE
  1415 1BE1 38					sec	; można usunąć jeśli dekompresja z pamięci a nie pliku
  1416 1BE2 2A					rol   @
  1417 1BE3			dzx5s_other_offset_skip
  1418 1BE3 90 43				bcc   dzx5s_prev_offset
  1419
  1420 1BE5			dzx5s_new_offset
  1421 1BE5 85 90				sta   pnb
  1422 1BE7 0A					asl   @
  1423 1BE8 A6 8A				ldx   offset2
  1424 1BEA 86 8C				stx   offset3
  1425 1BEC A6 8B				ldx   offset2+1
  1426 1BEE 86 8D				stx   offset3+1
  1427 1BF0 A6 88				ldx   offset
  1428 1BF2 86 8A				stx   offset2
  1429 1BF4 A6 89				ldx   offset+1
  1430 1BF6 86 8B				stx   offset2+1
  1431 1BF8 A2 FE				ldx   #$fe
  1432 1BFA 86 8E				stx   len
  1433 1BFC 20 50 1C				jsr   dzx5s_elias_loop
  1434 1BFF 48					pha
  1435 1C00 A6 8E				ldx   len
  1436 1C02 E8					inx
  1437 1C03 86 89				stx   offset+1
  1438 1C05 D0 04				bne   @+
  1439 1C07 68					pla
  1440
  1441 1C08 4C 6F 1C				jmp to_exit	; koniec
  1442
  1443 1C0B 20 63 1C		@		jsr   _GET_BYTE
  1444 1C0E 85 88				sta   offset
  1445 1C10 A2 00				ldx   #$00
  1446 1C12 86 8F				stx   len+1
  1447 1C14 E8					inx
  1448 1C15 86 8E				stx   len
  1449 1C17 68					pla
  1450 1C18 C6 90				dec   pnb
  1451 1C1A 30 03				bmi   @+
  1452 1C1C 20 5B 1C				jsr   dzx5s_elias_backtrack
  1453 1C1F E6 8E D0 02 E6 8F	@		inw   len
  1454 1C25 4C 9B 1B				jmp   dzx5s_copy
  1455
  1456 1C28			dzx5s_prev_offset
  1457 1C28 0A					asl   @
  1458 1C29 90 10				bcc   dzx5s_second_offset
  1459 1C2B A4 8A				ldy   offset2
  1460 1C2D A6 8C				ldx   offset3
  1461 1C2F 84 8C				sty   offset3
  1462 1C31 86 8A				stx   offset2
  1463 1C33 A4 8B				ldy   offset2+1
  1464 1C35 A6 8D				ldx   offset3+1
  1465 1C37 84 8D				sty   offset3+1
  1466 1C39 86 8B				stx   offset2+1
  1467
  1468 1C3B			dzx5s_second_offset
  1469 1C3B A4 8A				ldy   offset2
  1470 1C3D A6 88				ldx   offset
  1471 1C3F 84 88				sty   offset
  1472 1C41 86 8A				stx   offset2
  1473 1C43 A4 8B				ldy   offset2+1
  1474 1C45 A6 89				ldx   offset+1
  1475 1C47 84 89				sty   offset+1
  1476 1C49 86 8B				stx   offset2+1
  1477 1C4B 4C 98 1B				jmp   dzx5s_last_offset
  1478
  1479 1C4E E6 8E		dzx5s_elias	inc   len
  1480 1C50			dzx5s_elias_loop
  1481 1C50 0A					asl   @
  1482 1C51 D0 05				bne   dzx5s_elias_skip
  1483 1C53 20 63 1C				jsr   _GET_BYTE
  1484 1C56 38					sec	; można usunąć jeśli dekompresja z pamięci a nie pliku
  1485 1C57 2A					rol   @
  1486 1C58			dzx5s_elias_skip
  1487 1C58 90 01				bcc   dzx5s_elias_backtrack
  1488 1C5A 60					rts
  1489
  1490 1C5B			dzx5s_elias_backtrack
  1491 1C5B 0A					asl   @
  1492 1C5C 26 8E				rol   len
  1493 1C5E 26 8F				rol   len+1
  1494 1C60 4C 50 1C				jmp   dzx5s_elias_loop
  1495
  1496 1C63 AD FF FF		_GET_BYTE	lda    $ffff
  1497 = 1C64			ZX5_INPUT	equ    *-2
  1498 1C66 EE 64 1C D0 03 EE + 		inw    ZX5_INPUT
  1499 1C6E 60					rts
  1500
  1501 1C6F A2 00		to_exit		ldx #0
  1502 = 1C70			@sp		equ *-1
  1503
  1504 				; ------------------------------------------------------------
  1505
  1506 = A250			INPUTPOINTER	= DATAORIGIN+$006D
  1507 = A252			OUTPUTPOINTER	= DATAORIGIN+$006F
  1508
  1509 = A250			@VarData	= INPUTPOINTER
  1510 = 0004			@VarDataSize	= 4
  1511
  1512 1C71			@exit
  1513 					.ifdef @new
  1514 					lda <@VarData
  1515 					sta :ztmp
  1516 					lda >@VarData
  1517 					ldy #@VarDataSize-1
  1518 					jmp @FreeMem
  1519 					els
  1520 1C71 60				rts						; ret
  1521 					eif
  1522 				.endl
  1523
  1524 				; ------------------------------------------------------------
  1525
  1526 				.endl							; UNIT ZX5
  1527
  1528 				; ------------------------------------------------------------
  1529
  1530 1C72			.local	MISC						; UNIT
  1531
  1532 1C72			.local	DETECTANTIC					; FUNCTION | ASSEMBLER
  1533
  1534 				; -------------------  ASM Block 00000120  -------------------
  1535
  1536
  1537 				// ANTIC PAL Test for Atari 8-bits
  1538 				// (C) 2019 Guillermo Fuenzalida
  1539
  1540 1C72			antic_loop1
  1541 1C72 AD 0B D4			lda vcount
  1542 1C75 C9 64			cmp #100
  1543 1C77 90 F9			bcc antic_loop1		// wait till scanline 200
  1544 1C79 8D 90 1C			sta scanline
  1545 1C7C			antic_loop2
  1546 1C7C AD 0B D4			lda vcount
  1547 1C7F C9 0A			cmp #10
  1548 1C81 30 0A			bmi antic_loop2_fin
  1549 1C83 CD 90 1C			cmp scanline
  1550 1C86 30 F4			bmi antic_loop2
  1551 1C88 8D 90 1C			sta scanline
  1552 1C8B 10 EF			bpl antic_loop2
  1553
  1554 1C8D			antic_loop2_fin
  1555 1C8D A0 00			ldy #$00
  1556 1C8F A9 00			lda #0
  1557 = 1C90			scanline equ *-1
  1558 1C91 C9 87			cmp #135
  1559 1C93 30 01			bmi ntsc
  1560 1C95 C8				iny
  1561 1C96			ntsc
  1562 1C96 8C 54 A2			sty Result
  1563
  1564
  1565 1C99			@exit
  1566
  1567 				; ------------------------------------------------------------
  1568
  1569 = A254			RESULT	= DATAORIGIN+$0071
  1570 1C99 60				rts						; ret
  1571 				.endl
  1572
  1573 1C9A			.local	DETECTSTEREO					; FUNCTION | ASSEMBLER
  1574
  1575 				; -------------------  ASM Block 00000124  -------------------
  1576
  1577 1C9A 8A 48			txa:pha
  1578
  1579 1C9C A2 00			ldx #$00
  1580 1C9E 8E 0F D2			stx $d20f	;halt pokey 0
  1581 1CA1 8E 1F D2			stx $d21f	;halt pokey 1
  1582 1CA4 A0 03			ldy #$03
  1583 1CA6 8C 1F D2			sty $d21f	;release pokey 1
  1584
  1585 1CA9 8D 0A D4			sta $d40a	;delay necessary for
  1586 1CAC 8D 0A D4			sta $d40a	;accelerator boards
  1587
  1588 1CAF A9 FF			lda #$ff
  1589 1CB1 2D 0A D2		loop	and $d20a	;see if pokey 0 is halted ($d20a = $ff)
  1590 1CB4 E8				inx
  1591 1CB5 D0 FA			bne loop
  1592
  1593 1CB7 8C 0F D2			sty $d20f
  1594
  1595 1CBA C9 FF			cmp #$ff
  1596 1CBC D0 01			bne mono
  1597
  1598 1CBE E8				inx
  1599 1CBF			mono
  1600 1CBF 8E 55 A2			stx Result
  1601
  1602 1CC2 68 AA			pla:tax
  1603
  1604 1CC4			@exit
  1605
  1606 				; ------------------------------------------------------------
  1607
  1608 = A255			RESULT	= DATAORIGIN+$0072
  1609 1CC4 60				rts						; ret
  1610 				.endl
  1611
  1612 1CC5			.local	DETECTCPU					; FUNCTION | ASSEMBLER
  1613
  1614 				; -------------------  ASM Block 00000125  -------------------
  1615
  1616 1CC5 8A 48			txa:pha
  1617
  1618 					opt c+
  1619
  1620 				;detekcja zainstalowanego procesora
  1621 1CC7 A9 99			lda #$99
  1622 1CC9 18				clc
  1623 1CCA F8				sed
  1624 1CCB 69 01			adc #$01
  1625 1CCD D8				cld
  1626 1CCE F0 05			beq DetectCPU_CMOS
  1627
  1628 1CD0			DetectCPU_02
  1629 1CD0 A9 00			lda #0
  1630 1CD2 4C E2 1C			jmp stop
  1631
  1632 1CD5			DetectCPU_CMOS
  1633 1CD5 A9 00			lda #0
  1634 1CD7 C2 02			rep #%00000010		;wyzerowanie bitu Z
  1635 1CD9 D0 05			bne DetectCPU_C816
  1636
  1637 1CDB			DetectCPU_C02
  1638 1CDB A9 01			lda #1
  1639 1CDD 4C E2 1C			jmp stop
  1640
  1641 1CE0			DetectCPU_C816
  1642 1CE0 A9 80			lda #$80
  1643
  1644 1CE2 8D 56 A2		stop	sta Result
  1645
  1646 					opt c-
  1647
  1648 1CE5 68 AA			pla:tax
  1649
  1650
  1651 1CE7			@exit
  1652
  1653 				; ------------------------------------------------------------
  1654
  1655 = A256			RESULT	= DATAORIGIN+$0073
  1656 1CE7 60				rts						; ret
  1657 				.endl
  1658
  1659 				; ------------------------------------------------------------
  1660
  1661 = 0101			adr.BANKS	= $0101
  1662 1CE8			.var BANKS	= adr.BANKS .word
  1663 = FFF7			DETECTOS	= $FFF7
  1664
  1665 = 1CE8 01 01		BANKS
  1665 				.endl							; UNIT MISC
  1666
  1667 				; ------------------------------------------------------------
  1668
  1669 1CEA			.local	SYSREQ						; UNIT
  1670
  1671 				; ------------------------------------------------------------
  1672 				; ------------------------------------------------------------
  1673 1CEA			@UnitInit
  1674
  1675 				; optimize OK (SYSREQ), line = 15
  1676
  1677 1CEA A9 00			lda #$00
  1678 1CEC 8D 57 A2			sta YES
  1679
  1680 				; optimize FAIL ('MISC.DETECTANTIC', SYSREQ), line = 17
  1681
  1682 1CEF 20 72 1C			jsr MISC.DETECTANTIC
  1683 1CF2 AD 54 A2			lda MISC.DETECTANTIC.RESULT
  1684 1CF5 D0 0F			jne l_02BA
  1685 					@printSTRING #CODEORIGIN+$000D
  1685 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
  1685 1CF7 A0 09		 LDY> CODEORIGIN+$000D
  1685 1CF9 A9 8D		 LDA< CODEORIGIN+$000D
  1685 1CFB 20 E7 17		 JSR @PRINTSTRING
  1686 1CFE 20 D9 17			@printEOL
  1687 1D01 A9 01			lda #$01
  1688 1D03 8D 57 A2			sta YES
  1689 1D06			l_02BA
  1690
  1691 				; optimize FAIL ('MISC.DETECTCPU', SYSREQ), line = 18
  1692
  1693 1D06 20 C5 1C			jsr MISC.DETECTCPU
  1694 1D09 AD 56 A2			lda MISC.DETECTCPU.RESULT
  1695 1D0C 10 0F			jpl l_02D1
  1696 					@printSTRING #CODEORIGIN+$0024
  1696 				 LDY> CODEORIGIN+$0024\ LDA< CODEORIGIN+$0024\ JSR @PRINTSTRING
  1696 1D0E A0 09		 LDY> CODEORIGIN+$0024
  1696 1D10 A9 A4		 LDA< CODEORIGIN+$0024
  1696 1D12 20 E7 17		 JSR @PRINTSTRING
  1697 1D15 20 D9 17			@printEOL
  1698 1D18 A9 01			lda #$01
  1699 1D1A 8D 57 A2			sta YES
  1700 1D1D			l_02D1
  1701
  1702 				; optimize FAIL ('MISC.DETECTSTEREO', SYSREQ), line = 19
  1703
  1704 1D1D 20 9A 1C			jsr MISC.DETECTSTEREO
  1705 1D20 AD 55 A2			lda MISC.DETECTSTEREO.RESULT
  1706 1D23 D0 0F			jne l_02E5
  1707 					@printSTRING #CODEORIGIN+$003B
  1707 				 LDY> CODEORIGIN+$003B\ LDA< CODEORIGIN+$003B\ JSR @PRINTSTRING
  1707 1D25 A0 09		 LDY> CODEORIGIN+$003B
  1707 1D27 A9 BB		 LDA< CODEORIGIN+$003B
  1707 1D29 20 E7 17		 JSR @PRINTSTRING
  1708 1D2C 20 D9 17			@printEOL
  1709 1D2F A9 01			lda #$01
  1710 1D31 8D 57 A2			sta YES
  1711 1D34			l_02E5
  1712
  1713 				; optimize OK (SYSREQ), line = 20
  1714
  1715 1D34			?volatile:
  1716 1D34 AD 13 D0			lda ATARI.TRIG3
  1717 1D37 F0 0F			jeq l_02FE
  1718 					@printSTRING #CODEORIGIN+$0056
  1718 				 LDY> CODEORIGIN+$0056\ LDA< CODEORIGIN+$0056\ JSR @PRINTSTRING
  1718 1D39 A0 09		 LDY> CODEORIGIN+$0056
  1718 1D3B A9 D6		 LDA< CODEORIGIN+$0056
  1718 1D3D 20 E7 17		 JSR @PRINTSTRING
  1719 1D40 20 D9 17			@printEOL
  1720 1D43 A9 01			lda #$01
  1721 1D45 8D 57 A2			sta YES
  1722 1D48			l_02FE
  1723
  1724 				; optimize OK (SYSREQ), line = 22
  1725
  1726 1D48 AD 57 A2			lda YES
  1727 1D4B F0 1A			jeq l_0311
  1728
  1729 				; optimize FAIL ('@print', SYSREQ), line = 24
  1730
  1731 1D4D 20 D9 17			@printEOL
  1732
  1733 				; optimize FAIL ('@print', SYSREQ), line = 26
  1734
  1735 					@printSTRING #CODEORIGIN+$006D
  1735 				 LDY> CODEORIGIN+$006D\ LDA< CODEORIGIN+$006D\ JSR @PRINTSTRING
  1735 1D50 A0 09		 LDY> CODEORIGIN+$006D
  1735 1D52 A9 ED		 LDA< CODEORIGIN+$006D
  1735 1D54 20 E7 17		 JSR @PRINTSTRING
  1736 1D57 20 D9 17			@printEOL
  1737
  1738 				; --- RepeatUntilProlog
  1739 1D5A			l_0313
  1740
  1741 				; optimize FAIL ('CRT.KEYPRESSED', SYSREQ), line = 28
  1742
  1743 1D5A 20 99 19			jsr CRT.KEYPRESSED
  1744 1D5D AD F9 A1			lda CRT.KEYPRESSED.RESULT
  1745 1D60 F0 F8			jeq l_0313
  1746 1D62 A9 00			lda #$00
  1747 1D64 4C C7 40			jmp @halt
  1748 1D67			l_0311
  1749
  1750 1D67 60				rts
  1751
  1752 				; ------------------------------------------------------------
  1753
  1754 = A257			YES	= DATAORIGIN+$0074
  1755
  1756 				.endl							; UNIT SYSREQ
  1757
  1758 				; ------------------------------------------------------------
  1759
  1760 1D68			.local	SAPLZSS						; UNIT
  1761
  1762 1D68			.local	TLZSSPLAY.INIT					; PROCEDURE | ASSEMBLER
  1763 1D68 8D 58 A2			sta TLZSSPLAY
  1764 1D6B 8C 59 A2			sty TLZSSPLAY+1
  1765 1D6E 8D 5B A2			sta JMP
  1766 1D71 8C 5C A2			sty JMP+1
  1767 1D74 18 69 01			add #1
  1768 1D77 90 01			scc
  1769 1D79 C8				iny
  1770 1D7A 8D 5D A2			sta PLAYER
  1771 1D7D 8C 5E A2			sty PLAYER+1
  1772 1D80 18 69 02			add #2
  1773 1D83 90 01			scc
  1774 1D85 C8				iny
  1775 1D86 8D 5F A2			sta MODUL
  1776 1D89 8C 60 A2			sty MODUL+1
  1777
  1778 				; -------------------  ASM Block 00000130  -------------------
  1779
  1780 1D8C 8A 48			txa:pha
  1781
  1782 1D8E AD 58 A2 85 82 AD + 	mwa TLZSSPlay :bp2
  1783
  1784 1D98 A0 00			ldy #0
  1785 1D9A A9 4C			lda #$4c	; JMP
  1786 1D9C 91 82			sta (:bp2),y
  1787
  1788 1D9E C8				iny
  1789 1D9F B1 82			lda (:bp2),y
  1790 1DA1 18 69 06			add #6		; jsr player+6
  1791 1DA4 8D BB 1D			sta adr
  1792 1DA7 C8				iny
  1793 1DA8 B1 82			lda (:bp2),y
  1794 1DAA 69 00			adc #0
  1795 1DAC 8D BC 1D			sta adr+1
  1796
  1797 1DAF A0 04			ldy #4
  1798 1DB1 B1 82			lda (:bp2),y
  1799 1DB3 AA				tax		; hi byte of MPT module to Y reg
  1800 1DB4 88				dey
  1801 1DB5 B1 82			lda (:bp2),y	; low byte of MPT module to X reg
  1802
  1803 1DB7 AC 5A A2			ldy a		; POKEY: $00 | $10 | ...
  1804
  1805 1DBA 20 FF FF			jsr $ffff
  1806 = 1DBB			adr	equ *-2
  1807
  1808 1DBD 68 AA			pla:tax
  1809
  1810 				; ------------------------------------------------------------
  1811
  1812 = A258			TLZSSPLAY	= DATAORIGIN+$0075
  1813 = A25A			A	= DATAORIGIN+$0077
  1814 = A25B			JMP	= DATAORIGIN+$0078
  1815 = A25D			PLAYER	= DATAORIGIN+$007A
  1816 = A25F			MODUL	= DATAORIGIN+$007C
  1817
  1818 = A258			@VarData	= TLZSSPLAY
  1819 = 0009			@VarDataSize	= 9
  1820
  1821 1DBF			@exit
  1822 					.ifdef @new
  1823 					lda <@VarData
  1824 					sta :ztmp
  1825 					lda >@VarData
  1826 					ldy #@VarDataSize-1
  1827 					jmp @FreeMem
  1828 					els
  1829 1DBF 60				rts						; ret
  1830 					eif
  1831 				.endl
  1832
  1833 1DC0			.local	TLZSSPLAY.DECODE				; FUNCTION | ASSEMBLER
  1834 1DC0 8D 61 A2			sta TLZSSPLAY
  1835 1DC3 8C 62 A2			sty TLZSSPLAY+1
  1836 1DC6 8D 64 A2			sta JMP
  1837 1DC9 8C 65 A2			sty JMP+1
  1838 1DCC 18 69 01			add #1
  1839 1DCF 90 01			scc
  1840 1DD1 C8				iny
  1841 1DD2 8D 66 A2			sta PLAYER
  1842 1DD5 8C 67 A2			sty PLAYER+1
  1843 1DD8 18 69 02			add #2
  1844 1DDB 90 01			scc
  1845 1DDD C8				iny
  1846 1DDE 8D 68 A2			sta MODUL
  1847 1DE1 8C 69 A2			sty MODUL+1
  1848
  1849 				; -------------------  ASM Block 00000131  -------------------
  1850
  1851 1DE4 8A 48			txa:pha
  1852
  1853 1DE6 AD 61 A2 8D F4 1D + 	mwa TLZSSPlay ptr
  1854
  1855 1DF2 18				clc
  1856
  1857 1DF3 20 00 FF			jsr $ff00		; jmp (TLZSSPlay)	6502 buggy indirect jump
  1858 = 1DF4			ptr	equ *-2
  1859
  1860 1DF6 A9 00			lda #0
  1861 1DF8 2A				rol @
  1862 1DF9 8D 63 A2			sta Result		; C = 1	-> 	if TRUE then 'end of song'
  1863
  1864 1DFC 68 AA			pla:tax
  1865
  1866 1DFE			@exit
  1867
  1868 				; ------------------------------------------------------------
  1869
  1870 = A261			TLZSSPLAY	= DATAORIGIN+$007E
  1871 = A263			RESULT	= DATAORIGIN+$0080
  1872 = A264			JMP	= DATAORIGIN+$0081
  1873 = A266			PLAYER	= DATAORIGIN+$0083
  1874 = A268			MODUL	= DATAORIGIN+$0085
  1875
  1876 = A261			@VarData	= TLZSSPLAY
  1877 = 0008			@VarDataSize	= 8
  1878
  1879 1DFE 60				rts						; ret
  1880 				.endl
  1881
  1882 1DFF			.local	TLZSSPLAY.PLAY					; PROCEDURE | ASSEMBLER
  1883 1DFF 8D 6A A2			sta TLZSSPLAY
  1884 1E02 8C 6B A2			sty TLZSSPLAY+1
  1885 1E05 8D 6C A2			sta JMP
  1886 1E08 8C 6D A2			sty JMP+1
  1887 1E0B 18 69 01			add #1
  1888 1E0E 90 01			scc
  1889 1E10 C8				iny
  1890 1E11 8D 6E A2			sta PLAYER
  1891 1E14 8C 6F A2			sty PLAYER+1
  1892 1E17 18 69 02			add #2
  1893 1E1A 90 01			scc
  1894 1E1C C8				iny
  1895 1E1D 8D 70 A2			sta MODUL
  1896 1E20 8C 71 A2			sty MODUL+1
  1897
  1898 				; -------------------  ASM Block 00000132  -------------------
  1899
  1900 1E23 8A 48			txa:pha
  1901
  1902 1E25 AD 6A A2 8D 33 1E + 	mwa TLZSSPlay ptr
  1903
  1904 1E31 38				sec
  1905
  1906 1E32 20 00 FF			jsr $ff00		; jmp (TLZSSPlay)	6502 buggy indirect jump
  1907 = 1E33			ptr	equ *-2
  1908
  1909 1E35 68 AA			pla:tax
  1910
  1911 				; ------------------------------------------------------------
  1912
  1913 = A26A			TLZSSPLAY	= DATAORIGIN+$0087
  1914 = A26C			JMP	= DATAORIGIN+$0089
  1915 = A26E			PLAYER	= DATAORIGIN+$008B
  1916 = A270			MODUL	= DATAORIGIN+$008D
  1917
  1918 = A26A			@VarData	= TLZSSPLAY
  1919 = 0008			@VarDataSize	= 8
  1920
  1921 1E37			@exit
  1922 					.ifdef @new
  1923 					lda <@VarData
  1924 					sta :ztmp
  1925 					lda >@VarData
  1926 					ldy #@VarDataSize-1
  1927 					jmp @FreeMem
  1928 					els
  1929 1E37 60				rts						; ret
  1930 					eif
  1931 				.endl
  1932
  1933 1E38			.local	TLZSSPLAY.STOP					; PROCEDURE | ASSEMBLER
  1934 1E38 8D 72 A2			sta TLZSSPLAY
  1935 1E3B 8C 73 A2			sty TLZSSPLAY+1
  1936 1E3E 8D 75 A2			sta JMP
  1937 1E41 8C 76 A2			sty JMP+1
  1938 1E44 18 69 01			add #1
  1939 1E47 90 01			scc
  1940 1E49 C8				iny
  1941 1E4A 8D 77 A2			sta PLAYER
  1942 1E4D 8C 78 A2			sty PLAYER+1
  1943 1E50 18 69 02			add #2
  1944 1E53 90 01			scc
  1945 1E55 C8				iny
  1946 1E56 8D 79 A2			sta MODUL
  1947 1E59 8C 7A A2			sty MODUL+1
  1948
  1949 				; -------------------  ASM Block 00000133  -------------------
  1950
  1951 1E5C AC 74 A2			ldy a		; POKEY: $00 | $10 | ...
  1952
  1953 1E5F A9 00			lda #0
  1954 1E61 99 08 D2			sta $d208,y
  1955 1E64 A9 03			lda #3
  1956 1E66 99 0F D2			sta $d20f,y
  1957
  1958 1E69 A9 00			lda #0
  1959 1E6B 99 00 D2			sta $d200,y
  1960 1E6E 99 01 D2			sta $d201,y
  1961 1E71 99 02 D2			sta $d202,y
  1962 1E74 99 03 D2			sta $d203,y
  1963 1E77 99 04 D2			sta $d204,y
  1964 1E7A 99 05 D2			sta $d205,y
  1965 1E7D 99 06 D2			sta $d206,y
  1966 1E80 99 07 D2			sta $d207,y
  1967
  1968 				; ------------------------------------------------------------
  1969
  1970 = A272			TLZSSPLAY	= DATAORIGIN+$008F
  1971 = A274			A	= DATAORIGIN+$0091
  1972 = A275			JMP	= DATAORIGIN+$0092
  1973 = A277			PLAYER	= DATAORIGIN+$0094
  1974 = A279			MODUL	= DATAORIGIN+$0096
  1975
  1976 = A272			@VarData	= TLZSSPLAY
  1977 = 0009			@VarDataSize	= 9
  1978
  1979 1E83			@exit
  1980 					.ifdef @new
  1981 					lda <@VarData
  1982 					sta :ztmp
  1983 					lda >@VarData
  1984 					ldy #@VarDataSize-1
  1985 					jmp @FreeMem
  1986 					els
  1987 1E83 60				rts						; ret
  1988 					eif
  1989 				.endl
  1990
  1991 				; ------------------------------------------------------------
  1992 				; ------------------------------------------------------------
  1993 1E84			@UnitInit
  1994
  1995 1E84 60				rts
  1996
  1997 				; ------------------------------------------------------------
  1998
  1999 				.endl							; UNIT SAPLZSS
  2000
  2001 1E85			.local	PRINTTIME					; PROCEDURE
  2002
  2003 1E85 4C 93 1F			jmp l_0323
  2004
  2005 1E88			.local	PRINTDIGITS					; PROCEDURE
  2006
  2007 				; optimize OK (printTime.inc), line = 12
  2008
  2009 1E88 AD D4 A2			lda L
  2010 1E8B F0 18			jeq l_0338
  2011
  2012 				; optimize OK (printTime.inc), line = 13
  2013
  2014 1E8D AC D4 A2			ldy L
  2015 1E90 B9 D5 A2			lda adr.T,y
  2016 1E93 38 E9 2F			sub #$2F
  2017 1E96 0A				asl @
  2018 1E97 0A				asl @
  2019 1E98 0A				asl @
  2020 1E99 18 69 60			add #$60
  2021 1E9C 8D D2 A2			sta A
  2022
  2023 				; optimize FAIL (0, printTime.inc), line = 14
  2024
  2025 1E9F CE D4 A2			dec L
  2026 1EA2 4C AA 1E			jmp l_035B
  2027 1EA5			l_0338
  2028
  2029 				; optimize OK (printTime.inc), line = 16
  2030
  2031 1EA5 A9 60			lda #$60
  2032 1EA7 8D D2 A2			sta A
  2033 1EAA			l_035B
  2034
  2035 				; optimize OK (printTime.inc), line = 18
  2036
  2037 1EAA AD D4 A2			lda L
  2038 1EAD F0 15			jeq l_0371
  2039
  2040 				; optimize OK (printTime.inc), line = 19
  2041
  2042 1EAF AC D4 A2			ldy L
  2043 1EB2 B9 D5 A2			lda adr.T,y
  2044 1EB5 38 E9 2F			sub #$2F
  2045 1EB8 0A				asl @
  2046 1EB9 0A				asl @
  2047 1EBA 0A				asl @
  2048 1EBB 8D D3 A2			sta B
  2049
  2050 				; optimize FAIL (0, printTime.inc), line = 20
  2051
  2052 1EBE CE D4 A2			dec L
  2053 1EC1 4C C9 1E			jmp l_0390
  2054 1EC4			l_0371
  2055
  2056 				; optimize OK (printTime.inc), line = 22
  2057
  2058 1EC4 A9 00			lda #$00
  2059 1EC6 8D D3 A2			sta B
  2060 1EC9			l_0390
  2061
  2062 				; optimize OK (printTime.inc), line = 24
  2063
  2064 1EC9 A9 07			lda #$07
  2065 1ECB 8D D1 A2			sta I
  2066
  2067 1ECE			l_039D
  2068 				; --- ForToDoCondition
  2069 1ECE AD D2 A2			lda A
  2070 1ED1 18 6D D1 A2			add I
  2071 1ED5 A8				tay
  2072 1ED6 B9 B0 0B			lda adr.DIGITH,y
  2073 1ED9 85 9E			sta :STACKORIGIN+10
  2074 1EDB AD D3 A2			lda B
  2075 1EDE 18 6D D1 A2			add I
  2076 1EE2 A8				tay
  2077 1EE3 B9 B0 0B			lda adr.DIGITH,y
  2078 1EE6 05 9E			ora :STACKORIGIN+10
  2079 1EE8 A0 00			ldy #$00
  2080 1EEA 91 E0			sta (P),y
  2081
  2082 				; optimize FAIL (0, printTime.inc), line = 27
  2083
  2084 1EEC A5 E0			lda P
  2085 1EEE D0 02			bne @+
  2086 1EF0 C6 E1			dec P+1
  2087 				@
  2088 1EF2 C6 E0			dec P
  2089
  2090 				; --- ForToDoEpilog
  2091 1EF4 CE D1 A2			dec I
  2092 1EF7 10 D5			jpl l_039D
  2093 1EF9			l_03AB
  2094
  2095 				; ------------------------------------------------------------
  2096
  2097 1EF9			@exit
  2098 					.ifdef @new
  2099 					lda <@VarData
  2100 					sta :ztmp
  2101 					lda >@VarData
  2102 					ldy #@VarDataSize-1
  2103 					jmp @FreeMem
  2104 					els
  2105 1EF9 60				rts						; ret
  2106 					eif
  2107 				.endl
  2108
  2109 1EFA			.local	PRINTDIGITS_HI					; PROCEDURE
  2110
  2111 				; optimize OK (printTime.inc), line = 36
  2112
  2113 1EFA AD D4 A2			lda L
  2114 1EFD F0 19			jeq l_03E9
  2115
  2116 				; optimize OK (printTime.inc), line = 37
  2117
  2118 1EFF AC D4 A2			ldy L
  2119 1F02 B9 D5 A2			lda adr.T,y
  2120 1F05 38 E9 2F			sub #$2F
  2121 1F08 0A				asl @
  2122 1F09 0A				asl @
  2123 1F0A 0A				asl @
  2124 1F0B 18 6D F6 A2			add _ADD
  2125 1F0F 8D D2 A2			sta A
  2126
  2127 				; optimize FAIL (0, printTime.inc), line = 38
  2128
  2129 1F12 CE D4 A2			dec L
  2130 1F15 4C 1E 1F			jmp l_040E
  2131 1F18			l_03E9
  2132
  2133 				; optimize OK (printTime.inc), line = 40
  2134
  2135 1F18 AD F6 A2			lda _ADD
  2136 1F1B 8D D2 A2			sta A
  2137 1F1E			l_040E
  2138
  2139 				; optimize OK (printTime.inc), line = 42
  2140
  2141 1F1E A9 07			lda #$07
  2142 1F20 8D D1 A2			sta I
  2143
  2144 1F23			l_041D
  2145 				; --- ForToDoCondition
  2146 1F23 A0 00			ldy #$00
  2147 1F25 B1 E0			lda (P),y
  2148 1F27 2D F7 A2			and _AND
  2149 1F2A 85 9E			sta :STACKORIGIN+10
  2150 1F2C AD D2 A2			lda A
  2151 1F2F 18 6D D1 A2			add I
  2152 1F33 A8				tay
  2153 1F34 B9 B0 0B			lda adr.DIGITH,y
  2154 1F37 05 9E			ora :STACKORIGIN+10
  2155 1F39 A0 00			ldy #$00
  2156 1F3B 91 E0			sta (P),y
  2157
  2158 				; optimize FAIL (0, printTime.inc), line = 45
  2159
  2160 1F3D A5 E0			lda P
  2161 1F3F D0 02			bne @+
  2162 1F41 C6 E1			dec P+1
  2163 				@
  2164 1F43 C6 E0			dec P
  2165
  2166 				; --- ForToDoEpilog
  2167 1F45 CE D1 A2			dec I
  2168 1F48 10 D9			jpl l_041D
  2169 1F4A			l_042B
  2170
  2171 				; ------------------------------------------------------------
  2172
  2173 = A2F6			_ADD	= DATAORIGIN+$0113
  2174 = A2F7			_AND	= DATAORIGIN+$0114
  2175
  2176 = A2F6			@VarData	= _ADD
  2177 = 0002			@VarDataSize	= 2
  2178
  2179 1F4A			@exit
  2180 					.ifdef @new
  2181 					lda <@VarData
  2182 					sta :ztmp
  2183 					lda >@VarData
  2184 					ldy #@VarDataSize-1
  2185 					jmp @FreeMem
  2186 					els
  2187 1F4A 60				rts						; ret
  2188 					eif
  2189 				.endl
  2190
  2191 1F4B			.local	TOSTRING					; PROCEDURE
  2192 1F4B 8D F8 A2			sta A
  2193
  2194 				; optimize OK (printTime.inc), line = 72
  2195
  2196 1F4E C9 0A			cmp #$0A
  2197 1F50 B0 14			jcs l_0467
  2198
  2199 				; optimize OK (printTime.inc), line = 73
  2200
  2201 1F52 A9 02			lda #$02
  2202 1F54 8D D5 A2			sta adr.T
  2203
  2204 				; optimize OK (printTime.inc), line = 74
  2205
  2206 1F57 A9 30			lda #$30
  2207 1F59 8D D6 A2			sta adr.T+$01
  2208
  2209 				; optimize OK (printTime.inc), line = 75
  2210
  2211 1F5C 18 6D F8 A2			add A
  2212 1F60 8D D7 A2			sta adr.T+$02
  2213 1F63 4C 8D 1F			jmp l_0486
  2214 1F66			l_0467
  2215
  2216 				; optimize OK (printTime.inc), line = 77
  2217
  2218 1F66 AD F8 A2			lda A
  2219 1F69 20 A7 19			jsr SYSUTILS.BYTETOSTR
  2220 1F6C E8				inx
  2221 1F6D AD EB 19			lda SYSUTILS.BYTETOSTR.RESULT
  2222 1F70 85 88			sta @move.src
  2223 1F72 AD EC 19			lda SYSUTILS.BYTETOSTR.RESULT+1
  2224 1F75 85 89			sta @move.src+1
  2225 					@moveSTRING T #33
  2225 				 MWA T @MOVE.DST\ MWA #33 @MOVE.CNT\ JSR @MOVESTRING
  2225 1F77 AD D5 1F 85 8C AD +  MWA T @MOVE.DST
  2225 1F81 A9 21 85 84 A9 00 +  MWA #33 @MOVE.CNT
  2225 1F89 20 30 17		 JSR @MOVESTRING
  2226 1F8C CA				dex
  2227 1F8D			l_0486
  2228
  2229 				; optimize OK (printTime.inc), line = 79
  2230
  2231 1F8D A9 02			lda #$02
  2232 1F8F 8D D4 A2			sta L
  2233
  2234 				; ------------------------------------------------------------
  2235
  2236 = A2F8			A	= DATAORIGIN+$0115
  2237
  2238 = A2F8			@VarData	= A
  2239 = 0001			@VarDataSize	= 1
  2240
  2241 1F92			@exit
  2242 					.ifdef @new
  2243 					lda <@VarData
  2244 					sta :ztmp
  2245 					lda >@VarData
  2246 					ldy #@VarDataSize-1
  2247 					jmp @FreeMem
  2248 					els
  2249 1F92 60				rts						; ret
  2250 					eif
  2251 				.endl
  2252 1F93			l_0323
  2253
  2254 				; optimize OK (printTime.inc), line = 86
  2255
  2256 1F93 AD 94 A2			lda SECOND
  2257 1F96 20 4B 1F			jsr TOSTRING
  2258
  2259 				; optimize OK (printTime.inc), line = 88
  2260
  2261 1F99 A9 A9			lda #$A9
  2262 1F9B 85 E0			sta P
  2263 1F9D A9 DF			lda #$DF
  2264 1F9F 85 E1			sta P+1
  2265
  2266 				; optimize OK (printTime.inc), line = 89
  2267
  2268 1FA1 A9 00			lda #$00
  2269 1FA3 8D F6 A2			sta PRINTDIGITS_HI._ADD
  2270 1FA6 A9 0F			lda #$0F
  2271 1FA8 8D F7 A2			sta PRINTDIGITS_HI._AND
  2272 1FAB 20 FA 1E			jsr PRINTDIGITS_HI
  2273
  2274 				; optimize OK (printTime.inc), line = 91
  2275
  2276 1FAE A9 A9			lda #$A9
  2277 1FB0 85 E0			sta P
  2278 1FB2 A9 DE			lda #$DE
  2279 1FB4 85 E1			sta P+1
  2280
  2281 				; optimize OK (printTime.inc), line = 92
  2282
  2283 1FB6 A9 60			lda #$60
  2284 1FB8 8D F6 A2			sta PRINTDIGITS_HI._ADD
  2285 1FBB A9 F0			lda #$F0
  2286 1FBD 8D F7 A2			sta PRINTDIGITS_HI._AND
  2287 1FC0 20 FA 1E			jsr PRINTDIGITS_HI
  2288
  2289 				; optimize OK (printTime.inc), line = 94
  2290
  2291 1FC3 AD 90 A2			lda MINUTE
  2292 1FC6 20 4B 1F			jsr TOSTRING
  2293
  2294 				; optimize OK (printTime.inc), line = 96
  2295
  2296 1FC9 A9 A9			lda #$A9
  2297 1FCB 85 E0			sta P
  2298 1FCD A9 DD			lda #$DD
  2299 1FCF 85 E1			sta P+1
  2300
  2301 				; optimize FAIL ('PRINTDIGITS', printTime.inc), line = 97
  2302
  2303 1FD1 20 88 1E			jsr PRINTDIGITS
  2304
  2305 				; ------------------------------------------------------------
  2306
  2307 = 00E0			P	= $E0
  2308 = A2D1			I	= DATAORIGIN+$00EE
  2309 = A2D2			A	= DATAORIGIN+$00EF
  2310 = A2D3			B	= DATAORIGIN+$00F0
  2311 = A2D4			L	= DATAORIGIN+$00F1
  2312 = A2D5			adr.T	= [DATAORIGIN+$00F2] .array [33]
  2313 1FD4			.var T	= adr.T .word
  2314
  2315 = A2D1			@VarData	= I
  2316 = 0025			@VarDataSize	= 37
  2317
  2318 1FD4			@exit
  2319 					.ifdef @new
  2320 					lda <@VarData
  2321 					sta :ztmp
  2322 					lda >@VarData
  2323 					ldy #@VarDataSize-1
  2324 					jmp @FreeMem
  2325 					els
  2326 1FD4 60				rts						; ret
  2327 					eif
  2328 = 1FD5 D5 A2		T
  2328 				.endl
  2329
  2330 1FD7			.local	PRINTSPEED					; PROCEDURE
  2331
  2332 1FD7 4C 73 20			jmp l_04AE
  2333
  2334 1FDA			.local	PRINTDIGITS_HI					; PROCEDURE
  2335
  2336 				; optimize OK (printSpeed.inc), line = 12
  2337
  2338 1FDA AD FB A2			lda L
  2339 1FDD F0 19			jeq l_04C3
  2340
  2341 				; optimize OK (printSpeed.inc), line = 13
  2342
  2343 1FDF AC FB A2			ldy L
  2344 1FE2 B9 FC A2			lda adr.T,y
  2345 1FE5 38 E9 2F			sub #$2F
  2346 1FE8 0A				asl @
  2347 1FE9 0A				asl @
  2348 1FEA 0A				asl @
  2349 1FEB 18 6D 1D A3			add _ADD
  2350 1FEF 8D FA A2			sta A
  2351
  2352 				; optimize FAIL (0, printSpeed.inc), line = 14
  2353
  2354 1FF2 CE FB A2			dec L
  2355 1FF5 4C FE 1F			jmp l_04E8
  2356 1FF8			l_04C3
  2357
  2358 				; optimize OK (printSpeed.inc), line = 16
  2359
  2360 1FF8 AD 1D A3			lda _ADD
  2361 1FFB 8D FA A2			sta A
  2362 1FFE			l_04E8
  2363
  2364 				; optimize OK (printSpeed.inc), line = 18
  2365
  2366 1FFE A9 07			lda #$07
  2367 2000 8D F9 A2			sta I
  2368
  2369 2003			l_04F7
  2370 				; --- ForToDoCondition
  2371 2003 A0 00			ldy #$00
  2372 2005 B1 E0			lda (P),y
  2373 2007 2D 1E A3			and _AND
  2374 200A 85 9E			sta :STACKORIGIN+10
  2375 200C AD FA A2			lda A
  2376 200F 18 6D F9 A2			add I
  2377 2013 A8				tay
  2378 2014 B9 B0 0B			lda adr.DIGITH,y
  2379 2017 05 9E			ora :STACKORIGIN+10
  2380 2019 A0 00			ldy #$00
  2381 201B 91 E0			sta (P),y
  2382
  2383 				; optimize FAIL (0, printSpeed.inc), line = 21
  2384
  2385 201D A5 E0			lda P
  2386 201F D0 02			bne @+
  2387 2021 C6 E1			dec P+1
  2388 				@
  2389 2023 C6 E0			dec P
  2390
  2391 				; --- ForToDoEpilog
  2392 2025 CE F9 A2			dec I
  2393 2028 10 D9			jpl l_04F7
  2394 202A			l_0505
  2395
  2396 				; ------------------------------------------------------------
  2397
  2398 = A31D			_ADD	= DATAORIGIN+$013A
  2399 = A31E			_AND	= DATAORIGIN+$013B
  2400
  2401 = A31D			@VarData	= _ADD
  2402 = 0002			@VarDataSize	= 2
  2403
  2404 202A			@exit
  2405 					.ifdef @new
  2406 					lda <@VarData
  2407 					sta :ztmp
  2408 					lda >@VarData
  2409 					ldy #@VarDataSize-1
  2410 					jmp @FreeMem
  2411 					els
  2412 202A 60				rts						; ret
  2413 					eif
  2414 				.endl
  2415
  2416 202B			.local	TOSTRING					; PROCEDURE
  2417 202B 8D 1F A3			sta A
  2418
  2419 				; optimize OK (printSpeed.inc), line = 48
  2420
  2421 202E C9 0A			cmp #$0A
  2422 2030 B0 14			jcs l_0541
  2423
  2424 				; optimize OK (printSpeed.inc), line = 49
  2425
  2426 2032 A9 02			lda #$02
  2427 2034 8D FC A2			sta adr.T
  2428
  2429 				; optimize OK (printSpeed.inc), line = 50
  2430
  2431 2037 A9 30			lda #$30
  2432 2039 8D FD A2			sta adr.T+$01
  2433
  2434 				; optimize OK (printSpeed.inc), line = 51
  2435
  2436 203C 18 6D 1F A3			add A
  2437 2040 8D FE A2			sta adr.T+$02
  2438 2043 4C 6D 20			jmp l_0560
  2439 2046			l_0541
  2440
  2441 				; optimize OK (printSpeed.inc), line = 53
  2442
  2443 2046 AD 1F A3			lda A
  2444 2049 20 A7 19			jsr SYSUTILS.BYTETOSTR
  2445 204C E8				inx
  2446 204D AD EB 19			lda SYSUTILS.BYTETOSTR.RESULT
  2447 2050 85 88			sta @move.src
  2448 2052 AD EC 19			lda SYSUTILS.BYTETOSTR.RESULT+1
  2449 2055 85 89			sta @move.src+1
  2450 					@moveSTRING T #33
  2450 				 MWA T @MOVE.DST\ MWA #33 @MOVE.CNT\ JSR @MOVESTRING
  2450 2057 AD A7 20 85 8C AD +  MWA T @MOVE.DST
  2450 2061 A9 21 85 84 A9 00 +  MWA #33 @MOVE.CNT
  2450 2069 20 30 17		 JSR @MOVESTRING
  2451 206C CA				dex
  2452 206D			l_0560
  2453
  2454 				; optimize OK (printSpeed.inc), line = 55
  2455
  2456 206D A9 02			lda #$02
  2457 206F 8D FB A2			sta L
  2458
  2459 				; ------------------------------------------------------------
  2460
  2461 = A31F			A	= DATAORIGIN+$013C
  2462
  2463 = A31F			@VarData	= A
  2464 = 0001			@VarDataSize	= 1
  2465
  2466 2072			@exit
  2467 					.ifdef @new
  2468 					lda <@VarData
  2469 					sta :ztmp
  2470 					lda >@VarData
  2471 					ldy #@VarDataSize-1
  2472 					jmp @FreeMem
  2473 					els
  2474 2072 60				rts						; ret
  2475 					eif
  2476 				.endl
  2477 2073			l_04AE
  2478
  2479 				; optimize OK (printSpeed.inc), line = 62
  2480
  2481 2073 A9 64			lda #$64
  2482 2075 38 ED 97 A2			sub SPEED
  2483 2079 20 2B 20			jsr TOSTRING
  2484
  2485 				; optimize OK (printSpeed.inc), line = 64
  2486
  2487 207C A9 C9			lda #$C9
  2488 207E 85 E0			sta P
  2489 2080 A9 DE			lda #$DE
  2490 2082 85 E1			sta P+1
  2491
  2492 				; optimize OK (printSpeed.inc), line = 65
  2493
  2494 2084 A9 00			lda #$00
  2495 2086 8D 1D A3			sta PRINTDIGITS_HI._ADD
  2496 2089 A9 0F			lda #$0F
  2497 208B 8D 1E A3			sta PRINTDIGITS_HI._AND
  2498 208E 20 DA 1F			jsr PRINTDIGITS_HI
  2499
  2500 				; optimize OK (printSpeed.inc), line = 67
  2501
  2502 2091 A9 C9			lda #$C9
  2503 2093 85 E0			sta P
  2504 2095 A9 DD			lda #$DD
  2505 2097 85 E1			sta P+1
  2506
  2507 				; optimize OK (printSpeed.inc), line = 68
  2508
  2509 2099 A9 60			lda #$60
  2510 209B 8D 1D A3			sta PRINTDIGITS_HI._ADD
  2511 209E A9 F0			lda #$F0
  2512 20A0 8D 1E A3			sta PRINTDIGITS_HI._AND
  2513 20A3 20 DA 1F			jsr PRINTDIGITS_HI
  2514
  2515 				; ------------------------------------------------------------
  2516
  2517 = 00E0			P	= $E0
  2518 = A2F9			I	= DATAORIGIN+$0116
  2519 = A2FA			A	= DATAORIGIN+$0117
  2520 = A2FB			L	= DATAORIGIN+$0118
  2521 = A2FC			adr.T	= [DATAORIGIN+$0119] .array [33]
  2522 20A6			.var T	= adr.T .word
  2523
  2524 = A2F9			@VarData	= I
  2525 = 0024			@VarDataSize	= 36
  2526
  2527 20A6			@exit
  2528 					.ifdef @new
  2529 					lda <@VarData
  2530 					sta :ztmp
  2531 					lda >@VarData
  2532 					ldy #@VarDataSize-1
  2533 					jmp @FreeMem
  2534 					els
  2535 20A6 60				rts						; ret
  2536 					eif
  2537 = 20A7 FC A2		T
  2537 				.endl
  2538
  2539 20A9			.local	PRINTSCORE					; PROCEDURE
  2540
  2541 20A9 4C 6C 21			jmp l_0583
  2542
  2543 20AC			.local	PRINTDIGITS					; PROCEDURE
  2544
  2545 				; optimize OK (printScore.inc), line = 12
  2546
  2547 20AC AD 23 A3			lda L
  2548 20AF F0 18			jeq l_0598
  2549
  2550 				; optimize OK (printScore.inc), line = 13
  2551
  2552 20B1 AC 23 A3			ldy L
  2553 20B4 B9 24 A3			lda adr.T,y
  2554 20B7 38 E9 2F			sub #$2F
  2555 20BA 0A				asl @
  2556 20BB 0A				asl @
  2557 20BC 0A				asl @
  2558 20BD 18 69 60			add #$60
  2559 20C0 8D 21 A3			sta A
  2560
  2561 				; optimize FAIL (0, printScore.inc), line = 14
  2562
  2563 20C3 CE 23 A3			dec L
  2564 20C6 4C CE 20			jmp l_05BB
  2565 20C9			l_0598
  2566
  2567 				; optimize OK (printScore.inc), line = 16
  2568
  2569 20C9 A9 68			lda #$68
  2570 20CB 8D 21 A3			sta A
  2571 20CE			l_05BB
  2572
  2573 				; optimize OK (printScore.inc), line = 18
  2574
  2575 20CE AD 23 A3			lda L
  2576 20D1 F0 15			jeq l_05D1
  2577
  2578 				; optimize OK (printScore.inc), line = 19
  2579
  2580 20D3 AC 23 A3			ldy L
  2581 20D6 B9 24 A3			lda adr.T,y
  2582 20D9 38 E9 2F			sub #$2F
  2583 20DC 0A				asl @
  2584 20DD 0A				asl @
  2585 20DE 0A				asl @
  2586 20DF 8D 22 A3			sta B
  2587
  2588 				; optimize FAIL (0, printScore.inc), line = 20
  2589
  2590 20E2 CE 23 A3			dec L
  2591 20E5 4C ED 20			jmp l_05F0
  2592 20E8			l_05D1
  2593
  2594 				; optimize OK (printScore.inc), line = 22
  2595
  2596 20E8 A9 08			lda #$08
  2597 20EA 8D 22 A3			sta B
  2598 20ED			l_05F0
  2599
  2600 				; optimize OK (printScore.inc), line = 24
  2601
  2602 20ED A9 07			lda #$07
  2603 20EF 8D 20 A3			sta I
  2604
  2605 20F2			l_05FD
  2606 				; --- ForToDoCondition
  2607 20F2 AD 21 A3			lda A
  2608 20F5 18 6D 20 A3			add I
  2609 20F9 A8				tay
  2610 20FA B9 B0 0B			lda adr.DIGITH,y
  2611 20FD 85 9E			sta :STACKORIGIN+10
  2612 20FF AD 22 A3			lda B
  2613 2102 18 6D 20 A3			add I
  2614 2106 A8				tay
  2615 2107 B9 B0 0B			lda adr.DIGITH,y
  2616 210A 05 9E			ora :STACKORIGIN+10
  2617 210C A0 00			ldy #$00
  2618 210E 91 E0			sta (P),y
  2619
  2620 				; optimize FAIL (0, printScore.inc), line = 27
  2621
  2622 2110 A5 E0			lda P
  2623 2112 D0 02			bne @+
  2624 2114 C6 E1			dec P+1
  2625 				@
  2626 2116 C6 E0			dec P
  2627
  2628 				; --- ForToDoEpilog
  2629 2118 CE 20 A3			dec I
  2630 211B 10 D5			jpl l_05FD
  2631 211D			l_060B
  2632
  2633 				; ------------------------------------------------------------
  2634
  2635 211D			@exit
  2636 					.ifdef @new
  2637 					lda <@VarData
  2638 					sta :ztmp
  2639 					lda >@VarData
  2640 					ldy #@VarDataSize-1
  2641 					jmp @FreeMem
  2642 					els
  2643 211D 60				rts						; ret
  2644 					eif
  2645 				.endl
  2646
  2647 211E			.local	PRINTDIGITS_LO					; PROCEDURE
  2648
  2649 				; optimize OK (printScore.inc), line = 36
  2650
  2651 211E AD 23 A3			lda L
  2652 2121 F0 18			jeq l_0649
  2653
  2654 				; optimize OK (printScore.inc), line = 37
  2655
  2656 2123 AC 23 A3			ldy L
  2657 2126 B9 24 A3			lda adr.T,y
  2658 2129 38 E9 2F			sub #$2F
  2659 212C 0A				asl @
  2660 212D 0A				asl @
  2661 212E 0A				asl @
  2662 212F 18 69 60			add #$60
  2663 2132 8D 21 A3			sta A
  2664
  2665 				; optimize FAIL (0, printScore.inc), line = 38
  2666
  2667 2135 CE 23 A3			dec L
  2668 2138 4C 40 21			jmp l_066C
  2669 213B			l_0649
  2670
  2671 				; optimize OK (printScore.inc), line = 40
  2672
  2673 213B A9 68			lda #$68
  2674 213D 8D 21 A3			sta A
  2675 2140			l_066C
  2676
  2677 				; optimize OK (printScore.inc), line = 42
  2678
  2679 2140 A9 07			lda #$07
  2680 2142 8D 20 A3			sta I
  2681
  2682 2145			l_0679
  2683 				; --- ForToDoCondition
  2684 2145 A0 00			ldy #$00
  2685 2147 B1 E0			lda (P),y
  2686 2149 29 F0			and #$F0
  2687 214B 85 9E			sta :STACKORIGIN+10
  2688 214D AD 21 A3			lda A
  2689 2150 18 6D 20 A3			add I
  2690 2154 A8				tay
  2691 2155 B9 B0 0B			lda adr.DIGITH,y
  2692 2158 05 9E			ora :STACKORIGIN+10
  2693 215A A0 00			ldy #$00
  2694 215C 91 E0			sta (P),y
  2695
  2696 				; optimize FAIL (0, printScore.inc), line = 45
  2697
  2698 215E A5 E0			lda P
  2699 2160 D0 02			bne @+
  2700 2162 C6 E1			dec P+1
  2701 				@
  2702 2164 C6 E0			dec P
  2703
  2704 				; --- ForToDoEpilog
  2705 2166 CE 20 A3			dec I
  2706 2169 10 DA			jpl l_0679
  2707 216B			l_0687
  2708
  2709 				; ------------------------------------------------------------
  2710
  2711 216B			@exit
  2712 					.ifdef @new
  2713 					lda <@VarData
  2714 					sta :ztmp
  2715 					lda >@VarData
  2716 					ldy #@VarDataSize-1
  2717 					jmp @FreeMem
  2718 					els
  2719 216B 60				rts						; ret
  2720 					eif
  2721 				.endl
  2722 216C			l_0583
  2723
  2724 				; optimize OK (printScore.inc), line = 53
  2725
  2726 216C AD 9F A2			lda SCORE
  2727 216F 8D A3 A2			sta SCORE_
  2728 2172 AD A0 A2			lda SCORE+1
  2729 2175 8D A4 A2			sta SCORE_+1
  2730 2178 AD A1 A2			lda SCORE+2
  2731 217B 8D A5 A2			sta SCORE_+2
  2732 217E AD A2 A2			lda SCORE+3
  2733 2181 8D A6 A2			sta SCORE_+3
  2734
  2735 				; optimize FAIL ('SYSTEM.STR_0133', printScore.inc), line = 55
  2736
  2737 2184 E8				inx
  2738 2185 AD CF 21 95 94		mva T :STACKORIGIN,x
  2739 218A AD D0 21 95 A4		mva T+1 :STACKORIGIN+STACKWIDTH,x
  2740 218F E8				inx
  2741 2190 AD 9F A2 95 94		mva SCORE :STACKORIGIN,x
  2742 2195 AD A0 A2 95 A4		mva SCORE+1 :STACKORIGIN+STACKWIDTH,x
  2743 219A AD A1 A2 95 B4		mva SCORE+2 :STACKORIGIN+STACKWIDTH*2,x
  2744 219F AD A2 A2 95 C4		mva SCORE+3 :STACKORIGIN+STACKWIDTH*3,x
  2745 21A4 20 FE 18			jsr SYSTEM.STR_0133
  2746
  2747 				; optimize OK (printScore.inc), line = 57
  2748
  2749 21A7 AD 24 A3			lda adr.T
  2750 21AA 8D 23 A3			sta L
  2751
  2752 				; optimize OK (printScore.inc), line = 59
  2753
  2754 21AD A9 49			lda #$49
  2755 21AF 85 E0			sta P
  2756 21B1 A9 DE			lda #$DE
  2757 21B3 85 E1			sta P+1
  2758
  2759 				; optimize FAIL ('PRINTDIGITS', printScore.inc), line = 60
  2760
  2761 21B5 20 AC 20			jsr PRINTDIGITS
  2762
  2763 				; optimize OK (printScore.inc), line = 62
  2764
  2765 21B8 A9 49			lda #$49
  2766 21BA 85 E0			sta P
  2767 21BC A9 DD			lda #$DD
  2768 21BE 85 E1			sta P+1
  2769
  2770 				; optimize FAIL ('PRINTDIGITS', printScore.inc), line = 63
  2771
  2772 21C0 20 AC 20			jsr PRINTDIGITS
  2773
  2774 				; optimize OK (printScore.inc), line = 65
  2775
  2776 21C3 A9 49			lda #$49
  2777 21C5 85 E0			sta P
  2778 21C7 A9 DC			lda #$DC
  2779 21C9 85 E1			sta P+1
  2780
  2781 				; optimize FAIL ('PRINTDIGITS_LO', printScore.inc), line = 66
  2782
  2783 21CB 20 1E 21			jsr PRINTDIGITS_LO
  2784
  2785 				; ------------------------------------------------------------
  2786
  2787 = 00E0			P	= $E0
  2788 = A320			I	= DATAORIGIN+$013D
  2789 = A321			A	= DATAORIGIN+$013E
  2790 = A322			B	= DATAORIGIN+$013F
  2791 = A323			L	= DATAORIGIN+$0140
  2792 = A324			adr.T	= [DATAORIGIN+$0141] .array [33]
  2793 21CE			.var T	= adr.T .word
  2794
  2795 = A320			@VarData	= I
  2796 = 0025			@VarDataSize	= 37
  2797
  2798 21CE			@exit
  2799 					.ifdef @new
  2800 					lda <@VarData
  2801 					sta :ztmp
  2802 					lda >@VarData
  2803 					ldy #@VarDataSize-1
  2804 					jmp @FreeMem
  2805 					els
  2806 21CE 60				rts						; ret
  2807 					eif
  2808 = 21CF 24 A3		T
  2808 				.endl
  2809
  2810 21D1			.local	PRINTHISCORE					; PROCEDURE
  2811
  2812 21D1 4C 84 22			jmp l_06CA
  2813
  2814 21D4			.local	PRINTDIGITS					; PROCEDURE
  2815
  2816 				; optimize OK (printHiScore.inc), line = 12
  2817
  2818 21D4 AD 48 A3			lda L
  2819 21D7 F0 18			jeq l_06DF
  2820
  2821 				; optimize OK (printHiScore.inc), line = 13
  2822
  2823 21D9 AC 48 A3			ldy L
  2824 21DC B9 49 A3			lda adr.T,y
  2825 21DF 38 E9 2F			sub #$2F
  2826 21E2 0A				asl @
  2827 21E3 0A				asl @
  2828 21E4 0A				asl @
  2829 21E5 18 69 60			add #$60
  2830 21E8 8D 46 A3			sta A
  2831
  2832 				; optimize FAIL (0, printHiScore.inc), line = 14
  2833
  2834 21EB CE 48 A3			dec L
  2835 21EE 4C F6 21			jmp l_0702
  2836 21F1			l_06DF
  2837
  2838 				; optimize OK (printHiScore.inc), line = 16
  2839
  2840 21F1 A9 68			lda #$68
  2841 21F3 8D 46 A3			sta A
  2842 21F6			l_0702
  2843
  2844 				; optimize OK (printHiScore.inc), line = 18
  2845
  2846 21F6 AD 48 A3			lda L
  2847 21F9 F0 15			jeq l_0718
  2848
  2849 				; optimize OK (printHiScore.inc), line = 19
  2850
  2851 21FB AC 48 A3			ldy L
  2852 21FE B9 49 A3			lda adr.T,y
  2853 2201 38 E9 2F			sub #$2F
  2854 2204 0A				asl @
  2855 2205 0A				asl @
  2856 2206 0A				asl @
  2857 2207 8D 47 A3			sta B
  2858
  2859 				; optimize FAIL (0, printHiScore.inc), line = 20
  2860
  2861 220A CE 48 A3			dec L
  2862 220D 4C 15 22			jmp l_0737
  2863 2210			l_0718
  2864
  2865 				; optimize OK (printHiScore.inc), line = 22
  2866
  2867 2210 A9 08			lda #$08
  2868 2212 8D 47 A3			sta B
  2869 2215			l_0737
  2870
  2871 				; optimize OK (printHiScore.inc), line = 24
  2872
  2873 2215 A9 07			lda #$07
  2874 2217 8D 45 A3			sta I
  2875
  2876 221A			l_0744
  2877 				; --- ForToDoCondition
  2878 221A AD 46 A3			lda A
  2879 221D 18 6D 45 A3			add I
  2880 2221 A8				tay
  2881 2222 B9 B0 0B			lda adr.DIGITH,y
  2882 2225 85 9E			sta :STACKORIGIN+10
  2883 2227 AD 47 A3			lda B
  2884 222A 18 6D 45 A3			add I
  2885 222E A8				tay
  2886 222F B9 B0 0B			lda adr.DIGITH,y
  2887 2232 05 9E			ora :STACKORIGIN+10
  2888 2234 AC 45 A3			ldy I
  2889 2237 91 E0			sta (P),y
  2890
  2891 				; --- ForToDoEpilog
  2892 2239 CE 45 A3			dec I
  2893 223C 10 DC			jpl l_0744
  2894 223E			l_0752
  2895
  2896 				; ------------------------------------------------------------
  2897
  2898 223E			@exit
  2899 					.ifdef @new
  2900 					lda <@VarData
  2901 					sta :ztmp
  2902 					lda >@VarData
  2903 					ldy #@VarDataSize-1
  2904 					jmp @FreeMem
  2905 					els
  2906 223E 60				rts						; ret
  2907 					eif
  2908 				.endl
  2909
  2910 223F			.local	PRINTDIGITS_HI					; PROCEDURE
  2911
  2912 				; optimize OK (printHiScore.inc), line = 34
  2913
  2914 223F AD 48 A3			lda L
  2915 2242 F0 15			jeq l_078E
  2916
  2917 				; optimize OK (printHiScore.inc), line = 35
  2918
  2919 2244 AC 48 A3			ldy L
  2920 2247 B9 49 A3			lda adr.T,y
  2921 224A 38 E9 2F			sub #$2F
  2922 224D 0A				asl @
  2923 224E 0A				asl @
  2924 224F 0A				asl @
  2925 2250 8D 46 A3			sta A
  2926
  2927 				; optimize FAIL (0, printHiScore.inc), line = 36
  2928
  2929 2253 CE 48 A3			dec L
  2930 2256 4C 5E 22			jmp l_07AD
  2931 2259			l_078E
  2932
  2933 				; optimize OK (printHiScore.inc), line = 38
  2934
  2935 2259 A9 08			lda #$08
  2936 225B 8D 46 A3			sta A
  2937 225E			l_07AD
  2938
  2939 				; optimize OK (printHiScore.inc), line = 40
  2940
  2941 225E A9 07			lda #$07
  2942 2260 8D 45 A3			sta I
  2943
  2944 2263			l_07BA
  2945 				; --- ForToDoCondition
  2946 2263 AC 45 A3			ldy I
  2947 2266 B1 E0			lda (P),y
  2948 2268 29 0F			and #$0F
  2949 226A 85 9E			sta :STACKORIGIN+10
  2950 226C AD 45 A3			lda I
  2951 226F 18 6D 46 A3			add A
  2952 2273 A8				tay
  2953 2274 B9 B0 0B			lda adr.DIGITH,y
  2954 2277 05 9E			ora :STACKORIGIN+10
  2955 2279 AC 45 A3			ldy I
  2956 227C 91 E0			sta (P),y
  2957
  2958 				; --- ForToDoEpilog
  2959 227E CE 45 A3			dec I
  2960 2281 10 E0			jpl l_07BA
  2961 2283			l_07C8
  2962
  2963 				; ------------------------------------------------------------
  2964
  2965 2283			@exit
  2966 					.ifdef @new
  2967 					lda <@VarData
  2968 					sta :ztmp
  2969 					lda >@VarData
  2970 					ldy #@VarDataSize-1
  2971 					jmp @FreeMem
  2972 					els
  2973 2283 60				rts						; ret
  2974 					eif
  2975 				.endl
  2976 2284			l_06CA
  2977
  2978 				; optimize OK (printHiScore.inc), line = 48
  2979
  2980 2284 AD 7D A2			lda HISCORE
  2981 2287 8D A7 A2			sta HISCORE_
  2982 228A AD 7E A2			lda HISCORE+1
  2983 228D 8D A8 A2			sta HISCORE_+1
  2984 2290 AD 7F A2			lda HISCORE+2
  2985 2293 8D A9 A2			sta HISCORE_+2
  2986 2296 AD 80 A2			lda HISCORE+3
  2987 2299 8D AA A2			sta HISCORE_+3
  2988
  2989 				; optimize FAIL ('SYSTEM.STR_0133', printHiScore.inc), line = 50
  2990
  2991 229C E8				inx
  2992 229D AD E7 22 95 94		mva T :STACKORIGIN,x
  2993 22A2 AD E8 22 95 A4		mva T+1 :STACKORIGIN+STACKWIDTH,x
  2994 22A7 E8				inx
  2995 22A8 AD 7D A2 95 94		mva HISCORE :STACKORIGIN,x
  2996 22AD AD 7E A2 95 A4		mva HISCORE+1 :STACKORIGIN+STACKWIDTH,x
  2997 22B2 AD 7F A2 95 B4		mva HISCORE+2 :STACKORIGIN+STACKWIDTH*2,x
  2998 22B7 AD 80 A2 95 C4		mva HISCORE+3 :STACKORIGIN+STACKWIDTH*3,x
  2999 22BC 20 FE 18			jsr SYSTEM.STR_0133
  3000
  3001 				; optimize OK (printHiScore.inc), line = 52
  3002
  3003 22BF AD 49 A3			lda adr.T
  3004 22C2 8D 48 A3			sta L
  3005
  3006 				; optimize OK (printHiScore.inc), line = 54
  3007
  3008 22C5 A9 62			lda #$62
  3009 22C7 85 E0			sta P
  3010 22C9 A9 DF			lda #$DF
  3011 22CB 85 E1			sta P+1
  3012
  3013 				; optimize FAIL ('PRINTDIGITS_HI', printHiScore.inc), line = 55
  3014
  3015 22CD 20 3F 22			jsr PRINTDIGITS_HI
  3016
  3017 				; optimize OK (printHiScore.inc), line = 57
  3018
  3019 22D0 A9 62			lda #$62
  3020 22D2 85 E0			sta P
  3021 22D4 A9 DE			lda #$DE
  3022 22D6 85 E1			sta P+1
  3023
  3024 				; optimize FAIL ('PRINTDIGITS', printHiScore.inc), line = 58
  3025
  3026 22D8 20 D4 21			jsr PRINTDIGITS
  3027
  3028 				; optimize OK (printHiScore.inc), line = 60
  3029
  3030 22DB A9 62			lda #$62
  3031 22DD 85 E0			sta P
  3032 22DF A9 DD			lda #$DD
  3033 22E1 85 E1			sta P+1
  3034
  3035 				; optimize FAIL ('PRINTDIGITS', printHiScore.inc), line = 61
  3036
  3037 22E3 20 D4 21			jsr PRINTDIGITS
  3038
  3039 				; ------------------------------------------------------------
  3040
  3041 = 00E0			P	= $E0
  3042 = A345			I	= DATAORIGIN+$0162
  3043 = A346			A	= DATAORIGIN+$0163
  3044 = A347			B	= DATAORIGIN+$0164
  3045 = A348			L	= DATAORIGIN+$0165
  3046 = A349			adr.T	= [DATAORIGIN+$0166] .array [33]
  3047 22E6			.var T	= adr.T .word
  3048
  3049 = A345			@VarData	= I
  3050 = 0025			@VarDataSize	= 37
  3051
  3052 22E6			@exit
  3053 					.ifdef @new
  3054 					lda <@VarData
  3055 					sta :ztmp
  3056 					lda >@VarData
  3057 					ldy #@VarDataSize-1
  3058 					jmp @FreeMem
  3059 					els
  3060 22E6 60				rts						; ret
  3061 					eif
  3062 = 22E7 49 A3		T
  3062 				.endl
  3063
  3064 22E9			.local	MONSTERS					; PROCEDURE
  3065
  3066 				; -------------------  ASM Block 00000134  -------------------
  3067
  3068 22E9 AD 8F A2		  lda frame_cnt
  3069 22EC 29 07		  and #7
  3070 22EE F0 03 4C 7F 23	  jne @exit
  3071 				 
  3072 				; optimize OK (monsters.inc), line = 18
  3073
  3074 22F3 AD 6A A3			lda PTR
  3075 22F6 85 E0			sta SRC
  3076 22F8 AD 6B A3			lda PTR+1
  3077 22FB 85 E1			sta SRC+1
  3078
  3079 				; optimize OK (monsters.inc), line = 20
  3080
  3081 22FD AC 6D A3 84 82 AC + 	mwy FRM :bp2
  3082 2307 A0 00			ldy #$00
  3083 2309 B1 82			lda (:bp2),y
  3084 230B 29 03			and #$03
  3085 230D 8D 70 A3			sta @CASETMP_0006
  3086 2310 C9 01			cmp #$01
  3087 2312 F0 04			beq @+
  3088 2314 C9 03			cmp #$03
  3089 2316 D0 0E			jne l_0821
  3090 				@
  3091
  3092 				; optimize OK (monsters.inc), line = 22
  3093
  3094 2318 A5 E0			lda SRC
  3095 231A 18 69 18			add #$18
  3096 231D 85 E0			sta SRC
  3097 231F 90 02			scc
  3098 2321 E6 E1			inc SRC+1
  3099
  3100 2323 4C 35 23			jmp a_0006
  3101 2326			l_0821
  3102 2326 C9 02			cmp #$02
  3103 2328 D0 0B			jne l_082B
  3104 				@
  3105
  3106 				; optimize OK (monsters.inc), line = 24
  3107
  3108 232A A5 E0			lda SRC
  3109 232C 18 69 30			add #$30
  3110 232F 85 E0			sta SRC
  3111 2331 90 02			scc
  3112 2333 E6 E1			inc SRC+1
  3113
  3114 2335			l_082B
  3115 2335			a_0006
  3116
  3117 				; optimize OK (monsters.inc), line = 28
  3118
  3119 2335 AD 6C A3			lda OFS
  3120 2338 85 E2			sta PM1
  3121 233A A9 DD			lda #$DD
  3122 233C 85 E3			sta PM1+1
  3123
  3124 				; optimize OK (monsters.inc), line = 29
  3125
  3126 233E AD 6C A3			lda OFS
  3127 2341 85 E4			sta PM2
  3128 2343 A9 DE			lda #$DE
  3129 2345 85 E5			sta PM2+1
  3130
  3131 				; optimize OK (monsters.inc), line = 32
  3132
  3133 2347 A9 17			lda #$17
  3134 2349 A8				tay
  3135
  3136 234A			l_085F
  3137 				; --- ForToDoCondition
  3138 234A B1 E0			lda (SRC),y
  3139 234C 91 E2			sta (PM1),y
  3140
  3141 				; --- ForToDoEpilog
  3142 234E 88				dey
  3143 234F 10 F9			jpl l_085F
  3144 2351 8C 6F A3			sty I
  3145
  3146 				; optimize OK (monsters.inc), line = 34
  3147
  3148 2354 A5 E0			lda SRC
  3149 2356 18 69 48			add #$48
  3150 2359 85 E0			sta SRC
  3151 235B 90 02			scc
  3152 235D E6 E1			inc SRC+1
  3153
  3154 				; optimize OK (monsters.inc), line = 36
  3155
  3156 235F A9 17			lda #$17
  3157 2361 A8				tay
  3158
  3159 2362			l_0888
  3160 				; --- ForToDoCondition
  3161 2362 B1 E0			lda (SRC),y
  3162 2364 91 E4			sta (PM2),y
  3163
  3164 				; --- ForToDoEpilog
  3165 2366 88				dey
  3166 2367 10 F9			jpl l_0888
  3167 2369 8C 6F A3			sty I
  3168
  3169 				; optimize OK (monsters.inc), line = 38
  3170
  3171 236C AC 6D A3 84 82 AC + 	mwy FRM :bp2
  3172 2376 A0 00			ldy #$00
  3173 2378 B1 82			lda (:bp2),y
  3174 237A 18 69 01			add #$01
  3175 237D 91 82			sta (:bp2),y
  3176
  3177 				; ------------------------------------------------------------
  3178
  3179 = A36A			PTR	= DATAORIGIN+$0187
  3180 = A36C			OFS	= DATAORIGIN+$0189
  3181 = A36D			FRM	= DATAORIGIN+$018A
  3182 = A36F			I	= DATAORIGIN+$018C
  3183 = 00E0			SRC	= $E0
  3184 = 00E2			PM1	= $E2
  3185 = 00E4			PM2	= $E4
  3186 = A370			@CASETMP_0006	= DATAORIGIN+$018D
  3187
  3188 = A36A			@VarData	= PTR
  3189 = 0007			@VarDataSize	= 7
  3190
  3191 237F			@exit
  3192 					.ifdef @new
  3193 					lda <@VarData
  3194 					sta :ztmp
  3195 					lda >@VarData
  3196 					ldy #@VarDataSize-1
  3197 					jmp @FreeMem
  3198 					els
  3199 237F 60				rts						; ret
  3200 					eif
  3201 				.endl
  3202
  3203 2380			.local	PANELUPDATE					; PROCEDURE
  3204
  3205 				; optimize OK (block_attack.pas), line = 396
  3206
  3207 2380 AC AB A2 84 82 AC + 	mwy VRAM :bp2
  3208 238A A0 00			ldy #$00
  3209 238C B1 82			lda (:bp2),y
  3210 238E C8				iny
  3211 238F 18 69 1D			add #$1D
  3212 2392 85 92			sta P
  3213 2394 B1 82			lda (:bp2),y
  3214 2396 69 00			adc #$00
  3215 2398 85 93			sta P+1
  3216
  3217 				; optimize OK (block_attack.pas), line = 398
  3218
  3219 239A A9 03			lda #$03
  3220 239C 8D 71 A3			sta J
  3221
  3222 239F			l_08BE
  3223 				; --- ForToDoCondition
  3224 239F A0 00			ldy #$00
  3225 23A1 A9 FD			lda #$FD
  3226 23A3 91 92			sta (P),y
  3227
  3228 				; optimize OK (block_attack.pas), line = 401
  3229
  3230 23A5 A0 28			ldy #$28
  3231 23A7 A9 FB			lda #$FB
  3232 23A9 91 92			sta (P),y
  3233
  3234 				; optimize OK (block_attack.pas), line = 402
  3235
  3236 23AB A0 50			ldy #$50
  3237 23AD 91 92			sta (P),y
  3238
  3239 				; optimize OK (block_attack.pas), line = 403
  3240
  3241 23AF A0 78			ldy #$78
  3242 23B1 91 92			sta (P),y
  3243 23B3 A5 92			lda P
  3244 23B5 18 69 A0			add #$A0
  3245 23B8 85 92			sta P
  3246 23BA 90 02			scc
  3247 23BC E6 93			inc P+1
  3248
  3249 				; optimize OK (block_attack.pas), line = 404
  3250
  3251 23BE A0 00			ldy #$00
  3252 23C0 A9 FC			lda #$FC
  3253 23C2 91 92			sta (P),y
  3254
  3255 				; optimize OK (block_attack.pas), line = 405
  3256
  3257 23C4 A0 28			ldy #$28
  3258 23C6 A9 FA			lda #$FA
  3259 23C8 91 92			sta (P),y
  3260
  3261 				; optimize OK (block_attack.pas), line = 406
  3262
  3263 23CA A0 50			ldy #$50
  3264 23CC 91 92			sta (P),y
  3265
  3266 				; optimize OK (block_attack.pas), line = 407
  3267
  3268 23CE A0 78			ldy #$78
  3269 23D0 91 92			sta (P),y
  3270 23D2 A5 92			lda P
  3271 23D4 18 69 A0			add #$A0
  3272 23D7 85 92			sta P
  3273 23D9 90 02			scc
  3274 23DB E6 93			inc P+1
  3275
  3276 				; --- ForToDoEpilog
  3277 23DD CE 71 A3			dec J
  3278 23E0 10 BD			jpl l_08BE
  3279 23E2			l_08CC
  3280
  3281 				; optimize OK (block_attack.pas), line = 412
  3282
  3283 23E2 AC 82 A2			ldy VSC
  3284 23E5 A9 00			lda #$00
  3285 23E7 99 E0 E3			sta $E3E0,y
  3286
  3287 				; optimize OK (block_attack.pas), line = 413
  3288
  3289 23EA 99 E0 E7			sta $E7E0,y
  3290
  3291 				; optimize OK (block_attack.pas), line = 415
  3292
  3293 23ED A9 FF			lda #$FF
  3294 23EF 99 E8 E3			sta $E3E8,y
  3295
  3296 				; optimize OK (block_attack.pas), line = 416
  3297
  3298 23F2 99 E8 E7			sta $E7E8,y
  3299
  3300 				; optimize OK (block_attack.pas), line = 418
  3301
  3302 23F5 AD 82 A2			lda VSC
  3303 23F8 D0 58			jne l_0949
  3304
  3305 				; optimize OK (block_attack.pas), line = 420
  3306
  3307 23FA A9 FF			lda #$FF
  3308 23FC 8D E1 E3			sta $E3E1
  3309
  3310 				; optimize OK (block_attack.pas), line = 421
  3311
  3312 23FF 8D E2 E3			sta $E3E2
  3313
  3314 				; optimize OK (block_attack.pas), line = 422
  3315
  3316 2402 8D E3 E3			sta $E3E3
  3317
  3318 				; optimize OK (block_attack.pas), line = 423
  3319
  3320 2405 8D E4 E3			sta $E3E4
  3321
  3322 				; optimize OK (block_attack.pas), line = 424
  3323
  3324 2408 8D E5 E3			sta $E3E5
  3325
  3326 				; optimize OK (block_attack.pas), line = 425
  3327
  3328 240B 8D E6 E3			sta $E3E6
  3329
  3330 				; optimize OK (block_attack.pas), line = 426
  3331
  3332 240E 8D E7 E3			sta $E3E7
  3333
  3334 				; optimize OK (block_attack.pas), line = 428
  3335
  3336 2411 8D E1 E7			sta $E7E1
  3337
  3338 				; optimize OK (block_attack.pas), line = 429
  3339
  3340 2414 8D E2 E7			sta $E7E2
  3341
  3342 				; optimize OK (block_attack.pas), line = 430
  3343
  3344 2417 8D E3 E7			sta $E7E3
  3345
  3346 				; optimize OK (block_attack.pas), line = 431
  3347
  3348 241A 8D E4 E7			sta $E7E4
  3349
  3350 				; optimize OK (block_attack.pas), line = 432
  3351
  3352 241D 8D E5 E7			sta $E7E5
  3353
  3354 				; optimize OK (block_attack.pas), line = 433
  3355
  3356 2420 8D E6 E7			sta $E7E6
  3357
  3358 				; optimize OK (block_attack.pas), line = 434
  3359
  3360 2423 8D E7 E7			sta $E7E7
  3361
  3362 				; optimize OK (block_attack.pas), line = 436
  3363
  3364 2426 A9 00			lda #$00
  3365 2428 8D E9 E3			sta $E3E9
  3366
  3367 				; optimize OK (block_attack.pas), line = 437
  3368
  3369 242B 8D EA E3			sta $E3EA
  3370
  3371 				; optimize OK (block_attack.pas), line = 438
  3372
  3373 242E 8D EB E3			sta $E3EB
  3374
  3375 				; optimize OK (block_attack.pas), line = 439
  3376
  3377 2431 8D EC E3			sta $E3EC
  3378
  3379 				; optimize OK (block_attack.pas), line = 440
  3380
  3381 2434 8D ED E3			sta $E3ED
  3382
  3383 				; optimize OK (block_attack.pas), line = 441
  3384
  3385 2437 8D EE E3			sta $E3EE
  3386
  3387 				; optimize OK (block_attack.pas), line = 442
  3388
  3389 243A 8D EF E3			sta $E3EF
  3390
  3391 				; optimize OK (block_attack.pas), line = 444
  3392
  3393 243D 8D E9 E7			sta $E7E9
  3394
  3395 				; optimize OK (block_attack.pas), line = 445
  3396
  3397 2440 8D EA E7			sta $E7EA
  3398
  3399 				; optimize OK (block_attack.pas), line = 446
  3400
  3401 2443 8D EB E7			sta $E7EB
  3402
  3403 				; optimize OK (block_attack.pas), line = 447
  3404
  3405 2446 8D EC E7			sta $E7EC
  3406
  3407 				; optimize OK (block_attack.pas), line = 448
  3408
  3409 2449 8D ED E7			sta $E7ED
  3410
  3411 				; optimize OK (block_attack.pas), line = 449
  3412
  3413 244C 8D EE E7			sta $E7EE
  3414
  3415 				; optimize OK (block_attack.pas), line = 450
  3416
  3417 244F 8D EF E7			sta $E7EF
  3418 2452			l_0949
  3419
  3420 				; ------------------------------------------------------------
  3421
  3422 = 0092			P	= :STACKORIGIN-2
  3423 = A371			J	= DATAORIGIN+$018E
  3424 = 007C			CH0	= $7C
  3425 = 007D			CH1	= $7D
  3426
  3427 = A371			@VarData	= J
  3428 = 0001			@VarDataSize	= 1
  3429
  3430 2452			@exit
  3431 					.ifdef @new
  3432 					lda <@VarData
  3433 					sta :ztmp
  3434 					lda >@VarData
  3435 					ldy #@VarDataSize-1
  3436 					jmp @FreeMem
  3437 					els
  3438 2452 60				rts						; ret
  3439 					eif
  3440 				.endl
  3441
  3442 2453			.local	TIMEUPDATE					; PROCEDURE
  3443
  3444 				; optimize OK (block_attack.pas), line = 460
  3445
  3446 2453 AD BE A2			lda STOP
  3447 2456 D0 33			jne l_09C2
  3448 2458 AD 84 A2			lda SCROLL
  3449 245B D0 2E			jne l_09C2
  3450
  3451 				; optimize OK (block_attack.pas), line = 462
  3452
  3453 245D AD 81 A2			lda GAMEMODE
  3454 2460 C9 01			cmp #$01
  3455 2462 D0 15			jne l_09D5
  3456
  3457 				; optimize FAIL (0, block_attack.pas), line = 464
  3458
  3459 2464 CE 94 A2			dec SECOND
  3460
  3461 				; optimize OK (block_attack.pas), line = 465
  3462
  3463 2467 AD 94 A2			lda SECOND
  3464 246A C9 FF			cmp #$FF
  3465 246C D0 08			jne l_09EC
  3466
  3467 				; optimize OK (block_attack.pas), line = 466
  3468
  3469 246E A9 3B			lda #$3B
  3470 2470 8D 94 A2			sta SECOND
  3471
  3472 				; optimize FAIL (0, block_attack.pas), line = 467
  3473
  3474 2473 CE 90 A2			dec MINUTE
  3475 2476			l_09EC
  3476 2476 4C 8B 24			jmp l_0A00
  3477 2479			l_09D5
  3478
  3479 				; optimize FAIL (0, block_attack.pas), line = 472
  3480
  3481 2479 EE 94 A2			inc SECOND
  3482
  3483 				; optimize OK (block_attack.pas), line = 473
  3484
  3485 247C AD 94 A2			lda SECOND
  3486 247F C9 3C			cmp #$3C
  3487 2481 90 08			jcc l_0A16
  3488
  3489 				; optimize OK (block_attack.pas), line = 474
  3490
  3491 2483 A9 00			lda #$00
  3492 2485 8D 94 A2			sta SECOND
  3493
  3494 				; optimize FAIL (0, block_attack.pas), line = 475
  3495
  3496 2488 EE 90 A2			inc MINUTE
  3497 248B			l_0A16
  3498 248B			l_0A00
  3499 248B			l_09C2
  3500 248B			@exit
  3501 					.ifdef @new
  3502 					lda <@VarData
  3503 					sta :ztmp
  3504 					lda >@VarData
  3505 					ldy #@VarDataSize-1
  3506 					jmp @FreeMem
  3507 					els
  3508 248B 60				rts						; ret
  3509 					eif
  3510 				.endl
  3511
  3512 248C			.local	IRQ						; PROCEDURE | ASSEMBLER | INTERRUPT
  3513
  3514 				; -------------------  ASM Block 00000135  -------------------
  3515
  3516 248C 8D A3 24			sta rA
  3517
  3518 248F AD 00 06			lda pmc: pm_color
  3519
  3520 2492 8D 19 D0			sta color3
  3521
  3522 2495 EE 90 24			inc pmc
  3523
  3524
  3525 2498 A9 00			lda #0			; reuse IRQ
  3526 249A 8D 0E D2			sta irqen
  3527 249D A9 04			lda #4
  3528 249F 8D 0E D2			sta irqen
  3529
  3530
  3531 24A2 A9 00			lda rA: #0
  3532
  3533 24A4 40				rti						; ret
  3534 				.endl
  3535
  3536 24A5			.local	PLAYSAP						; PROCEDURE | ASSEMBLER | KEEP
  3537
  3538 				; -------------------  ASM Block 00000136  -------------------
  3539
  3540 24A5 AD 73 A1			lda MSX
  3541 24A8 AC 74 A1			ldy MSX+1
  3542 24AB 20 C0 1D			jsr SAPLZSS.TLZSSPLAY.Decode
  3543
  3544 24AE AD 73 A1			lda MSX
  3545 24B1 AC 74 A1			ldy MSX+1
  3546 24B4 4C FF 1D			jmp SAPLZSS.TLZSSPLAY.Play
  3547
  3548 24B7			@exit
  3549 					.ifdef @new
  3550 					lda <@VarData
  3551 					sta :ztmp
  3552 					lda >@VarData
  3553 					ldy #@VarDataSize-1
  3554 					jmp @FreeMem
  3555 					els
  3556 24B7 60				rts						; ret
  3557 					eif
  3558 				.endl
  3559
  3560 24B8			.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT
  3561
  3562 				; -------------------  ASM Block 00000137  -------------------
  3563
  3564 24B8 2C 0F D4			bit nmist
  3565 24BB 10 03			bpl vbl
  3566
  3567 24BD 6C 00 02			jmp (vdslst)
  3568
  3569 24C0 8D 09 D2		vbl	sta stimer		; restart IRQ
  3570
  3571 24C3 8D BA 25			sta rA
  3572 24C6 8E BC 25			stx rX
  3573 24C9 8C BE 25			sty rY
  3574
  3575 24CC 8D 0F D4			sta nmist
  3576
  3577 				; ---
  3578
  3579 24CF A9 00			lda #0
  3580 24D1 8D 90 24			sta IRQ.pmc
  3581
  3582 				; ---
  3583
  3584 				; -----------------------
  3585 				; play msx
  3586 				; ----------------------
  3587
  3588 24D4 AD C1 A2		@	lda msx_play
  3589 24D7 F0 12			beq @+
  3590
  3591 24D9 AD 73 A1			lda MSX
  3592 24DC AC 74 A1			ldy MSX+1
  3593 24DF 20 C0 1D			jsr SAPLZSS.TLZSSPLAY.Decode
  3594
  3595 24E2 AD 73 A1			lda MSX
  3596 24E5 AC 74 A1			ldy MSX+1
  3597 24E8 20 FF 1D			jsr SAPLZSS.TLZSSPLAY.Play
  3598
  3599 				; -----------------------
  3600 				; sfx match
  3601 				; ----------------------
  3602
  3603 24EB AC C2 A2		@	ldy match_play
  3604 24EE F0 1A			beq @+
  3605
  3606 24F0 B9 00 10			lda sfx_match_audf: $1000,y
  3607 24F3 8D 00 D2			sta audf1
  3608 24F6 C8				iny
  3609 24F7 B9 00 10			lda sfx_match_audc: $1000,y
  3610 24FA 8D 01 D2			sta audc1
  3611 24FD C8				iny
  3612 24FE 8C C2 A2			sty match_play
  3613
  3614 2501 C0 13			cpy #18+1
  3615 2503 D0 05			bne @+
  3616
  3617 2505 A9 00			lda #0
  3618 2507 8D C2 A2			sta match_play
  3619
  3620 				; -----------------------
  3621 				; sfx move
  3622 				; ----------------------
  3623
  3624 250A AC C3 A2		@	ldy move_play
  3625 250D F0 1A			beq @+
  3626
  3627 250F B9 DB 0A			lda adr.sfmove,y
  3628 2512 8D 02 D2			sta audf2
  3629 2515 C8				iny
  3630 2516 B9 DB 0A			lda adr.sfmove,y
  3631 2519 8D 03 D2			sta audc2
  3632 251C C8				iny
  3633 251D 8C C3 A2			sty move_play
  3634
  3635 2520 C0 13			cpy #18+1
  3636 2522 D0 05			bne @+
  3637
  3638 2524 A9 00			lda #0
  3639 2526 8D C3 A2			sta move_play
  3640
  3641 				; -----------------------
  3642 				; sfx swap
  3643 				; ----------------------
  3644
  3645 2529 AC C4 A2		@	ldy swap_play
  3646 252C F0 1A			beq @+
  3647
  3648 252E B9 EE 0A			lda adr.sfswap,y
  3649 2531 8D 04 D2			sta audf3
  3650 2534 C8				iny
  3651 2535 B9 EE 0A			lda adr.sfswap,y
  3652 2538 8D 05 D2			sta audc3
  3653 253B C8				iny
  3654 253C 8C C4 A2			sty swap_play
  3655
  3656 253F C0 13			cpy #18+1
  3657 2541 D0 05			bne @+
  3658
  3659 2543 A9 00			lda #0
  3660 2545 8D C4 A2			sta swap_play
  3661
  3662 				; ----------------------
  3663
  3664 2548 E6 14		@	inc rtclok+2
  3665
  3666 254A AD 2F 02 8D 00 D4		mva sdmctl dmactl
  3667
  3668 2550 AD 30 02 8D 02 D4 + 	mwa SDLSTL dlptr
  3669
  3670 255C AD C4 02 8D 16 D0 + 	:5 mva 708+# $d016+#
  3671
  3672 257A A9 E0			lda >CHARSET_RAM_ADDRESS
  3673 = 257B			.def	:JGPFirstCharset = *-1
  3674 257C 8D EF 19			sta JGPCharset
  3675
  3676 				;	lda #$48
  3677 				;	sta color1
  3678 				;	lda #$8c
  3679 				;	sta color2
  3680
  3681 257F A9 63			lda #128-29
  3682 2581 8D FC 19			sta dliCnt		; unit JPG2 ; procedure JGPDLI
  3683
  3684 2584 A5 14			lda rtclok+2
  3685 2586 29 08			and #8
  3686
  3687 2588 85 4D			sta atract
  3688
  3689 258A 4A 4A 4A			:3 lsr @
  3690 258D 48				pha
  3691 258E 18 6D 91 A2			add left_edge
  3692 2592 8D 04 D0			sta hposm0
  3693
  3694 2595 68				pla
  3695 2596 49 FF			eor #$ff
  3696 2598 6D 92 A2			adc right_edge
  3697 259B 8D 07 D0			sta hposm3
  3698
  3699 259E AD 9D A2			lda ScrollFreeze
  3700 25A1 0D 9E A2			ora ScrollFreeze+1
  3701 25A4 D0 06			bne @+
  3702
  3703 25A6 EE 98 A2 EE 98 A2		:2 inc speed_cnt
  3704 				@
  3705 25AC CE C0 25			dec tic
  3706 25AF 10 08			bpl toExit
  3707
  3708 25B1 A9 31 8D C0 25		mva #49 tic
  3709
  3710 25B6 20 53 24			jsr timeUpdate
  3711
  3712 25B9			toExit
  3713
  3714 25B9 A9 00			lda rA: #0
  3715 25BB A2 00			ldx rX: #0
  3716 25BD A0 00			ldy rY: #0
  3717
  3718 25BF 40				rti
  3719
  3720 25C0 31			tic	dta 49
  3721
  3722
  3723 25C1 40				rti						; ret
  3724 				.endl
  3725
  3726 25C2			.local	TILESFALLDOWN					; FUNCTION
  3727
  3728 				; optimize OK (block_attack.pas), line = 683
  3729
  3730 25C2 A9 00			lda #$00
  3731 25C4 8D 72 A3			sta RESULT
  3732
  3733 				; optimize OK (block_attack.pas), line = 685
  3734
  3735 25C7 A9 59			lda #$59
  3736 25C9 A8				tay
  3737
  3738 25CA			l_0A37
  3739 				; --- ForToDoCondition
  3740 25CA B9 80 06			lda adr.PLAYFIELD,y
  3741 25CD F0 1F			jeq l_0A5A
  3742
  3743 				; optimize OK (block_attack.pas), line = 687
  3744
  3745 25CF B9 86 06			lda adr.PLAYFIELD+$06,y
  3746 25D2 D0 1A			jne l_0A74
  3747
  3748 				; optimize OK (block_attack.pas), line = 688
  3749
  3750 25D4 B9 80 06			lda adr.PLAYFIELD,y
  3751 25D7 99 86 06			sta adr.PLAYFIELD+$06,y
  3752
  3753 				; optimize OK (block_attack.pas), line = 689
  3754
  3755 25DA A9 00			lda #$00
  3756 25DC 99 80 06			sta adr.PLAYFIELD,y
  3757
  3758 				; optimize OK (block_attack.pas), line = 691
  3759
  3760 25DF A9 01			lda #$01
  3761 25E1 8D 72 A3			sta RESULT
  3762
  3763 				; optimize OK (block_attack.pas), line = 693
  3764
  3765 25E4 AD C3 A2			lda MOVE_PLAY
  3766 25E7 D0 05			jne l_0AA2
  3767 25E9 A9 01			lda #$01
  3768 25EB 8D C3 A2			sta MOVE_PLAY
  3769 25EE			l_0AA2
  3770 25EE			l_0A74
  3771 25EE			l_0A5A
  3772
  3773 				; --- ForToDoEpilog
  3774 25EE 88				dey
  3775 25EF 10 D9			jpl l_0A37
  3776 25F1 8C 73 A3			sty K
  3777 25F4			@exit
  3778
  3779 				; ------------------------------------------------------------
  3780
  3781 = A372			RESULT	= DATAORIGIN+$018F
  3782 = A373			K	= DATAORIGIN+$0190
  3783
  3784 = A373			@VarData	= K
  3785 = 0001			@VarDataSize	= 1
  3786
  3787 25F4 60				rts						; ret
  3788 				.endl
  3789
  3790 25F5			.local	ONINVERS					; FUNCTION | INLINE
  3791
  3792 					.MACRO m@INLINE
  3793 					sta A
  3794 				
  3795 				; optimize OK (block_attack.pas), line = 703
  3796 				
  3797 					jeq l_0AD4x
  3798 					cmp #$05
  3799 					jne l_0AD4
  3800 				l_0AD4x
  3801 				
  3802 				; optimize OK (block_attack.pas), line = 704
  3803 				
  3804 					lda #$82
  3805 					jmp l_0AE2
  3806 				l_0AD4
  3807 				
  3808 				; optimize OK (block_attack.pas), line = 706
  3809 				
  3810 					lda #$02
  3811 				l_0AE2
  3812 					sta RESULT
  3813 				@exit
  3814 					.ENDM
  3815
  3816 				; ------------------------------------------------------------
  3817
  3818 = A374			A	= DATAORIGIN+$0191
  3819 = A375			RESULT	= DATAORIGIN+$0192
  3820
  3821 = A374			@VarData	= A
  3822 = 0001			@VarDataSize	= 1
  3823
  3824 				.endl
  3825
  3826 25F5			.local	TILECODE					; FUNCTION
  3827 25F5 8D 76 A3			sta A
  3828
  3829 				; optimize OK (block_attack.pas), line = 715
  3830
  3831 25F8 F0 2B			jeq l_0AFC
  3832
  3833 				; optimize FAIL (0, block_attack.pas), line = 717
  3834
  3835 25FA CE 76 A3			dec A
  3836
  3837 				; optimize OK (block_attack.pas), line = 719
  3838
  3839 25FD AD 76 A3			lda A
  3840 2600				.LOCAL +MAIN.ONINVERS
  3841 2600				m@INLINE
Macro: MAIN.ONINVERS.M@INLINE [Source: block_attack.a65]
     1 2600 8D 74 A3			sta A
     5 2603 F0 04			jeq l_0AD4x
     6 2605 C9 05			cmp #$05
     7 2607 D0 05			jne l_0AD4
     8 2609			l_0AD4x
    12 2609 A9 82			lda #$82
    13 260B 4C 10 26			jmp l_0AE2
    14 260E			l_0AD4
    18 260E A9 02			lda #$02
    19 2610			l_0AE2
    20 2610 8D 75 A3			sta RESULT
    21 2613			@exit
Source: block_attack.a65
  3842 					.ENDL
  3843 2613 AD 75 A3			lda ONINVERS.RESULT
  3844 2616 8D 78 A3			sta INV
  3845
  3846 				; optimize OK (block_attack.pas), line = 721
  3847
  3848 2619 AD 76 A3			lda A
  3849 261C 0A				asl @
  3850 261D 0A				asl @
  3851 261E 18 6D 78 A3			add INV
  3852 2622 8D 76 A3			sta A
  3853 2625			l_0AFC
  3854
  3855 				; optimize OK (block_attack.pas), line = 725
  3856
  3857 2625 AD 76 A3			lda A
  3858 2628 8D 77 A3			sta RESULT
  3859 262B			@exit
  3860
  3861 				; ------------------------------------------------------------
  3862
  3863 = A376			A	= DATAORIGIN+$0193
  3864 = A377			RESULT	= DATAORIGIN+$0194
  3865 = A378			INV	= DATAORIGIN+$0195
  3866
  3867 = A376			@VarData	= A
  3868 = 0002			@VarDataSize	= 2
  3869
  3870 262B 60				rts						; ret
  3871 				.endl
  3872
  3873 262C			.local	DRAWVERTICALJUMPTILES				; PROCEDURE
  3874
  3875 				; optimize OK (block_attack.pas), line = 735
  3876
  3877 262C AC AB A2 84 82 AC + 	mwy VRAM :bp2
  3878 2636 A0 00			ldy #$00
  3879 2638 B1 82			lda (:bp2),y
  3880 263A 85 9D			sta :STACKORIGIN+9
  3881 263C 98				tya
  3882 263D 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  3883 263F C8				iny
  3884 2640 AD 79 A3			lda X
  3885 2643 0A				asl @
  3886 2644 26 AE			rol :STACKORIGIN+STACKWIDTH+10
  3887 2646 0A				asl @
  3888 2647 26 AE			rol :STACKORIGIN+STACKWIDTH+10
  3889 2649 18 65 9D			add :STACKORIGIN+9
  3890 264C 85 9D			sta :STACKORIGIN+9
  3891 264E B1 82			lda (:bp2),y
  3892 2650 65 AE			adc :STACKORIGIN+STACKWIDTH+10
  3893 2652 85 E1			sta P+1
  3894 2654 A5 9D			lda :STACKORIGIN+9
  3895 2656 18 69 04			add #$04
  3896 2659 85 E0			sta P
  3897 265B 90 02			scc
  3898 265D E6 E1			inc P+1
  3899
  3900 				; optimize OK (block_attack.pas), line = 737
  3901
  3902 265F AD 83 A2			lda CNTROW
  3903 2662 F0 0B			jeq l_0B49
  3904 2664 A5 E0			lda P
  3905 2666 38 E9 28			sub #$28
  3906 2669 85 E0			sta P
  3907 266B B0 02			scs
  3908 266D C6 E1			dec P+1
  3909 266F			l_0B49
  3910
  3911 				; optimize OK (block_attack.pas), line = 739
  3912
  3913 266F AD 79 A3			lda X
  3914 2672 8D 7E A3			sta K
  3915
  3916 				; optimize OK (block_attack.pas), line = 741
  3917
  3918 2675 A9 0E			lda #$0E
  3919 2677 8D 7B A3			sta I
  3920
  3921 267A			l_0B5C
  3922 				; --- ForToDoCondition
  3923 267A AC 7E A3			ldy K
  3924 267D B9 80 06			lda adr.PLAYFIELD,y
  3925 2680 8D 7C A3			sta A
  3926
  3927 				; optimize OK (block_attack.pas), line = 745
  3928
  3929 2683 C9 01			cmp #$01
  3930 2685 90 73			jcc l_0B85
  3931
  3932 				; optimize OK (block_attack.pas), line = 746
  3933
  3934 2687 C9 07			cmp #$07
  3935 2689 B0 6F			jcs l_0B98
  3936
  3937 				; optimize FAIL (0, block_attack.pas), line = 748
  3938
  3939 268B CE 7C A3			dec A
  3940
  3941 				; optimize OK (block_attack.pas), line = 750
  3942
  3943 268E AD 7C A3			lda A
  3944 2691				.LOCAL +MAIN.ONINVERS
  3945 2691				m@INLINE
Macro: MAIN.ONINVERS.M@INLINE [Source: block_attack.a65]
     1 2691 8D 74 A3			sta A
     5 2694 F0 04			jeq l_0AD4x
     6 2696 C9 05			cmp #$05
     7 2698 D0 05			jne l_0AD4
     8 269A			l_0AD4x
    12 269A A9 82			lda #$82
    13 269C 4C A1 26			jmp l_0AE2
    14 269F			l_0AD4
    18 269F A9 02			lda #$02
    19 26A1			l_0AE2
    20 26A1 8D 75 A3			sta RESULT
    21 26A4			@exit
Source: block_attack.a65
  3946 					.ENDL
  3947 26A4 AD 75 A3			lda ONINVERS.RESULT
  3948 26A7 8D 7D A3			sta INV
  3949
  3950 				; optimize OK (block_attack.pas), line = 752
  3951
  3952 26AA AD 7A A3			lda C
  3953 26AD 29 0F			and #$0F
  3954 26AF C9 08			cmp #$08
  3955 26B1 90 09			jcc l_0BBA
  3956 26B3 AD 7C A3			lda A
  3957 26B6 18 69 06			add #$06
  3958 26B9 8D 7C A3			sta A
  3959 26BC			l_0BBA
  3960
  3961 				; optimize OK (block_attack.pas), line = 754
  3962
  3963 26BC AD 7C A3			lda A
  3964 26BF 0A				asl @
  3965 26C0 0A				asl @
  3966 26C1 18 6D 7D A3			add INV
  3967 26C5 8D 7C A3			sta A
  3968
  3969 				; optimize OK (block_attack.pas), line = 756
  3970
  3971 26C8 A0 00			ldy #$00
  3972 26CA 91 E0			sta (P),y
  3973
  3974 				; optimize OK (block_attack.pas), line = 757
  3975
  3976 26CC A0 28			ldy #$28
  3977 26CE 91 E0			sta (P),y
  3978
  3979 				; optimize FAIL (0, block_attack.pas), line = 759
  3980
  3981 26D0 EE 7C A3			inc A
  3982
  3983 				; optimize OK (block_attack.pas), line = 761
  3984
  3985 26D3 A0 01			ldy #$01
  3986 26D5 AD 7C A3			lda A
  3987 26D8 91 E0			sta (P),y
  3988
  3989 				; optimize OK (block_attack.pas), line = 762
  3990
  3991 26DA A0 29			ldy #$29
  3992 26DC 91 E0			sta (P),y
  3993
  3994 				; optimize FAIL (0, block_attack.pas), line = 764
  3995
  3996 26DE EE 7C A3			inc A
  3997
  3998 				; optimize OK (block_attack.pas), line = 766
  3999
  4000 26E1 A0 02			ldy #$02
  4001 26E3 AD 7C A3			lda A
  4002 26E6 91 E0			sta (P),y
  4003
  4004 				; optimize OK (block_attack.pas), line = 767
  4005
  4006 26E8 A0 2A			ldy #$2A
  4007 26EA 91 E0			sta (P),y
  4008
  4009 				; optimize FAIL (0, block_attack.pas), line = 769
  4010
  4011 26EC EE 7C A3			inc A
  4012
  4013 				; optimize OK (block_attack.pas), line = 771
  4014
  4015 26EF A0 03			ldy #$03
  4016 26F1 AD 7C A3			lda A
  4017 26F4 91 E0			sta (P),y
  4018
  4019 				; optimize OK (block_attack.pas), line = 772
  4020
  4021 26F6 A0 2B			ldy #$2B
  4022 26F8 91 E0			sta (P),y
  4023 26FA			l_0B98
  4024 26FA			l_0B85
  4025
  4026 				; optimize OK (block_attack.pas), line = 776
  4027
  4028 26FA A5 E0			lda P
  4029 26FC 18 69 50			add #$50
  4030 26FF 85 E0			sta P
  4031 2701 90 02			scc
  4032 2703 E6 E1			inc P+1
  4033
  4034 				; optimize OK (block_attack.pas), line = 778
  4035
  4036 2705 AD 7E A3			lda K
  4037 2708 18 69 06			add #$06
  4038 270B 8D 7E A3			sta K
  4039
  4040 				; --- ForToDoEpilog
  4041 270E CE 7B A3			dec I
  4042 2711 30 03 4C 7A 26		jpl l_0B5C
  4043 2716			l_0B6A
  4044
  4045 				; ------------------------------------------------------------
  4046
  4047 = A379			X	= DATAORIGIN+$0196
  4048 = A37A			C	= DATAORIGIN+$0197
  4049 = A37B			I	= DATAORIGIN+$0198
  4050 = A37C			A	= DATAORIGIN+$0199
  4051 = A37D			INV	= DATAORIGIN+$019A
  4052 = A37E			K	= DATAORIGIN+$019B
  4053 = 00E0			P	= $E0
  4054
  4055 = A379			@VarData	= X
  4056 = 0006			@VarDataSize	= 6
  4057
  4058 2716			@exit
  4059 					.ifdef @new
  4060 					lda <@VarData
  4061 					sta :ztmp
  4062 					lda >@VarData
  4063 					ldy #@VarDataSize-1
  4064 					jmp @FreeMem
  4065 					els
  4066 2716 60				rts						; ret
  4067 					eif
  4068 				.endl
  4069
  4070 2717			.local	DRAWHORIZONTALTILES				; PROCEDURE | REGISTER
  4071
  4072 				; optimize OK (block_attack.pas), line = 789
  4073
  4074 2717 A9 05			lda #$05
  4075 2719 8D 7F A3			sta I
  4076
  4077 271C			l_0C2A
  4078 				; --- ForToDoCondition
  4079 271C A4 8C			ldy K
  4080 271E B9 80 06			lda adr.PLAYFIELD,y
  4081 2721 8D 80 A3			sta A
  4082
  4083 				; optimize OK (block_attack.pas), line = 796
  4084
  4085 2724 D0 1D			jne l_0C53
  4086
  4087 				; optimize OK (block_attack.pas), line = 798
  4088
  4089 2726 A0 00			ldy #$00
  4090 2728 98				tya
  4091 2729 91 88			sta (P),y
  4092
  4093 				; optimize OK (block_attack.pas), line = 799
  4094
  4095 272B A0 01			ldy #$01
  4096 272D 91 88			sta (P),y
  4097
  4098 				; optimize OK (block_attack.pas), line = 800
  4099
  4100 272F C8				iny
  4101 2730 91 88			sta (P),y
  4102
  4103 				; optimize OK (block_attack.pas), line = 801
  4104
  4105 2732 C8				iny
  4106 2733 91 88			sta (P),y
  4107
  4108 				; optimize OK (block_attack.pas), line = 803
  4109
  4110 2735 A0 28			ldy #$28
  4111 2737 91 88			sta (P),y
  4112
  4113 				; optimize OK (block_attack.pas), line = 804
  4114
  4115 2739 C8				iny
  4116 273A 91 88			sta (P),y
  4117
  4118 				; optimize OK (block_attack.pas), line = 805
  4119
  4120 273C C8				iny
  4121 273D 91 88			sta (P),y
  4122
  4123 				; optimize OK (block_attack.pas), line = 806
  4124
  4125 273F C8				iny
  4126 2740 4C ED 27			jmp l_0C85
  4127 2743			l_0C53
  4128
  4129 				; optimize FAIL (0, block_attack.pas), line = 810
  4130
  4131 2743 CE 80 A3			dec A
  4132
  4133 				; optimize OK (block_attack.pas), line = 812
  4134
  4135 2746 AD 80 A3			lda A
  4136 2749 10 08			jpl l_0C9B
  4137 274B 29 7F			and #$7F
  4138 274D 18 69 0C			add #$0C
  4139 2750 8D 80 A3			sta A
  4140 2753			l_0C9B
  4141
  4142 				; optimize OK (block_attack.pas), line = 814
  4143
  4144 2753 AD 80 A3			lda A
  4145 2756				.LOCAL +MAIN.ONINVERS
  4146 2756				m@INLINE
Macro: MAIN.ONINVERS.M@INLINE [Source: block_attack.a65]
     1 2756 8D 74 A3			sta A
     5 2759 F0 04			jeq l_0AD4x
     6 275B C9 05			cmp #$05
     7 275D D0 05			jne l_0AD4
     8 275F			l_0AD4x
    12 275F A9 82			lda #$82
    13 2761 4C 66 27			jmp l_0AE2
    14 2764			l_0AD4
    18 2764 A9 02			lda #$02
    19 2766			l_0AE2
    20 2766 8D 75 A3			sta RESULT
    21 2769			@exit
Source: block_attack.a65
  4147 					.ENDL
  4148 2769 AD 75 A3			lda ONINVERS.RESULT
  4149 276C 8D 81 A3			sta INV
  4150
  4151 				; optimize OK (block_attack.pas), line = 816
  4152
  4153 276F AD 80 A3			lda A
  4154 2772 0A				asl @
  4155 2773 0A				asl @
  4156 2774 18 6D 81 A3			add INV
  4157 2778 8D 80 A3			sta A
  4158
  4159 				; optimize OK (block_attack.pas), line = 819
  4160
  4161 277B C9 46			cmp #$46
  4162 277D D0 3B			jne l_0CD5
  4163
  4164 				; optimize OK (block_attack.pas), line = 821
  4165
  4166 277F A0 00			ldy #$00
  4167 2781 91 88			sta (P),y
  4168
  4169 				; optimize OK (block_attack.pas), line = 822
  4170
  4171 2783 09 80			ora #$80
  4172 2785 A0 28			ldy #$28
  4173 2787 91 88			sta (P),y
  4174
  4175 				; optimize FAIL (0, block_attack.pas), line = 824
  4176
  4177 2789 EE 80 A3			inc A
  4178
  4179 				; optimize OK (block_attack.pas), line = 826
  4180
  4181 278C A0 01			ldy #$01
  4182 278E AD 80 A3			lda A
  4183 2791 91 88			sta (P),y
  4184
  4185 				; optimize OK (block_attack.pas), line = 827
  4186
  4187 2793 09 80			ora #$80
  4188 2795 A0 29			ldy #$29
  4189 2797 91 88			sta (P),y
  4190
  4191 				; optimize FAIL (0, block_attack.pas), line = 829
  4192
  4193 2799 EE 80 A3			inc A
  4194
  4195 				; optimize OK (block_attack.pas), line = 831
  4196
  4197 279C A0 02			ldy #$02
  4198 279E AD 80 A3			lda A
  4199 27A1 91 88			sta (P),y
  4200
  4201 				; optimize OK (block_attack.pas), line = 832
  4202
  4203 27A3 09 80			ora #$80
  4204 27A5 A0 2A			ldy #$2A
  4205 27A7 91 88			sta (P),y
  4206
  4207 				; optimize FAIL (0, block_attack.pas), line = 834
  4208
  4209 27A9 EE 80 A3			inc A
  4210
  4211 				; optimize OK (block_attack.pas), line = 836
  4212
  4213 27AC A0 03			ldy #$03
  4214 27AE AD 80 A3			lda A
  4215 27B1 91 88			sta (P),y
  4216
  4217 				; optimize OK (block_attack.pas), line = 837
  4218
  4219 27B3 09 80			ora #$80
  4220 27B5 A0 2B			ldy #$2B
  4221 27B7 4C ED 27			jmp l_0D33
  4222 27BA			l_0CD5
  4223
  4224 				; optimize OK (block_attack.pas), line = 841
  4225
  4226 27BA A0 00			ldy #$00
  4227 27BC AD 80 A3			lda A
  4228 27BF 91 88			sta (P),y
  4229
  4230 				; optimize OK (block_attack.pas), line = 842
  4231
  4232 27C1 A0 28			ldy #$28
  4233 27C3 91 88			sta (P),y
  4234
  4235 				; optimize FAIL (0, block_attack.pas), line = 844
  4236
  4237 27C5 EE 80 A3			inc A
  4238
  4239 				; optimize OK (block_attack.pas), line = 846
  4240
  4241 27C8 A0 01			ldy #$01
  4242 27CA AD 80 A3			lda A
  4243 27CD 91 88			sta (P),y
  4244
  4245 				; optimize OK (block_attack.pas), line = 847
  4246
  4247 27CF A0 29			ldy #$29
  4248 27D1 91 88			sta (P),y
  4249
  4250 				; optimize FAIL (0, block_attack.pas), line = 849
  4251
  4252 27D3 EE 80 A3			inc A
  4253
  4254 				; optimize OK (block_attack.pas), line = 851
  4255
  4256 27D6 A0 02			ldy #$02
  4257 27D8 AD 80 A3			lda A
  4258 27DB 91 88			sta (P),y
  4259
  4260 				; optimize OK (block_attack.pas), line = 852
  4261
  4262 27DD A0 2A			ldy #$2A
  4263 27DF 91 88			sta (P),y
  4264
  4265 				; optimize FAIL (0, block_attack.pas), line = 854
  4266
  4267 27E1 EE 80 A3			inc A
  4268
  4269 				; optimize OK (block_attack.pas), line = 856
  4270
  4271 27E4 A0 03			ldy #$03
  4272 27E6 AD 80 A3			lda A
  4273 27E9 91 88			sta (P),y
  4274
  4275 				; optimize OK (block_attack.pas), line = 857
  4276
  4277 27EB A0 2B			ldy #$2B
  4278 27ED			l_0C85
  4279 27ED			l_0D33
  4280 27ED 91 88			sta (P),y
  4281
  4282 				; optimize OK (block_attack.pas), line = 863
  4283
  4284 27EF A5 88			lda P
  4285 27F1 18 69 04			add #$04
  4286 27F4 85 88			sta P
  4287 27F6 90 02			scc
  4288 27F8 E6 89			inc P+1
  4289
  4290 				; optimize FAIL (0, block_attack.pas), line = 865
  4291
  4292 27FA E6 8C			inc K
  4293
  4294 				; --- ForToDoEpilog
  4295 27FC CE 7F A3			dec I
  4296 27FF 30 03 4C 1C 27		jpl l_0C2A
  4297 2804			l_0C38
  4298
  4299 				; ------------------------------------------------------------
  4300
  4301 = 0088			P	= :EDX
  4302 = 008C			K	= :ECX
  4303 = A37F			I	= DATAORIGIN+$019C
  4304 = A380			A	= DATAORIGIN+$019D
  4305 = A381			INV	= DATAORIGIN+$019E
  4306
  4307 = A37F			@VarData	= I
  4308 = 0003			@VarDataSize	= 3
  4309
  4310 2804			@exit
  4311 					.ifdef @new
  4312 					lda <@VarData
  4313 					sta :ztmp
  4314 					lda >@VarData
  4315 					ldy #@VarDataSize-1
  4316 					jmp @FreeMem
  4317 					els
  4318 2804 60				rts						; ret
  4319 					eif
  4320 				.endl
  4321
  4322 2805			.local	SFX_MATCH					; PROCEDURE
  4323
  4324 				; optimize OK (block_attack.pas), line = 874
  4325
  4326 2805 AD 8E A2			lda MATCH
  4327 2808 8D 82 A3			sta @CASETMP_0007
  4328 280B D0 13			jne l_0D90
  4329 				@
  4330
  4331 				; -------------------  ASM Block 00000138  -------------------
  4332
  4333 280D A9 A2				lda <adr.match1
  4334 280F 8D F1 24				sta NMI.sfx_match_audf
  4335 2812 8D F8 24				sta NMI.sfx_match_audc
  4336
  4337 2815 A9 0A				lda >adr.match1
  4338 2817 8D F2 24				sta NMI.sfx_match_audf+1
  4339 281A 8D F9 24				sta NMI.sfx_match_audc+1
  4340 					
  4341 281D 4C 47 28			jmp a_0007
  4342 2820			l_0D90
  4343 2820 C9 01			cmp #$01
  4344 2822 D0 13			jne l_0D99
  4345 				@
  4346
  4347 				; -------------------  ASM Block 00000139  -------------------
  4348
  4349 2824 A9 B5				lda <adr.match2
  4350 2826 8D F1 24				sta NMI.sfx_match_audf
  4351 2829 8D F8 24				sta NMI.sfx_match_audc
  4352
  4353 282C A9 0A				lda >adr.match2
  4354 282E 8D F2 24				sta NMI.sfx_match_audf+1
  4355 2831 8D F9 24				sta NMI.sfx_match_audc+1
  4356 					
  4357 2834 4C 47 28			jmp a_0007
  4358 2837			l_0D99
  4359
  4360 				; -------------------  ASM Block 00000140  -------------------
  4361
  4362 2837 A9 C8				lda <adr.match3
  4363 2839 8D F1 24				sta NMI.sfx_match_audf
  4364 283C 8D F8 24				sta NMI.sfx_match_audc
  4365
  4366 283F A9 0A				lda >adr.match3
  4367 2841 8D F2 24				sta NMI.sfx_match_audf+1
  4368 2844 8D F9 24				sta NMI.sfx_match_audc+1
  4369 					
  4370 2847			a_0007
  4371
  4372 				; optimize FAIL (0, block_attack.pas), line = 911
  4373
  4374 2847 EE 8E A2			inc MATCH
  4375
  4376 				; optimize OK (block_attack.pas), line = 913
  4377
  4378 284A A9 01			lda #$01
  4379 284C 8D C2 A2			sta MATCH_PLAY
  4380
  4381 				; ------------------------------------------------------------
  4382
  4383 = A382			@CASETMP_0007	= DATAORIGIN+$019F
  4384
  4385 = A382			@VarData	= @CASETMP_0007
  4386 = 0001			@VarDataSize	= 1
  4387
  4388 284F			@exit
  4389 					.ifdef @new
  4390 					lda <@VarData
  4391 					sta :ztmp
  4392 					lda >@VarData
  4393 					ldy #@VarDataSize-1
  4394 					jmp @FreeMem
  4395 					els
  4396 284F 60				rts						; ret
  4397 					eif
  4398 				.endl
  4399
  4400 2850			.local	UPDATETILES					; PROCEDURE
  4401
  4402 				; optimize OK (block_attack.pas), line = 923
  4403
  4404 2850 A9 00			lda #$00
  4405 2852 8D 8D A2			sta TICK
  4406
  4407 				; optimize OK (block_attack.pas), line = 925
  4408
  4409 2855 AC AB A2 84 82 AC + 	mwy VRAM :bp2
  4410 285F A0 00			ldy #$00
  4411 2861 B1 82			lda (:bp2),y
  4412 2863 C8				iny
  4413 2864 18 69 04			add #$04
  4414 2867 85 E0			sta P
  4415 2869 B1 82			lda (:bp2),y
  4416 286B 69 00			adc #$00
  4417 286D 85 E1			sta P+1
  4418
  4419 				; optimize OK (block_attack.pas), line = 927
  4420
  4421 286F AD 83 A2			lda CNTROW
  4422 2872 F0 0B			jeq l_0DCA
  4423 2874 A5 E0			lda P
  4424 2876 38 E9 28			sub #$28
  4425 2879 85 E0			sta P
  4426 287B B0 02			scs
  4427 287D C6 E1			dec P+1
  4428 287F			l_0DCA
  4429
  4430 				; optimize OK (block_attack.pas), line = 929
  4431
  4432 287F A9 00			lda #$00
  4433 2881 8D 84 A3			sta K
  4434
  4435 				; optimize OK (block_attack.pas), line = 931
  4436
  4437 2884 A9 0F			lda #$0F
  4438 2886 8D 83 A3			sta J
  4439
  4440 2889			l_0DDB
  4441 				; --- ForToDoCondition
  4442 2889 A5 E0			lda P
  4443 288B 85 88			sta DRAWHORIZONTALTILES.P
  4444 288D A5 E1			lda P+1
  4445 288F 85 89			sta DRAWHORIZONTALTILES.P+1
  4446 2891 AD 84 A3			lda K
  4447 2894 85 8C			sta DRAWHORIZONTALTILES.K
  4448 2896 20 17 27			jsr DRAWHORIZONTALTILES
  4449
  4450 				; optimize OK (block_attack.pas), line = 935
  4451
  4452 2899 AD 84 A3			lda K
  4453 289C 18 69 06			add #$06
  4454 289F 8D 84 A3			sta K
  4455
  4456 				; optimize OK (block_attack.pas), line = 936
  4457
  4458 28A2 A5 E0			lda P
  4459 28A4 18 69 50			add #$50
  4460 28A7 85 E0			sta P
  4461 28A9 90 02			scc
  4462 28AB E6 E1			inc P+1
  4463
  4464 				; --- ForToDoEpilog
  4465 28AD CE 83 A3			dec J
  4466 28B0 10 D7			jpl l_0DDB
  4467 28B2			l_0DE9
  4468
  4469 				; ------------------------------------------------------------
  4470
  4471 = 00E0			P	= $E0
  4472 = A383			J	= DATAORIGIN+$01A0
  4473 = A384			K	= DATAORIGIN+$01A1
  4474
  4475 = A383			@VarData	= J
  4476 = 0002			@VarDataSize	= 2
  4477
  4478 28B2			@exit
  4479 					.ifdef @new
  4480 					lda <@VarData
  4481 					sta :ztmp
  4482 					lda >@VarData
  4483 					ldy #@VarDataSize-1
  4484 					jmp @FreeMem
  4485 					els
  4486 28B2 60				rts						; ret
  4487 					eif
  4488 				.endl
  4489
  4490 28B3			.local	FINDTHREEINROW					; FUNCTION
  4491
  4492 28B3 4C 37 29			jmp l_0DFA
  4493
  4494 28B6			.local	HORIZONTAL					; PROCEDURE
  4495 28B6 8D 88 A3			sta N
  4496
  4497 				; optimize OK (block_attack.pas), line = 954
  4498
  4499 28B9 A0 00			ldy #$00
  4500 28BB B1 E0			lda (P),y
  4501 28BD 29 7F			and #$7F
  4502 28BF 8D 89 A3			sta A
  4503
  4504 				; optimize OK (block_attack.pas), line = 956
  4505
  4506 28C2 C9 07			cmp #$07
  4507 28C4 B0 2F			jcs l_0E1A
  4508
  4509 				; optimize OK (block_attack.pas), line = 957
  4510
  4511 28C6 C9 01			cmp #$01
  4512 28C8 90 2B			jcc l_0E2D
  4513
  4514 				; optimize OK (block_attack.pas), line = 958
  4515
  4516 28CA C8				iny
  4517 28CB B1 E0			lda (P),y
  4518 28CD 29 7F			and #$7F
  4519 28CF CD 89 A3			cmp A
  4520 28D2 D0 21			jne l_0E47
  4521
  4522 				; optimize OK (block_attack.pas), line = 959
  4523
  4524 28D4 B1 E0			lda (P),y
  4525 28D6 C8				iny
  4526 28D7 51 E0			eor (P),y
  4527 28D9 29 7F			and #$7F
  4528 28DB D0 18			jne l_0E66
  4529
  4530 				; optimize OK (block_attack.pas), line = 961
  4531
  4532 28DD AD 89 A3			lda A
  4533 28E0 09 80			ora #$80
  4534 28E2 A0 00			ldy #$00
  4535 28E4 91 E0			sta (P),y
  4536
  4537 				; optimize OK (block_attack.pas), line = 962
  4538
  4539 28E6 C8				iny
  4540 28E7 91 E0			sta (P),y
  4541
  4542 				; optimize OK (block_attack.pas), line = 963
  4543
  4544 28E9 88				dey
  4545 28EA B1 E0			lda (P),y
  4546 28EC A0 02			ldy #$02
  4547 28EE 91 E0			sta (P),y
  4548
  4549 				; optimize OK (block_attack.pas), line = 965
  4550
  4551 28F0 A9 01			lda #$01
  4552 28F2 8D 87 A3			sta OK
  4553 28F5			l_0E66
  4554 28F5			l_0E47
  4555 28F5			l_0E2D
  4556 28F5			l_0E1A
  4557
  4558 				; ------------------------------------------------------------
  4559
  4560 = A388			N	= DATAORIGIN+$01A5
  4561 = A389			A	= DATAORIGIN+$01A6
  4562
  4563 = A388			@VarData	= N
  4564 = 0002			@VarDataSize	= 2
  4565
  4566 28F5			@exit
  4567 					.ifdef @new
  4568 					lda <@VarData
  4569 					sta :ztmp
  4570 					lda >@VarData
  4571 					ldy #@VarDataSize-1
  4572 					jmp @FreeMem
  4573 					els
  4574 28F5 60				rts						; ret
  4575 					eif
  4576 				.endl
  4577
  4578 28F6			.local	VERTICAL					; PROCEDURE
  4579
  4580 				; optimize OK (block_attack.pas), line = 976
  4581
  4582 28F6 A0 00			ldy #$00
  4583 28F8 B1 E0			lda (P),y
  4584 28FA 29 7F			and #$7F
  4585 28FC 8D 8A A3			sta A
  4586
  4587 				; optimize OK (block_attack.pas), line = 978
  4588
  4589 28FF C9 07			cmp #$07
  4590 2901 B0 33			jcs l_0EAF
  4591
  4592 				; optimize OK (block_attack.pas), line = 979
  4593
  4594 2903 C9 01			cmp #$01
  4595 2905 90 2F			jcc l_0EC2
  4596
  4597 				; optimize OK (block_attack.pas), line = 980
  4598
  4599 2907 A0 06			ldy #$06
  4600 2909 B1 E0			lda (P),y
  4601 290B 29 7F			and #$7F
  4602 290D CD 8A A3			cmp A
  4603 2910 D0 24			jne l_0EDC
  4604
  4605 				; optimize OK (block_attack.pas), line = 981
  4606
  4607 2912 B1 E0			lda (P),y
  4608 2914 A0 0C			ldy #$0C
  4609 2916 51 E0			eor (P),y
  4610 2918 29 7F			and #$7F
  4611 291A D0 1A			jne l_0EFB
  4612
  4613 				; optimize OK (block_attack.pas), line = 983
  4614
  4615 291C AD 8A A3			lda A
  4616 291F 09 80			ora #$80
  4617 2921 A0 00			ldy #$00
  4618 2923 91 E0			sta (P),y
  4619
  4620 				; optimize OK (block_attack.pas), line = 984
  4621
  4622 2925 A0 06			ldy #$06
  4623 2927 91 E0			sta (P),y
  4624
  4625 				; optimize OK (block_attack.pas), line = 985
  4626
  4627 2929 A0 00			ldy #$00
  4628 292B B1 E0			lda (P),y
  4629 292D A0 0C			ldy #$0C
  4630 292F 91 E0			sta (P),y
  4631
  4632 				; optimize OK (block_attack.pas), line = 987
  4633
  4634 2931 A9 01			lda #$01
  4635 2933 8D 87 A3			sta OK
  4636 2936			l_0EFB
  4637 2936			l_0EDC
  4638 2936			l_0EC2
  4639 2936			l_0EAF
  4640
  4641 				; ------------------------------------------------------------
  4642
  4643 = A38A			A	= DATAORIGIN+$01A7
  4644
  4645 = A38A			@VarData	= A
  4646 = 0001			@VarDataSize	= 1
  4647
  4648 2936			@exit
  4649 					.ifdef @new
  4650 					lda <@VarData
  4651 					sta :ztmp
  4652 					lda >@VarData
  4653 					ldy #@VarDataSize-1
  4654 					jmp @FreeMem
  4655 					els
  4656 2936 60				rts						; ret
  4657 					eif
  4658 				.endl
  4659 2937			l_0DFA
  4660
  4661 				; optimize OK (block_attack.pas), line = 996
  4662
  4663 2937 A9 00			lda #$00
  4664 2939 8D 87 A3			sta OK
  4665
  4666 				; optimize OK (block_attack.pas), line = 998
  4667
  4668 293C AD 6B A1			lda PLAYFIELD
  4669 293F 85 E2			sta Q
  4670 2941 AD 6C A1			lda PLAYFIELD+1
  4671 2944 85 E3			sta Q+1
  4672
  4673 				; optimize OK (block_attack.pas), line = 1000
  4674
  4675 2946 A9 0E			lda #$0E
  4676 2948 8D 86 A3			sta I
  4677
  4678 294B			l_0F36
  4679 				; --- ForToDoCondition
  4680 294B A5 E2			lda Q
  4681 294D 85 E0			sta P
  4682 294F A5 E3			lda Q+1
  4683 2951 85 E1			sta P+1
  4684
  4685 				; optimize OK (block_attack.pas), line = 1003
  4686
  4687 2953 A9 00			lda #$00
  4688 2955 20 B6 28			jsr HORIZONTAL
  4689
  4690 				; optimize FAIL (0, block_attack.pas), line = 1004
  4691
  4692 2958 E6 E0			inc P
  4693 295A D0 02			sne
  4694 295C E6 E1			inc P+1
  4695 295E A9 01			lda #$01
  4696 2960 20 B6 28			jsr HORIZONTAL
  4697
  4698 				; optimize FAIL (0, block_attack.pas), line = 1005
  4699
  4700 2963 E6 E0			inc P
  4701 2965 D0 02			sne
  4702 2967 E6 E1			inc P+1
  4703 2969 A9 02			lda #$02
  4704 296B 20 B6 28			jsr HORIZONTAL
  4705
  4706 				; optimize FAIL (0, block_attack.pas), line = 1006
  4707
  4708 296E E6 E0			inc P
  4709 2970 D0 02			sne
  4710 2972 E6 E1			inc P+1
  4711 2974 A9 03			lda #$03
  4712 2976 20 B6 28			jsr HORIZONTAL
  4713
  4714 				; optimize OK (block_attack.pas), line = 1008
  4715
  4716 2979 A5 E2			lda Q
  4717 297B 18 69 06			add #$06
  4718 297E 85 E2			sta Q
  4719 2980 90 02			scc
  4720 2982 E6 E3			inc Q+1
  4721
  4722 				; --- ForToDoEpilog
  4723 2984 CE 86 A3			dec I
  4724 2987 10 C2			jpl l_0F36
  4725 2989			l_0F44
  4726
  4727 				; optimize OK (block_attack.pas), line = 1012
  4728
  4729 2989 AD 6B A1			lda PLAYFIELD
  4730 298C 85 E2			sta Q
  4731 298E AD 6C A1			lda PLAYFIELD+1
  4732 2991 85 E3			sta Q+1
  4733
  4734 				; optimize OK (block_attack.pas), line = 1014
  4735
  4736 2993 A9 0C			lda #$0C
  4737 2995 8D 86 A3			sta I
  4738
  4739 2998			l_0F71
  4740 				; --- ForToDoCondition
  4741 2998 A5 E2			lda Q
  4742 299A 85 E0			sta P
  4743 299C A5 E3			lda Q+1
  4744 299E 85 E1			sta P+1
  4745
  4746 				; optimize FAIL ('VERTICAL', block_attack.pas), line = 1018
  4747
  4748 29A0 20 F6 28			jsr VERTICAL
  4749 29A3 E6 E0			inc P
  4750 29A5 D0 02			sne
  4751 29A7 E6 E1			inc P+1
  4752
  4753 				; optimize FAIL ('VERTICAL', block_attack.pas), line = 1019
  4754
  4755 29A9 20 F6 28			jsr VERTICAL
  4756 29AC E6 E0			inc P
  4757 29AE D0 02			sne
  4758 29B0 E6 E1			inc P+1
  4759
  4760 				; optimize FAIL ('VERTICAL', block_attack.pas), line = 1020
  4761
  4762 29B2 20 F6 28			jsr VERTICAL
  4763 29B5 E6 E0			inc P
  4764 29B7 D0 02			sne
  4765 29B9 E6 E1			inc P+1
  4766
  4767 				; optimize FAIL ('VERTICAL', block_attack.pas), line = 1021
  4768
  4769 29BB 20 F6 28			jsr VERTICAL
  4770 29BE E6 E0			inc P
  4771 29C0 D0 02			sne
  4772 29C2 E6 E1			inc P+1
  4773
  4774 				; optimize FAIL ('VERTICAL', block_attack.pas), line = 1022
  4775
  4776 29C4 20 F6 28			jsr VERTICAL
  4777 29C7 E6 E0			inc P
  4778 29C9 D0 02			sne
  4779 29CB E6 E1			inc P+1
  4780
  4781 				; optimize FAIL ('VERTICAL', block_attack.pas), line = 1023
  4782
  4783 29CD 20 F6 28			jsr VERTICAL
  4784
  4785 				; optimize OK (block_attack.pas), line = 1025
  4786
  4787 29D0 A5 E2			lda Q
  4788 29D2 18 69 06			add #$06
  4789 29D5 85 E2			sta Q
  4790 29D7 90 02			scc
  4791 29D9 E6 E3			inc Q+1
  4792
  4793 				; --- ForToDoEpilog
  4794 29DB CE 86 A3			dec I
  4795 29DE 10 B8			jpl l_0F71
  4796 29E0			l_0F7F
  4797
  4798 				; optimize OK (block_attack.pas), line = 1029
  4799
  4800 29E0 AD 87 A3			lda OK
  4801 29E3 F0 03			jeq l_0FB0
  4802 29E5 20 50 28			jsr UPDATETILES
  4803 29E8			l_0FB0
  4804
  4805 				; optimize OK (block_attack.pas), line = 1031
  4806
  4807 29E8 AD 87 A3			lda OK
  4808 29EB 8D 85 A3			sta RESULT
  4809 29EE			@exit
  4810
  4811 				; ------------------------------------------------------------
  4812
  4813 = A385			RESULT	= DATAORIGIN+$01A2
  4814 = A386			I	= DATAORIGIN+$01A3
  4815 = A387			OK	= DATAORIGIN+$01A4
  4816 = 00E0			P	= $E0
  4817 = 00E2			Q	= $E2
  4818
  4819 = A386			@VarData	= I
  4820 = 0002			@VarDataSize	= 2
  4821
  4822 29EE 60				rts						; ret
  4823 				.endl
  4824
  4825 29EF			.local	DOSCORE						; FUNCTION
  4826
  4827 				; optimize OK (block_attack.pas), line = 1040
  4828
  4829 29EF A9 00			lda #$00
  4830 29F1 8D 8B A3			sta RESULT
  4831
  4832 				; optimize OK (block_attack.pas), line = 1042
  4833
  4834 29F4 AD C2 A2			lda MATCH_PLAY
  4835 29F7 F0 03			jeq l_0FCE
  4836 29F9 4C A5 2A			jmp @exit
  4837 29FC			l_0FCE
  4838
  4839 				; optimize FAIL (0, block_attack.pas), line = 1044
  4840
  4841 29FC EE 85 A2			inc CNTFOUND
  4842
  4843 				; optimize OK (block_attack.pas), line = 1046
  4844
  4845 29FF AD 85 A2			lda CNTFOUND
  4846 2A02 C9 10			cmp #$10
  4847 2A04 90 62			jcc l_0FE7
  4848
  4849 				; optimize OK (block_attack.pas), line = 1048
  4850
  4851 2A06 A9 00			lda #$00
  4852 2A08 8D 8C A3			sta K
  4853
  4854 2A0B			l_0FF1
  4855 				; --- ForToDoCondition
  4856 2A0B AC 8C A3			ldy K
  4857 2A0E C0 5A			cpy #$5A
  4858 2A10 B0 46			jcs l_0FFF
  4859
  4860 				; optimize OK (block_attack.pas), line = 1049
  4861
  4862 2A12 B9 80 06			lda adr.PLAYFIELD,y
  4863 2A15 10 3C			jpl l_1014
  4864
  4865 				; optimize OK (block_attack.pas), line = 1051
  4866
  4867 2A17 A9 00			lda #$00
  4868 2A19 99 80 06			sta adr.PLAYFIELD,y
  4869
  4870 				; optimize OK (block_attack.pas), line = 1053
  4871
  4872 2A1C A9 0D			lda #$0D
  4873 2A1E 8D 85 A2			sta CNTFOUND
  4874
  4875 				; optimize FAIL (0, block_attack.pas), line = 1055
  4876
  4877 2A21 EE 88 A2			inc FOUND
  4878
  4879 				; optimize OK (block_attack.pas), line = 1057
  4880
  4881 2A24 AD 9F A2			lda SCORE
  4882 2A27 18 69 05			add #$05
  4883 2A2A 8D 9F A2			sta SCORE
  4884 2A2D AD A0 A2			lda SCORE+1
  4885 2A30 69 00			adc #$00
  4886 2A32 8D A0 A2			sta SCORE+1
  4887 2A35 AD A1 A2			lda SCORE+2
  4888 2A38 69 00			adc #$00
  4889 2A3A 8D A1 A2			sta SCORE+2
  4890 2A3D AD A2 A2			lda SCORE+3
  4891 2A40 69 00			adc #$00
  4892 2A42 8D A2 A2			sta SCORE+3
  4893
  4894 				; optimize FAIL ('SFX_MATCH', block_attack.pas), line = 1059
  4895
  4896 2A45 20 05 28			jsr SFX_MATCH
  4897
  4898 				; optimize OK (block_attack.pas), line = 1061
  4899
  4900 2A48 A9 01			lda #$01
  4901 2A4A 8D BD A2			sta MONSTER_SCORE
  4902
  4903 				; optimize FAIL ('PRINTSCORE', block_attack.pas), line = 1063
  4904
  4905 2A4D 20 A9 20			jsr PRINTSCORE
  4906 2A50 4C A5 2A			jmp @exit
  4907 2A53			l_1014
  4908
  4909 				; --- ForToDoEpilog
  4910 2A53 EE 8C A3			inc K
  4911 2A56 D0 B3			jne l_0FF1
  4912 2A58			l_0FFF
  4913
  4914 				; optimize OK (block_attack.pas), line = 1069
  4915
  4916 2A58 A9 00			lda #$00
  4917 2A5A 8D 8E A2			sta MATCH
  4918
  4919 				; optimize OK (block_attack.pas), line = 1071
  4920
  4921 2A5D 8D B9 A2			sta FOUNDTHREE
  4922
  4923 				; optimize OK (block_attack.pas), line = 1072
  4924
  4925 2A60 8D 85 A2			sta CNTFOUND
  4926
  4927 				; optimize OK (block_attack.pas), line = 1074
  4928
  4929 2A63 A9 01			lda #$01
  4930 2A65 8D 8B A3			sta RESULT
  4931 2A68			l_0FE7
  4932
  4933 				; optimize OK (block_attack.pas), line = 1079
  4934
  4935 2A68 AD A2 A2			lda SCORE+3
  4936 2A6B CD 80 A2			cmp HISCORE+3
  4937 2A6E D0 16			bne @+
  4938 2A70 AD A1 A2			lda SCORE+2
  4939 2A73 CD 7F A2			cmp HISCORE+2
  4940 2A76 D0 0E			bne @+
  4941 2A78 AD A0 A2			lda SCORE+1
  4942 2A7B CD 7E A2			cmp HISCORE+1
  4943 2A7E D0 06			bne @+
  4944 2A80 AD 9F A2			lda SCORE
  4945 2A83 CD 7D A2			cmp HISCORE
  4946 				@
  4947 2A86 90 1D			jcc l_1054
  4948 2A88 F0 1B			jeq l_1054
  4949
  4950 				; optimize OK (block_attack.pas), line = 1081
  4951
  4952 2A8A AD 9F A2			lda SCORE
  4953 2A8D 8D 7D A2			sta HISCORE
  4954 2A90 AD A0 A2			lda SCORE+1
  4955 2A93 8D 7E A2			sta HISCORE+1
  4956 2A96 AD A1 A2			lda SCORE+2
  4957 2A99 8D 7F A2			sta HISCORE+2
  4958 2A9C AD A2 A2			lda SCORE+3
  4959 2A9F 8D 80 A2			sta HISCORE+3
  4960
  4961 				; optimize FAIL ('PRINTHISCORE', block_attack.pas), line = 1083
  4962
  4963 2AA2 20 D1 21			jsr PRINTHISCORE
  4964 2AA5			l_1054
  4965 2AA5			@exit
  4966
  4967 				; ------------------------------------------------------------
  4968
  4969 = A38B			RESULT	= DATAORIGIN+$01A8
  4970 = A38C			K	= DATAORIGIN+$01A9
  4971
  4972 = A38C			@VarData	= K
  4973 = 0001			@VarDataSize	= 1
  4974
  4975 2AA5 60				rts						; ret
  4976 				.endl
  4977
  4978 2AA6			.local	PRINTALLSCORES					; PROCEDURE
  4979
  4980 				; optimize FAIL ('PRINTSCORE', block_attack.pas), line = 1093
  4981
  4982 2AA6 20 A9 20			jsr PRINTSCORE
  4983
  4984 				; optimize OK (block_attack.pas), line = 1095
  4985
  4986 2AA9 AD A2 A2			lda SCORE+3
  4987 2AAC CD 80 A2			cmp HISCORE+3
  4988 2AAF D0 16			bne @+
  4989 2AB1 AD A1 A2			lda SCORE+2
  4990 2AB4 CD 7F A2			cmp HISCORE+2
  4991 2AB7 D0 0E			bne @+
  4992 2AB9 AD A0 A2			lda SCORE+1
  4993 2ABC CD 7E A2			cmp HISCORE+1
  4994 2ABF D0 06			bne @+
  4995 2AC1 AD 9F A2			lda SCORE
  4996 2AC4 CD 7D A2			cmp HISCORE
  4997 				@
  4998 2AC7 90 1D			jcc l_1071
  4999 2AC9 F0 1B			jeq l_1071
  5000
  5001 				; optimize OK (block_attack.pas), line = 1096
  5002
  5003 2ACB AD 9F A2			lda SCORE
  5004 2ACE 8D 7D A2			sta HISCORE
  5005 2AD1 AD A0 A2			lda SCORE+1
  5006 2AD4 8D 7E A2			sta HISCORE+1
  5007 2AD7 AD A1 A2			lda SCORE+2
  5008 2ADA 8D 7F A2			sta HISCORE+2
  5009 2ADD AD A2 A2			lda SCORE+3
  5010 2AE0 8D 80 A2			sta HISCORE+3
  5011
  5012 				; optimize FAIL ('PRINTHISCORE', block_attack.pas), line = 1097
  5013
  5014 2AE3 20 D1 21			jsr PRINTHISCORE
  5015 2AE6			l_1071
  5016 2AE6			@exit
  5017 					.ifdef @new
  5018 					lda <@VarData
  5019 					sta :ztmp
  5020 					lda >@VarData
  5021 					ldy #@VarDataSize-1
  5022 					jmp @FreeMem
  5023 					els
  5024 2AE6 60				rts						; ret
  5025 					eif
  5026 				.endl
  5027
  5028 2AE7			.local	COMBOSCORE					; PROCEDURE
  5029
  5030 				; optimize OK (block_attack.pas), line = 1106
  5031
  5032 2AE7 AD 88 A2			lda FOUND
  5033 2AEA 4A				lsr @
  5034 2AEB 4A				lsr @
  5035 2AEC 18 69 01			add #$01
  5036 2AEF 8D 8D A3			sta TMP
  5037
  5038 				; optimize OK (block_attack.pas), line = 1108
  5039
  5040 2AF2 AD 9E A2			lda SCROLLFREEZE+1
  5041 2AF5 C9 FF			cmp #$FF
  5042 2AF7 B0 1C			jcs l_109C
  5043 2AF9 AD 8D A3			lda TMP
  5044 2AFC 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  5045 2AFE A9 00			lda #$00
  5046 2B00 46 AD			lsr :STACKORIGIN+STACKWIDTH+9
  5047 2B02 6A				ror @
  5048 2B03 46 AD			lsr :STACKORIGIN+STACKWIDTH+9
  5049 2B05 6A				ror @
  5050 2B06 18 6D 9D A2			add SCROLLFREEZE
  5051 2B0A 8D 9D A2			sta SCROLLFREEZE
  5052 2B0D AD 9E A2			lda SCROLLFREEZE+1
  5053 2B10 65 AD			adc :STACKORIGIN+STACKWIDTH+9
  5054 2B12 8D 9E A2			sta SCROLLFREEZE+1
  5055 2B15			l_109C
  5056
  5057 				; optimize OK (block_attack.pas), line = 1110
  5058
  5059 2B15 AD 8D A3			lda TMP
  5060 2B18 0A				asl @
  5061 2B19 0A				asl @
  5062 2B1A 18 6D 8D A3			add TMP
  5063 2B1E 8D 8D A3			sta TMP
  5064
  5065 				; optimize OK (block_attack.pas), line = 1111
  5066
  5067 2B21 AD 9F A2			lda SCORE
  5068 2B24 18 6D 8D A3			add TMP
  5069 2B28 8D 9F A2			sta SCORE
  5070 2B2B AD A0 A2			lda SCORE+1
  5071 2B2E 69 00			adc #$00
  5072 2B30 8D A0 A2			sta SCORE+1
  5073 2B33 AD A1 A2			lda SCORE+2
  5074 2B36 69 00			adc #$00
  5075 2B38 8D A1 A2			sta SCORE+2
  5076 2B3B AD A2 A2			lda SCORE+3
  5077 2B3E 69 00			adc #$00
  5078 2B40 8D A2 A2			sta SCORE+3
  5079
  5080 				; optimize FAIL ('PRINTALLSCORES', block_attack.pas), line = 1113
  5081
  5082 2B43 20 A6 2A			jsr PRINTALLSCORES
  5083
  5084 				; ------------------------------------------------------------
  5085
  5086 = A38D			TMP	= DATAORIGIN+$01AA
  5087
  5088 = A38D			@VarData	= TMP
  5089 = 0001			@VarDataSize	= 1
  5090
  5091 2B46			@exit
  5092 					.ifdef @new
  5093 					lda <@VarData
  5094 					sta :ztmp
  5095 					lda >@VarData
  5096 					ldy #@VarDataSize-1
  5097 					jmp @FreeMem
  5098 					els
  5099 2B46 60				rts						; ret
  5100 					eif
  5101 				.endl
  5102
  5103 2B47			.local	NEWROWWITHRANDOMSET				; PROCEDURE
  5104
  5105 				; optimize OK (block_attack.pas), line = 1123
  5106
  5107 2B47 A9 FF			lda #$FF
  5108 2B49 8D 90 A3			sta A_
  5109
  5110 				; optimize OK (block_attack.pas), line = 1125
  5111
  5112 2B4C A9 05			lda #$05
  5113 2B4E 8D 8E A3			sta I
  5114
  5115 2B51			l_10C5
  5116 				; --- ForToDoCondition
  5117 2B51 A9 06			lda #$06
  5118 2B53 20 7E 19			jsr SYSTEM.RANDOM_0170
  5119 2B56 AD F7 A1			lda SYSTEM.RANDOM_0170.RESULT
  5120 2B59 8D 8F A3			sta A
  5121
  5122 				; optimize OK (block_attack.pas), line = 1129
  5123
  5124 2B5C AD 8E A3			lda I
  5125 2B5F C9 05			cmp #$05
  5126 2B61 B0 21			jcs l_10EA
  5127
  5128 				; --- WhileProlog
  5129 2B63 4C 71 2B			jmp l_10ED
  5130 2B66			l_10EE
  5131
  5132 				; optimize OK (block_attack.pas), line = 1130
  5133
  5134 2B66 A9 06			lda #$06
  5135 2B68 20 7E 19			jsr SYSTEM.RANDOM_0170
  5136 2B6B AD F7 A1			lda SYSTEM.RANDOM_0170.RESULT
  5137 2B6E 8D 8F A3			sta A
  5138 2B71			l_10ED
  5139 2B71 AD 8F A3			lda A
  5140 2B74 CD 90 A3			cmp A_
  5141 2B77 F0 ED			jeq l_10EE
  5142 2B79 AC 8E A3			ldy I
  5143 2B7C B9 93 A3			lda adr.TMP+$01,y
  5144 2B7F CD 8F A3			cmp A
  5145 2B82 F0 E2			jeq l_10EE
  5146 2B84			l_10EA
  5147
  5148 				; optimize OK (block_attack.pas), line = 1132
  5149
  5150 2B84 AD 8F A3			lda A
  5151 2B87 8D 90 A3			sta A_
  5152
  5153 				; optimize OK (block_attack.pas), line = 1134
  5154
  5155 2B8A AC 8E A3			ldy I
  5156 2B8D 99 92 A3			sta adr.TMP,y
  5157
  5158 				; optimize OK (block_attack.pas), line = 1136
  5159
  5160 2B90 18 69 13			add #$13
  5161 2B93 8D 8F A3			sta A
  5162
  5163 				; optimize OK (block_attack.pas), line = 1138
  5164
  5165 2B96 B9 D4 06			lda adr.PLAYFIELD+$54,y
  5166 2B99 8D 91 A3			sta K
  5167
  5168 				; optimize OK (block_attack.pas), line = 1140
  5169
  5170 2B9C CD 8F A3			cmp A
  5171 2B9F D0 10			jne l_114D
  5172
  5173 				; optimize OK (block_attack.pas), line = 1141
  5174
  5175 2BA1 AD 8F A3			lda A
  5176 2BA4 C9 18			cmp #$18
  5177 2BA6 B0 06			jcs l_1160
  5178
  5179 				; optimize FAIL (0, block_attack.pas), line = 1142
  5180
  5181 2BA8 EE 8F A3			inc A
  5182 2BAB 4C B1 2B			jmp l_116E
  5183 2BAE			l_1160
  5184
  5185 				; optimize FAIL (0, block_attack.pas), line = 1144
  5186
  5187 2BAE CE 8F A3			dec A
  5188 2BB1			l_116E
  5189 2BB1			l_114D
  5190
  5191 				; optimize OK (block_attack.pas), line = 1146
  5192
  5193 2BB1 AC 8E A3			ldy I
  5194 2BB4 AD 8F A3			lda A
  5195 2BB7 99 DA 06			sta adr.PLAYFIELD+$5A,y
  5196
  5197 				; --- ForToDoEpilog
  5198 2BBA CE 8E A3			dec I
  5199 2BBD 10 92			jpl l_10C5
  5200 2BBF			l_10D3
  5201
  5202 				; optimize OK (block_attack.pas), line = 1151
  5203
  5204 2BBF AD CE 06			lda adr.PLAYFIELD+$4E
  5205 2BC2 C9 13			cmp #$13
  5206 2BC4 90 33			jcc l_119D
  5207
  5208 				; optimize OK (block_attack.pas), line = 1152
  5209
  5210 2BC6 38 E9 12			sub #$12
  5211 2BC9 8D CE 06			sta adr.PLAYFIELD+$4E
  5212
  5213 				; optimize OK (block_attack.pas), line = 1153
  5214
  5215 2BCC AD CF 06			lda adr.PLAYFIELD+$4F
  5216 2BCF 38 E9 12			sub #$12
  5217 2BD2 8D CF 06			sta adr.PLAYFIELD+$4F
  5218
  5219 				; optimize OK (block_attack.pas), line = 1154
  5220
  5221 2BD5 AD D0 06			lda adr.PLAYFIELD+$50
  5222 2BD8 38 E9 12			sub #$12
  5223 2BDB 8D D0 06			sta adr.PLAYFIELD+$50
  5224
  5225 				; optimize OK (block_attack.pas), line = 1155
  5226
  5227 2BDE AD D1 06			lda adr.PLAYFIELD+$51
  5228 2BE1 38 E9 12			sub #$12
  5229 2BE4 8D D1 06			sta adr.PLAYFIELD+$51
  5230
  5231 				; optimize OK (block_attack.pas), line = 1156
  5232
  5233 2BE7 AD D2 06			lda adr.PLAYFIELD+$52
  5234 2BEA 38 E9 12			sub #$12
  5235 2BED 8D D2 06			sta adr.PLAYFIELD+$52
  5236
  5237 				; optimize OK (block_attack.pas), line = 1157
  5238
  5239 2BF0 AD D3 06			lda adr.PLAYFIELD+$53
  5240 2BF3 38 E9 12			sub #$12
  5241 2BF6 8D D3 06			sta adr.PLAYFIELD+$53
  5242 2BF9			l_119D
  5243
  5244 				; optimize OK (block_attack.pas), line = 1161
  5245
  5246 2BF9 AC AB A2 84 82 AC + 	mwy VRAM :bp2
  5247 2C03 A0 00			ldy #$00
  5248 2C05 B1 82			lda (:bp2),y
  5249 2C07 C8				iny
  5250 2C08 18 69 10			add #$10
  5251 2C0B 85 9D			sta :STACKORIGIN+9
  5252 2C0D B1 82			lda (:bp2),y
  5253 2C0F 69 04			adc #$04
  5254 2C11 85 E1			sta P+1
  5255 2C13 A5 9D			lda :STACKORIGIN+9
  5256 2C15 18 69 04			add #$04
  5257 2C18 85 E0			sta P
  5258 2C1A 90 02			scc
  5259 2C1C E6 E1			inc P+1
  5260
  5261 				; optimize OK (block_attack.pas), line = 1163
  5262
  5263 2C1E A9 4E			lda #$4E
  5264 2C20 8D 91 A3			sta K
  5265
  5266 				; optimize OK (block_attack.pas), line = 1164
  5267
  5268 2C23 A5 E0			lda P
  5269 2C25 85 88			sta DRAWHORIZONTALTILES.P
  5270 2C27 A5 E1			lda P+1
  5271 2C29 85 89			sta DRAWHORIZONTALTILES.P+1
  5272 2C2B AD 91 A3			lda K
  5273 2C2E 85 8C			sta DRAWHORIZONTALTILES.K
  5274 2C30 20 17 27			jsr DRAWHORIZONTALTILES
  5275
  5276 				; optimize OK (block_attack.pas), line = 1166
  5277
  5278 2C33 A5 E0			lda P
  5279 2C35 18 69 50			add #$50
  5280 2C38 85 E0			sta P
  5281 2C3A 90 02			scc
  5282 2C3C E6 E1			inc P+1
  5283
  5284 				; optimize OK (block_attack.pas), line = 1167
  5285
  5286 2C3E AD 91 A3			lda K
  5287 2C41 18 69 06			add #$06
  5288 2C44 8D 91 A3			sta K
  5289
  5290 				; optimize OK (block_attack.pas), line = 1169
  5291
  5292 2C47 A5 E0			lda P
  5293 2C49 85 88			sta DRAWHORIZONTALTILES.P
  5294 2C4B A5 E1			lda P+1
  5295 2C4D 85 89			sta DRAWHORIZONTALTILES.P+1
  5296 2C4F AD 91 A3			lda K
  5297 2C52 85 8C			sta DRAWHORIZONTALTILES.K
  5298 2C54 20 17 27			jsr DRAWHORIZONTALTILES
  5299
  5300 				; optimize OK (block_attack.pas), line = 1173
  5301
  5302 2C57 A5 E0			lda P
  5303 2C59 18 69 18			add #$18
  5304 2C5C 85 E0			sta P
  5305 2C5E 90 02			scc
  5306 2C60 E6 E1			inc P+1
  5307
  5308 				; optimize OK (block_attack.pas), line = 1175
  5309
  5310 2C62 A0 00			ldy #$00
  5311 2C64 98				tya
  5312 2C65 91 E0			sta (P),y
  5313
  5314 				; optimize OK (block_attack.pas), line = 1176
  5315
  5316 2C67 A0 01			ldy #$01
  5317 2C69 A9 FA			lda #$FA
  5318 2C6B 91 E0			sta (P),y
  5319
  5320 				; optimize OK (block_attack.pas), line = 1177
  5321
  5322 2C6D C8				iny
  5323 2C6E 91 E0			sta (P),y
  5324
  5325 				; optimize OK (block_attack.pas), line = 1178
  5326
  5327 2C70 C8				iny
  5328 2C71 91 E0			sta (P),y
  5329
  5330 				; optimize OK (block_attack.pas), line = 1179
  5331
  5332 2C73 C8				iny
  5333 2C74 91 E0			sta (P),y
  5334
  5335 				; optimize OK (block_attack.pas), line = 1180
  5336
  5337 2C76 C8				iny
  5338 2C77 91 E0			sta (P),y
  5339
  5340 				; optimize OK (block_attack.pas), line = 1181
  5341
  5342 2C79 C8				iny
  5343 2C7A 91 E0			sta (P),y
  5344
  5345 				; optimize OK (block_attack.pas), line = 1182
  5346
  5347 2C7C C8				iny
  5348 2C7D 91 E0			sta (P),y
  5349
  5350 				; optimize OK (block_attack.pas), line = 1183
  5351
  5352 2C7F C8				iny
  5353 2C80 91 E0			sta (P),y
  5354
  5355 				; optimize OK (block_attack.pas), line = 1185
  5356
  5357 2C82 C8				iny
  5358 2C83 A9 00			lda #$00
  5359 2C85 91 E0			sta (P),y
  5360
  5361 				; optimize OK (block_attack.pas), line = 1186
  5362
  5363 2C87 C8				iny
  5364 2C88 91 E0			sta (P),y
  5365
  5366 				; optimize OK (block_attack.pas), line = 1187
  5367
  5368 2C8A C8				iny
  5369 2C8B 91 E0			sta (P),y
  5370
  5371 				; optimize OK (block_attack.pas), line = 1188
  5372
  5373 2C8D C8				iny
  5374 2C8E 91 E0			sta (P),y
  5375
  5376 				; optimize OK (block_attack.pas), line = 1189
  5377
  5378 2C90 C8				iny
  5379 2C91 91 E0			sta (P),y
  5380
  5381 				; optimize OK (block_attack.pas), line = 1190
  5382
  5383 2C93 C8				iny
  5384 2C94 91 E0			sta (P),y
  5385
  5386 				; optimize OK (block_attack.pas), line = 1191
  5387
  5388 2C96 C8				iny
  5389 2C97 91 E0			sta (P),y
  5390
  5391 				; optimize OK (block_attack.pas), line = 1193
  5392
  5393 2C99 A5 E0			lda P
  5394 2C9B 18 69 28			add #$28
  5395 2C9E 85 E0			sta P
  5396 2CA0 90 02			scc
  5397 2CA2 E6 E1			inc P+1
  5398
  5399 				; optimize OK (block_attack.pas), line = 1195
  5400
  5401 2CA4 A0 00			ldy #$00
  5402 2CA6 98				tya
  5403 2CA7 91 E0			sta (P),y
  5404
  5405 				; optimize OK (block_attack.pas), line = 1196
  5406
  5407 2CA9 A0 01			ldy #$01
  5408 2CAB A9 FA			lda #$FA
  5409 2CAD 91 E0			sta (P),y
  5410
  5411 				; optimize OK (block_attack.pas), line = 1197
  5412
  5413 2CAF C8				iny
  5414 2CB0 91 E0			sta (P),y
  5415
  5416 				; optimize OK (block_attack.pas), line = 1198
  5417
  5418 2CB2 C8				iny
  5419 2CB3 91 E0			sta (P),y
  5420
  5421 				; optimize OK (block_attack.pas), line = 1199
  5422
  5423 2CB5 C8				iny
  5424 2CB6 91 E0			sta (P),y
  5425
  5426 				; optimize OK (block_attack.pas), line = 1200
  5427
  5428 2CB8 C8				iny
  5429 2CB9 91 E0			sta (P),y
  5430
  5431 				; optimize OK (block_attack.pas), line = 1201
  5432
  5433 2CBB C8				iny
  5434 2CBC 91 E0			sta (P),y
  5435
  5436 				; optimize OK (block_attack.pas), line = 1202
  5437
  5438 2CBE C8				iny
  5439 2CBF 91 E0			sta (P),y
  5440
  5441 				; optimize OK (block_attack.pas), line = 1203
  5442
  5443 2CC1 C8				iny
  5444 2CC2 91 E0			sta (P),y
  5445
  5446 				; optimize OK (block_attack.pas), line = 1205
  5447
  5448 2CC4 C8				iny
  5449 2CC5 A9 00			lda #$00
  5450 2CC7 91 E0			sta (P),y
  5451
  5452 				; optimize OK (block_attack.pas), line = 1206
  5453
  5454 2CC9 C8				iny
  5455 2CCA 91 E0			sta (P),y
  5456
  5457 				; optimize OK (block_attack.pas), line = 1207
  5458
  5459 2CCC C8				iny
  5460 2CCD 91 E0			sta (P),y
  5461
  5462 				; optimize OK (block_attack.pas), line = 1208
  5463
  5464 2CCF C8				iny
  5465 2CD0 91 E0			sta (P),y
  5466
  5467 				; optimize OK (block_attack.pas), line = 1209
  5468
  5469 2CD2 C8				iny
  5470 2CD3 91 E0			sta (P),y
  5471
  5472 				; optimize OK (block_attack.pas), line = 1210
  5473
  5474 2CD5 C8				iny
  5475 2CD6 91 E0			sta (P),y
  5476
  5477 				; optimize OK (block_attack.pas), line = 1211
  5478
  5479 2CD8 C8				iny
  5480 2CD9 91 E0			sta (P),y
  5481
  5482 				; ------------------------------------------------------------
  5483
  5484 = A38E			I	= DATAORIGIN+$01AB
  5485 = A38F			A	= DATAORIGIN+$01AC
  5486 = A390			A_	= DATAORIGIN+$01AD
  5487 = A391			K	= DATAORIGIN+$01AE
  5488 = 00E0			P	= $E0
  5489 = A392			adr.TMP	= [DATAORIGIN+$01AF] .array [6]
  5490 2CDB			.var TMP	= adr.TMP .word
  5491
  5492 = A38E			@VarData	= I
  5493 = 000A			@VarDataSize	= 10
  5494
  5495 2CDB			@exit
  5496 					.ifdef @new
  5497 					lda <@VarData
  5498 					sta :ztmp
  5499 					lda >@VarData
  5500 					ldy #@VarDataSize-1
  5501 					jmp @FreeMem
  5502 					els
  5503 2CDB 60				rts						; ret
  5504 					eif
  5505 = 2CDC 92 A3		TMP
  5505 				.endl
  5506
  5507 2CDE			.local	MOVEUPPLAYFIELD					; PROCEDURE | ASSEMBLER
  5508
  5509 				; -------------------  ASM Block 00000141  -------------------
  5510
  5511 2CDE A0 00			ldy #0
  5512 2CE0 B9 86 06		@:	lda adr.playfield+6,y
  5513 2CE3 99 80 06			sta adr.playfield,y
  5514 2CE6 C8				iny
  5515 2CE7 C0 5A			cpy #15*6
  5516 2CE9 D0 F5			bne @-
  5517
  5518 2CEB			@exit
  5519 					.ifdef @new
  5520 					lda <@VarData
  5521 					sta :ztmp
  5522 					lda >@VarData
  5523 					ldy #@VarDataSize-1
  5524 					jmp @FreeMem
  5525 					els
  5526 2CEB 60				rts						; ret
  5527 					eif
  5528 				.endl
  5529
  5530 2CEC			.local	SWITCHCHARSET					; PROCEDURE | ASSEMBLER
  5531
  5532 				; -------------------  ASM Block 00000142  -------------------
  5533
  5534 2CEC AD 7B 25			lda JGPFirstCharset
  5535 2CEF 49 04			eor #4
  5536 2CF1 8D 7B 25			sta JGPFirstCharset
  5537 2CF4 8D EF 19			sta JGPCharset
  5538
  5539 2CF7			@exit
  5540 					.ifdef @new
  5541 					lda <@VarData
  5542 					sta :ztmp
  5543 					lda >@VarData
  5544 					ldy #@VarDataSize-1
  5545 					jmp @FreeMem
  5546 					els
  5547 2CF7 60				rts						; ret
  5548 					eif
  5549 				.endl
  5550
  5551 2CF8			.local	SELECTBOX					; PROCEDURE
  5552
  5553 				; optimize OK (block_attack.pas), line = 1240
  5554
  5555 2CF8 A9 00			lda <adr.MISSILE
  5556 2CFA 18 6D 8B A2			add YOLD
  5557 2CFE 85 82			sta :bp2
  5558 2D00 A9 DB			lda >adr.MISSILE
  5559 2D02 69 00			adc #$00
  5560 2D04 85 83			sta :bp2+1
  5561 2D06 A9 00			lda #$00
  5562 2D08 A0 10			ldy #$10
  5563 2D0A 91 82 88 10 FB		sta:rpl (:bp2),y-
  5564
  5565 				; optimize OK (block_attack.pas), line = 1242
  5566
  5567 2D0F AD 87 A2			lda YSEL
  5568 2D12 0A				asl @
  5569 2D13 0A				asl @
  5570 2D14 0A				asl @
  5571 2D15 0A				asl @
  5572 2D16 18 69 18			add #$18
  5573 2D19 8D 98 A3			sta A
  5574
  5575 				; optimize OK (block_attack.pas), line = 1244
  5576
  5577 2D1C AD 84 A2			lda SCROLL
  5578 2D1F D0 0A			jne l_129D
  5579 2D21 AD 98 A3			lda A
  5580 2D24 38 ED 8C A2			sub YSHIFT
  5581 2D28 8D 98 A3			sta A
  5582 2D2B			l_129D
  5583
  5584 				; optimize OK (block_attack.pas), line = 1246
  5585
  5586 2D2B AD 98 A3			lda A
  5587 2D2E 8D 8B A2			sta YOLD
  5588
  5589 				; optimize OK (block_attack.pas), line = 1248
  5590
  5591 2D31 AC 98 A3			ldy A
  5592 2D34 A9 99			lda #$99
  5593 2D36 99 00 DB			sta adr.MISSILE,y
  5594
  5595 				; optimize OK (block_attack.pas), line = 1249
  5596
  5597 2D39 A9 FF			lda #$FF
  5598 2D3B 99 01 DB			sta adr.MISSILE+$01,y
  5599
  5600 				; optimize OK (block_attack.pas), line = 1250
  5601
  5602 2D3E 99 02 DB			sta adr.MISSILE+$02,y
  5603
  5604 				; optimize OK (block_attack.pas), line = 1251
  5605
  5606 2D41 A9 66			lda #$66
  5607 2D43 99 03 DB			sta adr.MISSILE+$03,y
  5608
  5609 				; optimize OK (block_attack.pas), line = 1253
  5610
  5611 2D46 A9 42			lda #$42
  5612 2D48 99 04 DB			sta adr.MISSILE+$04,y
  5613
  5614 				; optimize OK (block_attack.pas), line = 1254
  5615
  5616 2D4B 99 05 DB			sta adr.MISSILE+$05,y
  5617
  5618 				; optimize OK (block_attack.pas), line = 1255
  5619
  5620 2D4E 99 06 DB			sta adr.MISSILE+$06,y
  5621
  5622 				; optimize OK (block_attack.pas), line = 1256
  5623
  5624 2D51 99 07 DB			sta adr.MISSILE+$07,y
  5625
  5626 				; optimize OK (block_attack.pas), line = 1257
  5627
  5628 2D54 99 08 DB			sta adr.MISSILE+$08,y
  5629
  5630 				; optimize OK (block_attack.pas), line = 1258
  5631
  5632 2D57 99 09 DB			sta adr.MISSILE+$09,y
  5633
  5634 				; optimize OK (block_attack.pas), line = 1259
  5635
  5636 2D5A 99 0A DB			sta adr.MISSILE+$0A,y
  5637
  5638 				; optimize OK (block_attack.pas), line = 1260
  5639
  5640 2D5D 99 0B DB			sta adr.MISSILE+$0B,y
  5641
  5642 				; optimize OK (block_attack.pas), line = 1261
  5643
  5644 2D60 99 0C DB			sta adr.MISSILE+$0C,y
  5645
  5646 				; optimize OK (block_attack.pas), line = 1263
  5647
  5648 2D63 A9 66			lda #$66
  5649 2D65 99 0D DB			sta adr.MISSILE+$0D,y
  5650
  5651 				; optimize OK (block_attack.pas), line = 1264
  5652
  5653 2D68 A9 FF			lda #$FF
  5654 2D6A 99 0E DB			sta adr.MISSILE+$0E,y
  5655
  5656 				; optimize OK (block_attack.pas), line = 1265
  5657
  5658 2D6D 99 0F DB			sta adr.MISSILE+$0F,y
  5659
  5660 				; optimize OK (block_attack.pas), line = 1266
  5661
  5662 2D70 A9 99			lda #$99
  5663 2D72 99 10 DB			sta adr.MISSILE+$10,y
  5664
  5665 				; optimize OK (block_attack.pas), line = 1268
  5666
  5667 2D75 AD 86 A2			lda XSEL
  5668 2D78 0A				asl @
  5669 2D79 0A				asl @
  5670 2D7A 0A				asl @
  5671 2D7B 0A				asl @
  5672 2D7C 18 69 30			add #$30
  5673 2D7F 18 69 10			add #$10
  5674 2D82 8D 98 A3			sta A
  5675
  5676 				; optimize OK (block_attack.pas), line = 1271
  5677
  5678 2D85 8D 91 A2			sta LEFT_EDGE
  5679
  5680 				; optimize OK (block_attack.pas), line = 1273
  5681
  5682 2D88 18 69 0F			add #$0F
  5683 2D8B 8D 05 D0			sta ATARI.HPOSM1
  5684
  5685 				; optimize OK (block_attack.pas), line = 1274
  5686
  5687 2D8E AD 98 A3			lda A
  5688 2D91 18 69 10			add #$10
  5689 2D94 8D 06 D0			sta ATARI.HPOSM2
  5690
  5691 				; optimize OK (block_attack.pas), line = 1277
  5692
  5693 2D97 AD 98 A3			lda A
  5694 2D9A 18 69 20			add #$20
  5695 2D9D 8D 92 A2			sta RIGHT_EDGE
  5696
  5697 				; ------------------------------------------------------------
  5698
  5699 = A398			A	= DATAORIGIN+$01B5
  5700
  5701 = A398			@VarData	= A
  5702 = 0001			@VarDataSize	= 1
  5703
  5704 2DA0			@exit
  5705 					.ifdef @new
  5706 					lda <@VarData
  5707 					sta :ztmp
  5708 					lda >@VarData
  5709 					ldy #@VarDataSize-1
  5710 					jmp @FreeMem
  5711 					els
  5712 2DA0 60				rts						; ret
  5713 					eif
  5714 				.endl
  5715
  5716 2DA1			.local	ONSCROLL					; PROCEDURE
  5717
  5718 				; optimize FAIL ('PANELUPDATE', block_attack.pas), line = 1285
  5719
  5720 2DA1 20 80 23			jsr PANELUPDATE
  5721
  5722 				; optimize OK (block_attack.pas), line = 1287
  5723
  5724 2DA4 A9 00			lda #$00
  5725 2DA6 8D BA A2			sta SCROLLUP
  5726
  5727 				; optimize OK (block_attack.pas), line = 1289
  5728
  5729 2DA9 AD 82 A2			lda VSC
  5730 2DAC 18 69 01			add #$01
  5731 2DAF 29 07			and #$07
  5732 2DB1 8D 82 A2			sta VSC
  5733
  5734 				; optimize OK (block_attack.pas), line = 1291
  5735
  5736 2DB4 8D 05 D4			sta ATARI.VSCROL
  5737
  5738 				; optimize OK (block_attack.pas), line = 1293
  5739
  5740 2DB7 AD 82 A2			lda VSC
  5741 2DBA F0 03 4C 5E 2E		jne l_13C5
  5742
  5743 				; optimize OK (block_attack.pas), line = 1295
  5744
  5745 2DBF AC AB A2 84 82 AC + 	mwy VRAM :bp2
  5746 2DC9 A0 00			ldy #$00
  5747 2DCB B1 82			lda (:bp2),y
  5748 2DCD 18 69 28			add #$28
  5749 2DD0 91 82			sta (:bp2),y
  5750 2DD2 C8				iny
  5751 2DD3 B1 82			lda (:bp2),y
  5752 2DD5 69 00			adc #$00
  5753 2DD7 91 82			sta (:bp2),y
  5754
  5755 				; optimize FAIL ('SWITCHCHARSET', block_attack.pas), line = 1297
  5756
  5757 2DD9 20 EC 2C			jsr SWITCHCHARSET
  5758
  5759 				; optimize OK (block_attack.pas), line = 1299
  5760
  5761 2DDC AD 83 A2			lda CNTROW
  5762 2DDF 49 01			eor #$01
  5763 2DE1 8D 83 A2			sta CNTROW
  5764
  5765 				; optimize OK (block_attack.pas), line = 1301
  5766
  5767 2DE4 D0 78			jne l_13E4
  5768
  5769 				; optimize OK (block_attack.pas), line = 1304
  5770
  5771 2DE6 AC AB A2 84 82 AC + 	mwy VRAM :bp2
  5772 2DF0 A5 58			lda ATARI.SAVMSC
  5773 2DF2 18 69 80			add #$80
  5774 2DF5 85 9E			sta :STACKORIGIN+10
  5775 2DF7 A5 59			lda ATARI.SAVMSC+1
  5776 2DF9 69 02			adc #$02
  5777 2DFB A0 01			ldy #$01
  5778 2DFD D1 82			cmp (:bp2),y
  5779 2DFF D0 05			bne @+
  5780 2E01 88				dey
  5781 2E02 A5 9E			lda :STACKORIGIN+10
  5782 2E04 D1 82			cmp (:bp2),y
  5783 				@
  5784 2E06 B0 43			jcs l_13FF
  5785
  5786 				; optimize OK (block_attack.pas), line = 1306
  5787
  5788 2E08 A5 59			lda ATARI.SAVMSC+1
  5789 2E0A 49 70			eor #$70
  5790 2E0C 85 59			sta ATARI.SAVMSC+1
  5791
  5792 				; optimize OK (block_attack.pas), line = 1308
  5793
  5794 2E0E A5 58			lda ATARI.SAVMSC
  5795 2E10 18 69 50			add #$50
  5796 2E13 85 8C			sta SYSTEM.MOVE_0143.DEST
  5797 2E15 A5 59			lda ATARI.SAVMSC+1
  5798 2E17 69 00			adc #$00
  5799 2E19 85 8D			sta SYSTEM.MOVE_0143.DEST+1
  5800 2E1B A0 00			ldy #$00
  5801 2E1D B1 82			lda (:bp2),y
  5802 2E1F 85 88			sta SYSTEM.MOVE_0143.SOURCE
  5803 2E21 C8				iny
  5804 2E22 B1 82			lda (:bp2),y
  5805 2E24 85 89			sta SYSTEM.MOVE_0143.SOURCE+1
  5806 2E26 A9 00			lda #$00
  5807 2E28 85 84			sta SYSTEM.MOVE_0143.COUNT
  5808 2E2A A9 05			lda #$05
  5809 2E2C 85 85			sta SYSTEM.MOVE_0143.COUNT+1
  5810 2E2E				.LOCAL +MAIN.SYSTEM.MOVE_0143
  5811 2E2E				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0143.M@INLINE [Source: block_attack.a65]
     4 2E2E 20 93 16			jsr @move
Source: block_attack.a65
  5812 					.ENDL
  5813
  5814 				; optimize OK (block_attack.pas), line = 1310
  5815
  5816 2E31 AC AB A2 84 82 AC + 	mwy VRAM :bp2
  5817 2E3B A0 00			ldy #$00
  5818 2E3D A5 58			lda ATARI.SAVMSC
  5819 2E3F 18 69 50			add #$50
  5820 2E42 91 82			sta (:bp2),y
  5821 2E44 C8				iny
  5822 2E45 A5 59			lda ATARI.SAVMSC+1
  5823 2E47 69 00			adc #$00
  5824 2E49 91 82			sta (:bp2),y
  5825 2E4B			l_13FF
  5826
  5827 				; optimize OK (block_attack.pas), line = 1317
  5828
  5829 2E4B AD 84 A2			lda SCROLL
  5830 2E4E F0 03			jeq l_1434
  5831 2E50 CE 84 A2			dec SCROLL
  5832 2E53			l_1434
  5833
  5834 				; optimize FAIL ('MOVEUPPLAYFIELD', block_attack.pas), line = 1319
  5835
  5836 2E53 20 DE 2C			jsr MOVEUPPLAYFIELD
  5837
  5838 				; optimize FAIL ('NEWROWWITHRANDOMSET', block_attack.pas), line = 1321
  5839
  5840 2E56 20 47 2B			jsr NEWROWWITHRANDOMSET
  5841
  5842 				; optimize OK (block_attack.pas), line = 1325
  5843
  5844 2E59 A9 00			lda #$00
  5845 2E5B 8D BC A2			sta SHIFTKEY
  5846 2E5E			l_13E4
  5847 2E5E			l_13C5
  5848
  5849 				; optimize OK (block_attack.pas), line = 1331
  5850
  5851 2E5E AD 84 A2			lda SCROLL
  5852 2E61 D0 1C			jne l_1457
  5853
  5854 				; optimize FAIL (0, block_attack.pas), line = 1333
  5855
  5856 2E63 EE 8C A2			inc YSHIFT
  5857
  5858 				; optimize OK (block_attack.pas), line = 1335
  5859
  5860 2E66 AD 8C A2			lda YSHIFT
  5861 2E69 C9 10			cmp #$10
  5862 2E6B 90 0F			jcc l_146E
  5863
  5864 				; optimize OK (block_attack.pas), line = 1336
  5865
  5866 2E6D AD 87 A2			lda YSEL
  5867 2E70 C9 01			cmp #$01
  5868 2E72 90 03			jcc l_1481
  5869 2E74 CE 87 A2			dec YSEL
  5870 2E77			l_1481
  5871
  5872 				; optimize OK (block_attack.pas), line = 1337
  5873
  5874 2E77 A9 00			lda #$00
  5875 2E79 8D 8C A2			sta YSHIFT
  5876 2E7C			l_146E
  5877 2E7C 4C 85 2E			jmp l_1497
  5878 2E7F			l_1457
  5879
  5880 				; optimize OK (block_attack.pas), line = 1341
  5881
  5882 2E7F AD 82 A2			lda VSC
  5883 2E82 8D 8C A2			sta YSHIFT
  5884 2E85			l_1497
  5885
  5886 				; optimize FAIL ('SELECTBOX', block_attack.pas), line = 1343
  5887
  5888 2E85 20 F8 2C			jsr SELECTBOX
  5889 2E88			@exit
  5890 					.ifdef @new
  5891 					lda <@VarData
  5892 					sta :ztmp
  5893 					lda >@VarData
  5894 					ldy #@VarDataSize-1
  5895 					jmp @FreeMem
  5896 					els
  5897 2E88 60				rts						; ret
  5898 					eif
  5899 				.endl
  5900
  5901 2E89			.local	SWAPTILESON					; PROCEDURE
  5902
  5903 				; optimize OK (block_attack.pas), line = 1351
  5904
  5905 2E89 AC 87 A2			ldy YSEL
  5906 2E8C C8				iny
  5907 2E8D 8C 99 A3			sty I
  5908
  5909 				; optimize OK (block_attack.pas), line = 1353
  5910
  5911 2E90 AD 8C A2			lda YSHIFT
  5912 2E93 C9 08			cmp #$08
  5913 2E95 90 03			jcc l_14BE
  5914 2E97 CE 99 A3			dec I
  5915 2E9A			l_14BE
  5916
  5917 				; optimize OK (block_attack.pas), line = 1355
  5918
  5919 2E9A AD 99 A3			lda I
  5920 2E9D 0A				asl @
  5921 2E9E 8D 9C A3			sta Y
  5922
  5923 				; optimize OK (block_attack.pas), line = 1357
  5924
  5925 2EA1 AD 99 A3			lda I
  5926 2EA4 0A				asl @
  5927 2EA5 0A				asl @
  5928 2EA6 85 9D			sta :STACKORIGIN+9
  5929 2EA8 AD 99 A3			lda I
  5930 2EAB 0A				asl @
  5931 2EAC 18 65 9D			add :STACKORIGIN+9
  5932 2EAF 18 6D 86 A2			add XSEL
  5933 2EB3 8D 99 A3			sta I
  5934
  5935 				; optimize OK (block_attack.pas), line = 1359
  5936
  5937 2EB6 A8				tay
  5938 2EB7 B9 80 06			lda adr.PLAYFIELD,y
  5939 2EBA 8D 9A A3			sta A
  5940
  5941 				; optimize OK (block_attack.pas), line = 1360
  5942
  5943 2EBD B9 81 06			lda adr.PLAYFIELD+$01,y
  5944 2EC0 8D 9B A3			sta B
  5945
  5946 				; optimize OK (block_attack.pas), line = 1362
  5947
  5948 2EC3 AD 9A A3			lda A
  5949 2EC6 C9 07			cmp #$07
  5950 2EC8 B0 7C			jcs l_1511
  5951
  5952 				; optimize OK (block_attack.pas), line = 1363
  5953
  5954 2ECA AD 9B A3			lda B
  5955 2ECD C9 07			cmp #$07
  5956 2ECF B0 75			jcs l_1524
  5957
  5958 				; optimize OK (block_attack.pas), line = 1364
  5959
  5960 2ED1 AD 9A A3			lda A
  5961 2ED4 0D 9B A3			ora B
  5962 2ED7 F0 6D			jeq l_153D
  5963
  5964 				; optimize OK (block_attack.pas), line = 1365
  5965
  5966 2ED9 AD 99 A3			lda I
  5967 2EDC 8D CC A2			sta SWAPTILES.INDEX
  5968
  5969 				; optimize OK (block_attack.pas), line = 1366
  5970
  5971 2EDF A9 04			lda #$04
  5972 2EE1 8D CB A2			sta SWAPTILES.STAGE
  5973
  5974 				; optimize OK (block_attack.pas), line = 1368
  5975
  5976 2EE4 AD 9A A3			lda A
  5977 2EE7 20 F5 25			jsr TILECODE
  5978 2EEA AD 77 A3			lda TILECODE.RESULT
  5979 2EED 8D CD A2			sta SWAPTILES.TILE0
  5980
  5981 				; optimize OK (block_attack.pas), line = 1369
  5982
  5983 2EF0 AD 9B A3			lda B
  5984 2EF3 20 F5 25			jsr TILECODE
  5985 2EF6 AD 77 A3			lda TILECODE.RESULT
  5986 2EF9 8D CE A2			sta SWAPTILES.TILE1
  5987
  5988 				; optimize OK (block_attack.pas), line = 1371
  5989
  5990 2EFC AC AB A2 84 82 AC + 	mwy VRAM :bp2
  5991 2F06 A0 00			ldy #$00
  5992 2F08 B1 82			lda (:bp2),y
  5993 2F0A 85 9D			sta :STACKORIGIN+9
  5994 2F0C C8				iny
  5995 2F0D B1 82			lda (:bp2),y
  5996 2F0F 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  5997 2F11 AD 9C A3			lda Y
  5998 2F14 20 99 17			jsr @mul40
  5999 2F17 18 65 9D			add :STACKORIGIN+9
  6000 2F1A 85 9D			sta :STACKORIGIN+9
  6001 2F1C A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  6002 2F1E 65 85			adc :eax+1
  6003 2F20 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  6004 2F22 A9 00			lda #$00
  6005 2F24 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  6006 2F26 AD 86 A2			lda XSEL
  6007 2F29 0A				asl @
  6008 2F2A 26 AE			rol :STACKORIGIN+STACKWIDTH+10
  6009 2F2C 0A				asl @
  6010 2F2D 26 AE			rol :STACKORIGIN+STACKWIDTH+10
  6011 2F2F 18 65 9D			add :STACKORIGIN+9
  6012 2F32 A8				tay
  6013 2F33 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  6014 2F35 65 AE			adc :STACKORIGIN+STACKWIDTH+10
  6015 2F37 8D D0 A2			sta SWAPTILES.P+1
  6016 2F3A 98				tya
  6017 2F3B 18 69 04			add #$04
  6018 2F3E 8D CF A2			sta SWAPTILES.P
  6019 2F41 90 03			scc
  6020 2F43 EE D0 A2			inc SWAPTILES.P+1
  6021 2F46			l_153D
  6022 2F46			l_1524
  6023 2F46			l_1511
  6024
  6025 				; ------------------------------------------------------------
  6026
  6027 = A399			I	= DATAORIGIN+$01B6
  6028 = A39A			A	= DATAORIGIN+$01B7
  6029 = A39B			B	= DATAORIGIN+$01B8
  6030 = A39C			Y	= DATAORIGIN+$01B9
  6031
  6032 = A399			@VarData	= I
  6033 = 0004			@VarDataSize	= 4
  6034
  6035 2F46			@exit
  6036 					.ifdef @new
  6037 					lda <@VarData
  6038 					sta :ztmp
  6039 					lda >@VarData
  6040 					ldy #@VarDataSize-1
  6041 					jmp @FreeMem
  6042 					els
  6043 2F46 60				rts						; ret
  6044 					eif
  6045 				.endl
  6046
  6047 2F47			.local	CLEARTILE					; PROCEDURE
  6048
  6049 				; optimize OK (block_attack.pas), line = 1380
  6050
  6051 2F47 AC 9E A3			ldy P+1
  6052 2F4A 84 81			sty :bp+1
  6053 2F4C AC 9D A3			ldy P
  6054 2F4F A9 00			lda #$00
  6055 2F51 91 80			sta (:bp),y
  6056
  6057 				; optimize OK (block_attack.pas), line = 1381
  6058
  6059 2F53 AC 9D A3 84 82 AC + 	mwy P :bp2
  6060 2F5D A0 01			ldy #$01
  6061 2F5F 91 82			sta (:bp2),y
  6062
  6063 				; optimize OK (block_attack.pas), line = 1382
  6064
  6065 2F61 C8				iny
  6066 2F62 91 82			sta (:bp2),y
  6067
  6068 				; optimize OK (block_attack.pas), line = 1383
  6069
  6070 2F64 C8				iny
  6071 2F65 91 82			sta (:bp2),y
  6072
  6073 				; optimize OK (block_attack.pas), line = 1385
  6074
  6075 2F67 A0 28			ldy #$28
  6076 2F69 91 82			sta (:bp2),y
  6077
  6078 				; optimize OK (block_attack.pas), line = 1386
  6079
  6080 2F6B C8				iny
  6081 2F6C 91 82			sta (:bp2),y
  6082
  6083 				; optimize OK (block_attack.pas), line = 1387
  6084
  6085 2F6E C8				iny
  6086 2F6F 91 82			sta (:bp2),y
  6087
  6088 				; optimize OK (block_attack.pas), line = 1388
  6089
  6090 2F71 C8				iny
  6091 2F72 91 82			sta (:bp2),y
  6092
  6093 				; ------------------------------------------------------------
  6094
  6095 = A39D			P	= DATAORIGIN+$01BA
  6096
  6097 = A39D			@VarData	= P
  6098 = 0002			@VarDataSize	= 2
  6099
  6100 2F74			@exit
  6101 					.ifdef @new
  6102 					lda <@VarData
  6103 					sta :ztmp
  6104 					lda >@VarData
  6105 					ldy #@VarDataSize-1
  6106 					jmp @FreeMem
  6107 					els
  6108 2F74 60				rts						; ret
  6109 					eif
  6110 				.endl
  6111
  6112 2F75			.local	DRAWTILE					; PROCEDURE | REGISTER
  6113
  6114 				; optimize OK (block_attack.pas), line = 1395
  6115
  6116 2F75 A5 8C			lda C
  6117 2F77 C9 01			cmp #$01
  6118 2F79 90 2C			jcc l_15BB
  6119
  6120 				; optimize OK (block_attack.pas), line = 1396
  6121
  6122 2F7B A0 00			ldy #$00
  6123 2F7D 91 88			sta (P),y
  6124
  6125 				; optimize OK (block_attack.pas), line = 1397
  6126
  6127 2F7F A0 28			ldy #$28
  6128 2F81 91 88			sta (P),y
  6129
  6130 				; optimize FAIL (0, block_attack.pas), line = 1399
  6131
  6132 2F83 E6 8C			inc C
  6133
  6134 				; optimize OK (block_attack.pas), line = 1401
  6135
  6136 2F85 A0 01			ldy #$01
  6137 2F87 A5 8C			lda C
  6138 2F89 91 88			sta (P),y
  6139
  6140 				; optimize OK (block_attack.pas), line = 1402
  6141
  6142 2F8B A0 29			ldy #$29
  6143 2F8D 91 88			sta (P),y
  6144
  6145 				; optimize FAIL (0, block_attack.pas), line = 1404
  6146
  6147 2F8F E6 8C			inc C
  6148
  6149 				; optimize OK (block_attack.pas), line = 1406
  6150
  6151 2F91 A0 02			ldy #$02
  6152 2F93 A5 8C			lda C
  6153 2F95 91 88			sta (P),y
  6154
  6155 				; optimize OK (block_attack.pas), line = 1407
  6156
  6157 2F97 A0 2A			ldy #$2A
  6158 2F99 91 88			sta (P),y
  6159
  6160 				; optimize FAIL (0, block_attack.pas), line = 1409
  6161
  6162 2F9B E6 8C			inc C
  6163
  6164 				; optimize OK (block_attack.pas), line = 1411
  6165
  6166 2F9D A0 03			ldy #$03
  6167 2F9F A5 8C			lda C
  6168 2FA1 91 88			sta (P),y
  6169
  6170 				; optimize OK (block_attack.pas), line = 1412
  6171
  6172 2FA3 A0 2B			ldy #$2B
  6173 2FA5 91 88			sta (P),y
  6174 2FA7			l_15BB
  6175
  6176 				; ------------------------------------------------------------
  6177
  6178 = 0088			P	= :EDX
  6179 = 008C			C	= :ECX
  6180 2FA7			@exit
  6181 					.ifdef @new
  6182 					lda <@VarData
  6183 					sta :ztmp
  6184 					lda >@VarData
  6185 					ldy #@VarDataSize-1
  6186 					jmp @FreeMem
  6187 					els
  6188 2FA7 60				rts						; ret
  6189 					eif
  6190 				.endl
  6191
  6192 2FA8			.local	ONSWAP						; PROCEDURE
  6193
  6194 				; optimize OK (block_attack.pas), line = 1423
  6195
  6196 2FA8 AD CF A2			lda SWAPTILES.P
  6197 2FAB 85 E0			sta P
  6198 2FAD AD D0 A2			lda SWAPTILES.P+1
  6199 2FB0 85 E1			sta P+1
  6200
  6201 				; optimize OK (block_attack.pas), line = 1425
  6202
  6203 2FB2 AD 83 A2			lda CNTROW
  6204 2FB5 F0 0B			jeq l_161D
  6205 2FB7 A5 E0			lda P
  6206 2FB9 38 E9 28			sub #$28
  6207 2FBC 85 E0			sta P
  6208 2FBE B0 02			scs
  6209 2FC0 C6 E1			dec P+1
  6210 2FC2			l_161D
  6211
  6212 				; optimize OK (block_attack.pas), line = 1427
  6213
  6214 2FC2 A5 E0			lda P
  6215 2FC4 8D 9D A3			sta CLEARTILE.P
  6216 2FC7 A5 E1			lda P+1
  6217 2FC9 8D 9E A3			sta CLEARTILE.P+1
  6218 2FCC 20 47 2F			jsr CLEARTILE
  6219
  6220 				; optimize OK (block_attack.pas), line = 1429
  6221
  6222 2FCF A5 E0			lda P
  6223 2FD1 18 69 04			add #$04
  6224 2FD4 85 E0			sta P
  6225 2FD6 90 02			scc
  6226 2FD8 E6 E1			inc P+1
  6227
  6228 				; optimize OK (block_attack.pas), line = 1430
  6229
  6230 2FDA 8D 9D A3			sta CLEARTILE.P
  6231 2FDD A5 E1			lda P+1
  6232 2FDF 8D 9E A3			sta CLEARTILE.P+1
  6233 2FE2 20 47 2F			jsr CLEARTILE
  6234
  6235 				; optimize OK (block_attack.pas), line = 1432
  6236
  6237 2FE5 AD CB A2			lda SWAPTILES.STAGE
  6238 2FE8 8D A1 A3			sta @CASETMP_0008
  6239 2FEB C9 04			cmp #$04
  6240 2FED D0 39			jne l_1633
  6241 				@
  6242
  6243 				; optimize FAIL (0, block_attack.pas), line = 1434
  6244
  6245 2FEF A5 E0			lda P
  6246 2FF1 D0 02			bne @+
  6247 2FF3 C6 E1			dec P+1
  6248 				@
  6249 2FF5 C6 E0			dec P
  6250
  6251 				; optimize OK (block_attack.pas), line = 1435
  6252
  6253 2FF7 A5 E0			lda P
  6254 2FF9 85 88			sta DRAWTILE.P
  6255 2FFB A5 E1			lda P+1
  6256 2FFD 85 89			sta DRAWTILE.P+1
  6257 2FFF AD CE A2			lda SWAPTILES.TILE1
  6258 3002 85 8C			sta DRAWTILE.C
  6259 3004 20 75 2F			jsr DRAWTILE
  6260
  6261 				; optimize OK (block_attack.pas), line = 1436
  6262
  6263 3007 A5 E0			lda P
  6264 3009 38 E9 02			sub #$02
  6265 300C 85 E0			sta P
  6266 300E B0 02			scs
  6267 3010 C6 E1			dec P+1
  6268
  6269 				; optimize OK (block_attack.pas), line = 1437
  6270
  6271 3012 85 88			sta DRAWTILE.P
  6272 3014 A5 E1			lda P+1
  6273 3016 85 89			sta DRAWTILE.P+1
  6274 3018 AD CD A2			lda SWAPTILES.TILE0
  6275 301B 85 8C			sta DRAWTILE.C
  6276 301D 20 75 2F			jsr DRAWTILE
  6277
  6278 				; optimize OK (block_attack.pas), line = 1439
  6279
  6280 3020 A9 01			lda #$01
  6281 3022 8D C4 A2			sta SWAP_PLAY
  6282
  6283 3025 4C D1 30			jmp a_0008
  6284 3028			l_1633
  6285 3028 C9 03			cmp #$03
  6286 302A D0 2C			jne l_1651
  6287 				@
  6288
  6289 				; optimize OK (block_attack.pas), line = 1443
  6290
  6291 302C A5 E0			lda P
  6292 302E 38 E9 02			sub #$02
  6293 3031 85 E0			sta P
  6294 3033 B0 02			scs
  6295 3035 C6 E1			dec P+1
  6296
  6297 				; optimize OK (block_attack.pas), line = 1444
  6298
  6299 3037 85 88			sta DRAWTILE.P
  6300 3039 A5 E1			lda P+1
  6301 303B 85 89			sta DRAWTILE.P+1
  6302 303D AD CE A2			lda SWAPTILES.TILE1
  6303 3040 85 8C			sta DRAWTILE.C
  6304 3042 20 75 2F			jsr DRAWTILE
  6305
  6306 				; optimize OK (block_attack.pas), line = 1446
  6307
  6308 3045 A5 E0			lda P
  6309 3047 85 88			sta DRAWTILE.P
  6310 3049 A5 E1			lda P+1
  6311 304B 85 89			sta DRAWTILE.P+1
  6312 304D AD CD A2			lda SWAPTILES.TILE0
  6313 3050 85 8C			sta DRAWTILE.C
  6314 3052 20 75 2F			jsr DRAWTILE
  6315
  6316 3055 4C D1 30			jmp a_0008
  6317 3058			l_1651
  6318 3058 C9 02			cmp #$02
  6319 305A D0 1C			jne l_1667
  6320 				@
  6321
  6322 				; optimize OK (block_attack.pas), line = 1450
  6323
  6324 305C A5 E0			lda P
  6325 305E 38 E9 02			sub #$02
  6326 3061 85 E0			sta P
  6327 3063 B0 02			scs
  6328 3065 C6 E1			dec P+1
  6329
  6330 				; optimize OK (block_attack.pas), line = 1451
  6331
  6332 3067 85 88			sta DRAWTILE.P
  6333 3069 A5 E1			lda P+1
  6334 306B 85 89			sta DRAWTILE.P+1
  6335 306D AD CD A2			lda SWAPTILES.TILE0
  6336 3070 85 8C			sta DRAWTILE.C
  6337 3072 20 75 2F			jsr DRAWTILE
  6338
  6339 3075 4C D1 30			jmp a_0008
  6340 3078			l_1667
  6341 3078 C9 01			cmp #$01
  6342 307A D0 55			jne l_1677
  6343 				@
  6344
  6345 				; optimize OK (block_attack.pas), line = 1455
  6346
  6347 307C A5 E0			lda P
  6348 307E 85 88			sta DRAWTILE.P
  6349 3080 A5 E1			lda P+1
  6350 3082 85 89			sta DRAWTILE.P+1
  6351 3084 AD CD A2			lda SWAPTILES.TILE0
  6352 3087 85 8C			sta DRAWTILE.C
  6353 3089 20 75 2F			jsr DRAWTILE
  6354
  6355 				; optimize OK (block_attack.pas), line = 1456
  6356
  6357 308C A5 E0			lda P
  6358 308E 38 E9 04			sub #$04
  6359 3091 85 E0			sta P
  6360 3093 B0 02			scs
  6361 3095 C6 E1			dec P+1
  6362
  6363 				; optimize OK (block_attack.pas), line = 1457
  6364
  6365 3097 85 88			sta DRAWTILE.P
  6366 3099 A5 E1			lda P+1
  6367 309B 85 89			sta DRAWTILE.P+1
  6368 309D AD CE A2			lda SWAPTILES.TILE1
  6369 30A0 85 8C			sta DRAWTILE.C
  6370 30A2 20 75 2F			jsr DRAWTILE
  6371
  6372 				; optimize OK (block_attack.pas), line = 1459
  6373
  6374 30A5 AC CC A2			ldy SWAPTILES.INDEX
  6375 30A8 B9 80 06			lda adr.PLAYFIELD,y
  6376 30AB 8D 9F A3			sta A
  6377
  6378 				; optimize OK (block_attack.pas), line = 1460
  6379
  6380 30AE B9 81 06			lda adr.PLAYFIELD+$01,y
  6381 30B1 8D A0 A3			sta B
  6382
  6383 				; optimize OK (block_attack.pas), line = 1462
  6384
  6385 30B4 99 80 06			sta adr.PLAYFIELD,y
  6386
  6387 				; optimize OK (block_attack.pas), line = 1463
  6388
  6389 30B7 AD 9F A3			lda A
  6390 30BA 99 81 06			sta adr.PLAYFIELD+$01,y
  6391
  6392 				; optimize FAIL ('UPDATETILES', block_attack.pas), line = 1465
  6393
  6394 30BD 20 50 28			jsr UPDATETILES
  6395
  6396 				; --- WhileProlog
  6397 30C0 4C C9 30			jmp l_16B3
  6398 30C3			l_16B4
  6399
  6400 				; optimize FAIL ('SYSTEM.PAUSE_016D', block_attack.pas), line = 1467
  6401
  6402 30C3 20 4E 19			jsr SYSTEM.PAUSE_016D
  6403 30C6 20 50 28			jsr UPDATETILES
  6404 30C9			l_16B3
  6405 30C9 20 C2 25			jsr TILESFALLDOWN
  6406 30CC AD 72 A3			lda TILESFALLDOWN.RESULT
  6407 30CF D0 F2			jne l_16B4
  6408
  6409 30D1			l_1677
  6410 30D1			a_0008
  6411
  6412 				; optimize FAIL (0, block_attack.pas), line = 1473
  6413
  6414 30D1 CE CB A2			dec SWAPTILES.STAGE
  6415
  6416 				; ------------------------------------------------------------
  6417
  6418 = 00E0			P	= $E0
  6419 = A39F			A	= DATAORIGIN+$01BC
  6420 = A3A0			B	= DATAORIGIN+$01BD
  6421 = A3A1			@CASETMP_0008	= DATAORIGIN+$01BE
  6422
  6423 = A39F			@VarData	= A
  6424 = 0003			@VarDataSize	= 3
  6425
  6426 30D4			@exit
  6427 					.ifdef @new
  6428 					lda <@VarData
  6429 					sta :ztmp
  6430 					lda >@VarData
  6431 					ldy #@VarDataSize-1
  6432 					jmp @FreeMem
  6433 					els
  6434 30D4 60				rts						; ret
  6435 					eif
  6436 				.endl
  6437
  6438 30D5			.local	WARNINGJUMPS					; PROCEDURE
  6439
  6440 				; optimize OK (block_attack.pas), line = 1483
  6441
  6442 30D5 A9 00			lda #$00
  6443 30D7 8D A2 A3			sta I
  6444
  6445 30DA			l_16D3
  6446 				; --- ForToDoCondition
  6447 30DA AC A2 A3			ldy I
  6448 30DD C0 06			cpy #$06
  6449 30DF B0 2D			jcs l_16E1
  6450
  6451 				; optimize OK (block_attack.pas), line = 1485
  6452
  6453 30E1 B9 8C 06			lda adr.PLAYFIELD+$0C,y
  6454 30E4 F0 08			jeq l_16FE
  6455
  6456 				; optimize OK (block_attack.pas), line = 1487
  6457
  6458 30E6 A9 01			lda #$01
  6459 30E8 99 B3 A2			sta adr.JUMP,y
  6460 30EB 4C 09 31			jmp l_170F
  6461 30EE			l_16FE
  6462
  6463 				; optimize OK (block_attack.pas), line = 1491
  6464
  6465 30EE AC A2 A3			ldy I
  6466 30F1 B9 B3 A2			lda adr.JUMP,y
  6467 30F4 F0 13			jeq l_171E
  6468
  6469 				; optimize OK (block_attack.pas), line = 1492
  6470
  6471 30F6 A9 00			lda #$00
  6472 30F8 99 B3 A2			sta adr.JUMP,y
  6473
  6474 				; optimize OK (block_attack.pas), line = 1494
  6475
  6476 30FB AD A2 A3			lda I
  6477 30FE 8D 79 A3			sta DRAWVERTICALJUMPTILES.X
  6478 3101 A9 00			lda #$00
  6479 3103 8D 7A A3			sta DRAWVERTICALJUMPTILES.C
  6480 3106 20 2C 26			jsr DRAWVERTICALJUMPTILES
  6481 3109			l_170F
  6482 3109			l_171E
  6483
  6484 				; --- ForToDoEpilog
  6485 3109 EE A2 A3			inc I
  6486 310C D0 CC			jne l_16D3
  6487 310E			l_16E1
  6488
  6489 				; optimize OK (block_attack.pas), line = 1502
  6490
  6491 310E A9 00			lda #$00
  6492 3110 8D A3 A3			sta FASTER
  6493
  6494 				; optimize OK (block_attack.pas), line = 1504
  6495
  6496 3113 8D A2 A3			sta I
  6497
  6498 3116			l_173F
  6499 				; --- ForToDoCondition
  6500 3116 AC A2 A3			ldy I
  6501 3119 C0 06			cpy #$06
  6502 311B B0 1E			jcs l_174D
  6503
  6504 				; optimize OK (block_attack.pas), line = 1505
  6505
  6506 311D B9 B3 A2			lda adr.JUMP,y
  6507 3120 F0 14			jeq l_175C
  6508
  6509 				; optimize OK (block_attack.pas), line = 1506
  6510
  6511 3122 A9 01			lda #$01
  6512 3124 8D A3 A3			sta FASTER
  6513
  6514 				; optimize OK (block_attack.pas), line = 1507
  6515
  6516 3127 AD A2 A3			lda I
  6517 312A 8D 79 A3			sta DRAWVERTICALJUMPTILES.X
  6518 312D AD 8D A2			lda TICK
  6519 3130 8D 7A A3			sta DRAWVERTICALJUMPTILES.C
  6520 3133 20 2C 26			jsr DRAWVERTICALJUMPTILES
  6521 3136			l_175C
  6522
  6523 				; --- ForToDoEpilog
  6524 3136 EE A2 A3			inc I
  6525 3139 D0 DB			jne l_173F
  6526 313B			l_174D
  6527
  6528 				; optimize OK (block_attack.pas), line = 1511
  6529
  6530 313B AD C5 A2			lda MSX_FASTER
  6531 313E CD A3 A3			cmp FASTER
  6532 3141 F0 27			jeq l_1783
  6533
  6534 				; optimize OK (block_attack.pas), line = 1513
  6535
  6536 3143 AD A3 A3			lda FASTER
  6537 3146 F0 0A			jeq l_1790
  6538
  6539 				; GetResourceHandle
  6540 3148 A9 FE			lda <MAIN.@RESOURCE.sapr_critical
  6541 314A 8D C9 A2			sta MSX.MODUL
  6542 314D A9 83			lda >MAIN.@RESOURCE.sapr_critical
  6543 314F 4C 59 31			jmp l_179A
  6544 3152			l_1790
  6545
  6546 				; GetResourceHandle
  6547 3152 A9 0E			lda <MAIN.@RESOURCE.sapr_yoshi
  6548 3154 8D C9 A2			sta MSX.MODUL
  6549 3157 A9 6F			lda >MAIN.@RESOURCE.sapr_yoshi
  6550 3159			l_179A
  6551 3159 8D CA A2			sta MSX.MODUL+1
  6552
  6553 				; optimize OK (block_attack.pas), line = 1518
  6554
  6555 315C A9 10			lda #$10
  6556 315E 8D 5A A2			sta SAPLZSS.TLZSSPLAY.INIT.A
  6557 3161 AD 73 A1			lda MSX
  6558 3164 AC 74 A1			ldy MSX+1
  6559 3167 20 68 1D			jsr SAPLZSS.TLZSSPLAY.INIT
  6560 316A			l_1783
  6561
  6562 				; optimize OK (block_attack.pas), line = 1523
  6563
  6564 316A AD A3 A3			lda FASTER
  6565 316D 8D C5 A2			sta MSX_FASTER
  6566
  6567 				; ------------------------------------------------------------
  6568
  6569 = A3A2			I	= DATAORIGIN+$01BF
  6570 = A3A3			FASTER	= DATAORIGIN+$01C0
  6571
  6572 = A3A2			@VarData	= I
  6573 = 0002			@VarDataSize	= 2
  6574
  6575 3170			@exit
  6576 					.ifdef @new
  6577 					lda <@VarData
  6578 					sta :ztmp
  6579 					lda >@VarData
  6580 					ldy #@VarDataSize-1
  6581 					jmp @FreeMem
  6582 					els
  6583 3170 60				rts						; ret
  6584 					eif
  6585 				.endl
  6586
  6587 3171			.local	CLEARGTIA					; PROCEDURE
  6588
  6589 				; optimize OK (block_attack.pas), line = 1533
  6590
  6591 3171 A9 00			lda #$00
  6592 3173 85 92			sta P
  6593 3175 A9 D0			lda #$D0
  6594 3177 85 93			sta P+1
  6595
  6596 				; optimize OK (block_attack.pas), line = 1535
  6597
  6598 3179 A9 00			lda #$00
  6599 317B 8D A4 A3			sta I
  6600
  6601 317E			l_17B5
  6602 				; --- ForToDoCondition
  6603 317E AD A4 A3			lda I
  6604 3181 C9 1F			cmp #$1F
  6605 3183 B0 13			jcs l_17C3
  6606
  6607 				; optimize OK (block_attack.pas), line = 1536
  6608
  6609 3185 A0 01			ldy #1
  6610 3187 C9 1A			cmp #$1A
  6611 3189 F0 01			beq @+
  6612 318B 88				dey
  6613 				@
  6614 318C 98				tya
  6615 318D 0A				asl @
  6616 318E AC A4 A3			ldy I
  6617 3191 91 92			sta (P),y
  6618
  6619 				; --- ForToDoEpilog
  6620 3193 EE A4 A3			inc I
  6621 3196 D0 E6			jne l_17B5
  6622 3198			l_17C3
  6623
  6624 				; ------------------------------------------------------------
  6625
  6626 = 0092			P	= :STACKORIGIN-2
  6627 = A3A4			I	= DATAORIGIN+$01C1
  6628
  6629 = A3A4			@VarData	= I
  6630 = 0001			@VarDataSize	= 1
  6631
  6632 3198			@exit
  6633 					.ifdef @new
  6634 					lda <@VarData
  6635 					sta :ztmp
  6636 					lda >@VarData
  6637 					ldy #@VarDataSize-1
  6638 					jmp @FreeMem
  6639 					els
  6640 3198 60				rts						; ret
  6641 					eif
  6642 				.endl
  6643
  6644 3199			.local	DOINITPMG					; PROCEDURE
  6645
  6646 				; optimize FAIL ('CLEARGTIA', block_attack.pas), line = 1545
  6647
  6648 3199 20 71 31			jsr CLEARGTIA
  6649
  6650 				; GetResourceHandle
  6651 319C A9 02			lda <MAIN.@RESOURCE.t_pm0
  6652 319E 8D A5 A3			sta PTR
  6653 31A1 A9 51			lda >MAIN.@RESOURCE.t_pm0
  6654 31A3 8D A6 A3			sta PTR+1
  6655
  6656 				; optimize OK (block_attack.pas), line = 1550
  6657
  6658 31A6 AD A5 A3			lda PTR
  6659 31A9 8D 50 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER
  6660 31AC AD A6 A3			lda PTR+1
  6661 31AF 8D 51 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER+1
  6662 31B2 A9 00			lda #$00
  6663 31B4 8D 52 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER
  6664 31B7 A9 DB			lda #$DB
  6665 31B9 8D 53 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER+1
  6666 31BC 20 4E 1B			jsr ZX5.UNZX5_02A4
  6667
  6668 				; optimize OK (block_attack.pas), line = 1552
  6669
  6670 31BF A9 D8			lda #$D8
  6671 31C1 8D 07 D4			sta ATARI.PMBASE
  6672
  6673 				; optimize OK (block_attack.pas), line = 1554
  6674
  6675 31C4 A9 03			lda #$03
  6676 31C6 8D 1D D0			sta ATARI.GRACTL
  6677
  6678 				; optimize OK (block_attack.pas), line = 1555
  6679
  6680 31C9 A9 01			lda #$01
  6681 31CB 8D 1B D0			sta ATARI.PRIOR
  6682
  6683 				; optimize OK (block_attack.pas), line = 1557
  6684
  6685 31CE A9 0F			lda #$0F
  6686 31D0 8D 12 D0			sta ATARI.COLPM0
  6687
  6688 				; optimize OK (block_attack.pas), line = 1558
  6689
  6690 31D3 8D 13 D0			sta ATARI.COLPM1
  6691
  6692 				; optimize OK (block_attack.pas), line = 1559
  6693
  6694 31D6 8D 14 D0			sta ATARI.COLPM2
  6695
  6696 				; optimize OK (block_attack.pas), line = 1560
  6697
  6698 31D9 8D 15 D0			sta ATARI.COLPM3
  6699
  6700 				; optimize OK (block_attack.pas), line = 1562
  6701
  6702 31DC A9 A4			lda #$A4
  6703 31DE 8D 00 D0			sta ATARI.HPOSP0
  6704
  6705 				; optimize OK (block_attack.pas), line = 1563
  6706
  6707 31E1 A9 AC			lda #$AC
  6708 31E3 8D 01 D0			sta ATARI.HPOSP1
  6709
  6710 				; optimize OK (block_attack.pas), line = 1564
  6711
  6712 31E6 A9 B4			lda #$B4
  6713 31E8 8D 02 D0			sta ATARI.HPOSP2
  6714
  6715 				; optimize OK (block_attack.pas), line = 1565
  6716
  6717 31EB A9 BC			lda #$BC
  6718 31ED 8D 03 D0			sta ATARI.HPOSP3
  6719
  6720 				; ------------------------------------------------------------
  6721
  6722 = A3A5			PTR	= DATAORIGIN+$01C2
  6723
  6724 = A3A5			@VarData	= PTR
  6725 = 0002			@VarDataSize	= 2
  6726
  6727 31F0			@exit
  6728 					.ifdef @new
  6729 					lda <@VarData
  6730 					sta :ztmp
  6731 					lda >@VarData
  6732 					ldy #@VarDataSize-1
  6733 					jmp @FreeMem
  6734 					els
  6735 31F0 60				rts						; ret
  6736 					eif
  6737 				.endl
  6738
  6739 31F1			.local	RESETCHARSET					; PROCEDURE
  6740 31F1 8D A7 A3			sta A
  6741
  6742 				; optimize FAIL ('SYSTEM.PAUSE_016D', block_attack.pas), line = 1573
  6743
  6744 31F4 20 4E 19			jsr SYSTEM.PAUSE_016D
  6745
  6746 				; -------------------  ASM Block 00000143  -------------------
  6747
  6748 31F7 AD A7 A3			lda a
  6749 31FA 8D F7 19			sta JGPEor
  6750
  6751 31FD A9 E0			lda >CHARSET_RAM_ADDRESS
  6752 31FF 8D 7B 25			sta JGPFirstCharset
  6753 3202 8D EF 19			sta JGPCharset
  6754 				 
  6755 				; ------------------------------------------------------------
  6756
  6757 = A3A7			A	= DATAORIGIN+$01C4
  6758
  6759 = A3A7			@VarData	= A
  6760 = 0001			@VarDataSize	= 1
  6761
  6762 3205			@exit
  6763 					.ifdef @new
  6764 					lda <@VarData
  6765 					sta :ztmp
  6766 					lda >@VarData
  6767 					ldy #@VarDataSize-1
  6768 					jmp @FreeMem
  6769 					els
  6770 3205 60				rts						; ret
  6771 					eif
  6772 				.endl
  6773
  6774 3206			.local	DOINITGAME					; PROCEDURE
  6775
  6776 				; optimize FAIL ('DOINITPMG', block_attack.pas), line = 1592
  6777
  6778 3206 20 99 31			jsr DOINITPMG
  6779
  6780 				; optimize FAIL ('SYSTEM.RANDOMIZE', block_attack.pas), line = 1594
  6781
  6782 3209 20 72 19			jsr SYSTEM.RANDOMIZE
  6783
  6784 				; optimize OK (block_attack.pas), line = 1596
  6785
  6786 320C A9 00			lda #$00
  6787 320E 85 58			sta ATARI.SAVMSC
  6788 3210 A9 C0			lda #$C0
  6789 3212 85 59			sta ATARI.SAVMSC+1
  6790
  6791 				; optimize OK (block_attack.pas), line = 1598
  6792
  6793 3214 AC AB A2 84 82 AC + 	mwy VRAM :bp2
  6794 321E A0 00			ldy #$00
  6795 3220 98				tya
  6796 3221 91 82			sta (:bp2),y
  6797 3223 C8				iny
  6798 3224 A9 C0			lda #$C0
  6799 3226 91 82			sta (:bp2),y
  6800
  6801 				; optimize OK (block_attack.pas), line = 1600
  6802
  6803 3228 A9 00			lda #$00
  6804 322A 8D A9 A3			sta P
  6805 322D A9 C0			lda #$C0
  6806 322F 8D AA A3			sta P+1
  6807
  6808 				; optimize OK (block_attack.pas), line = 1601
  6809
  6810 3232 AD A9 A3			lda P
  6811 3235 85 88			sta SYSTEM.FILLCHAR_0141.A
  6812 3237 AD AA A3			lda P+1
  6813 323A 85 89			sta SYSTEM.FILLCHAR_0141.A+1
  6814 323C A9 00			lda #$00
  6815 323E 85 8C			sta SYSTEM.FILLCHAR_0141.COUNT
  6816 3240 A9 10			lda #$10
  6817 3242 85 8D			sta SYSTEM.FILLCHAR_0141.COUNT+1
  6818 3244 A9 00			lda #$00
  6819 3246 85 84			sta SYSTEM.FILLCHAR_0141.VALUE
  6820 3248				.LOCAL +MAIN.SYSTEM.FILLCHAR_0141
  6821 3248				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0141.M@INLINE [Source: block_attack.a65]
     4 3248 20 E8 16			jsr @fill
Source: block_attack.a65
  6822 					.ENDL
  6823
  6824 				; optimize OK (block_attack.pas), line = 1603
  6825
  6826 324B AD A9 A3			lda P
  6827 324E 18 69 1C			add #$1C
  6828 3251 8D A9 A3			sta P
  6829 3254 90 03			scc
  6830 3256 EE AA A3			inc P+1
  6831
  6832 				; optimize OK (block_attack.pas), line = 1605
  6833
  6834 3259 A9 00			lda #$00
  6835 325B 8D A8 A3			sta I
  6836
  6837 325E			l_1836
  6838 				; --- ForToDoCondition
  6839 325E AD A8 A3			lda I
  6840 3261 C9 1F			cmp #$1F
  6841 3263 B0 32			jcs l_1844
  6842
  6843 				; optimize OK (block_attack.pas), line = 1606
  6844
  6845 3265 AD 53 A1			lda VPANEL
  6846 3268 85 88			sta SYSTEM.MOVE_0144.SOURCE
  6847 326A AD 54 A1			lda VPANEL+1
  6848 326D 85 89			sta SYSTEM.MOVE_0144.SOURCE+1
  6849 326F AD A9 A3			lda P
  6850 3272 85 8C			sta SYSTEM.MOVE_0144.DEST
  6851 3274 AD AA A3			lda P+1
  6852 3277 85 8D			sta SYSTEM.MOVE_0144.DEST+1
  6853 3279 A9 0F			lda #$0F
  6854 327B 85 84			sta SYSTEM.MOVE_0144.COUNT
  6855 327D A9 00			lda #$00
  6856 327F 85 85			sta SYSTEM.MOVE_0144.COUNT+1
  6857 3281				.LOCAL +MAIN.SYSTEM.MOVE_0144
  6858 3281				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0144.M@INLINE [Source: block_attack.a65]
     4 3281 20 93 16			jsr @move
Source: block_attack.a65
  6859 					.ENDL
  6860
  6861 				; optimize OK (block_attack.pas), line = 1608
  6862
  6863 3284 AD A9 A3			lda P
  6864 3287 18 69 28			add #$28
  6865 328A 8D A9 A3			sta P
  6866 328D 90 03			scc
  6867 328F EE AA A3			inc P+1
  6868
  6869 				; --- ForToDoEpilog
  6870 3292 EE A8 A3			inc I
  6871 3295 D0 C7			jne l_1836
  6872 3297			l_1844
  6873
  6874 				; optimize OK (block_attack.pas), line = 1611
  6875
  6876 3297 A9 00			lda #$00
  6877 3299 8D A9 A3			sta P
  6878 329C A9 B0			lda #$B0
  6879 329E 8D AA A3			sta P+1
  6880
  6881 				; optimize OK (block_attack.pas), line = 1612
  6882
  6883 32A1 AD A9 A3			lda P
  6884 32A4 85 88			sta SYSTEM.FILLCHAR_0141.A
  6885 32A6 AD AA A3			lda P+1
  6886 32A9 85 89			sta SYSTEM.FILLCHAR_0141.A+1
  6887 32AB A9 00			lda #$00
  6888 32AD 85 8C			sta SYSTEM.FILLCHAR_0141.COUNT
  6889 32AF A9 10			lda #$10
  6890 32B1 85 8D			sta SYSTEM.FILLCHAR_0141.COUNT+1
  6891 32B3 A9 00			lda #$00
  6892 32B5 85 84			sta SYSTEM.FILLCHAR_0141.VALUE
  6893 32B7				.LOCAL +MAIN.SYSTEM.FILLCHAR_0141
  6894 32B7				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0141.M@INLINE [Source: block_attack.a65]
     4 32B7 20 E8 16			jsr @fill
Source: block_attack.a65
  6895 					.ENDL
  6896
  6897 				; optimize OK (block_attack.pas), line = 1614
  6898
  6899 32BA AD A9 A3			lda P
  6900 32BD 18 69 1C			add #$1C
  6901 32C0 8D A9 A3			sta P
  6902 32C3 90 03			scc
  6903 32C5 EE AA A3			inc P+1
  6904
  6905 				; optimize OK (block_attack.pas), line = 1616
  6906
  6907 32C8 A9 00			lda #$00
  6908 32CA 8D A8 A3			sta I
  6909
  6910 32CD			l_1863
  6911 				; --- ForToDoCondition
  6912 32CD AD A8 A3			lda I
  6913 32D0 C9 1F			cmp #$1F
  6914 32D2 B0 32			jcs l_1871
  6915
  6916 				; optimize OK (block_attack.pas), line = 1617
  6917
  6918 32D4 AD 53 A1			lda VPANEL
  6919 32D7 85 88			sta SYSTEM.MOVE_0144.SOURCE
  6920 32D9 AD 54 A1			lda VPANEL+1
  6921 32DC 85 89			sta SYSTEM.MOVE_0144.SOURCE+1
  6922 32DE AD A9 A3			lda P
  6923 32E1 85 8C			sta SYSTEM.MOVE_0144.DEST
  6924 32E3 AD AA A3			lda P+1
  6925 32E6 85 8D			sta SYSTEM.MOVE_0144.DEST+1
  6926 32E8 A9 0F			lda #$0F
  6927 32EA 85 84			sta SYSTEM.MOVE_0144.COUNT
  6928 32EC A9 00			lda #$00
  6929 32EE 85 85			sta SYSTEM.MOVE_0144.COUNT+1
  6930 32F0				.LOCAL +MAIN.SYSTEM.MOVE_0144
  6931 32F0				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0144.M@INLINE [Source: block_attack.a65]
     4 32F0 20 93 16			jsr @move
Source: block_attack.a65
  6932 					.ENDL
  6933
  6934 				; optimize OK (block_attack.pas), line = 1619
  6935
  6936 32F3 AD A9 A3			lda P
  6937 32F6 18 69 28			add #$28
  6938 32F9 8D A9 A3			sta P
  6939 32FC 90 03			scc
  6940 32FE EE AA A3			inc P+1
  6941
  6942 				; --- ForToDoEpilog
  6943 3301 EE A8 A3			inc I
  6944 3304 D0 C7			jne l_1863
  6945 3306			l_1871
  6946
  6947 				; GetResourceHandle
  6948 3306 A9 DD			lda <MAIN.@RESOURCE.f_id0
  6949 3308 8D AB A3			sta PTR
  6950 330B A9 40			lda >MAIN.@RESOURCE.f_id0
  6951 330D 8D AC A3			sta PTR+1
  6952
  6953 				; optimize OK (block_attack.pas), line = 1624
  6954
  6955 3310 AD AB A3			lda PTR
  6956 3313 8D 50 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER
  6957 3316 AD AC A3			lda PTR+1
  6958 3319 8D 51 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER+1
  6959 331C A9 00			lda #$00
  6960 331E 8D 52 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER
  6961 3321 A9 E0			lda #$E0
  6962 3323 8D 53 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER+1
  6963 3326 20 4E 1B			jsr ZX5.UNZX5_02A4
  6964
  6965 				; optimize OK (block_attack.pas), line = 1627
  6966
  6967 3329 AD 6B A1			lda PLAYFIELD
  6968 332C 85 82			sta :bp2
  6969 332E AD 6C A1			lda PLAYFIELD+1
  6970 3331 85 83			sta :bp2+1
  6971 3333 A9 00			lda #$00
  6972 3335 A0 7F			ldy #$7F
  6973 3337 91 82 88 10 FB		sta:rpl (:bp2),y-
  6974
  6975 				; optimize OK (block_attack.pas), line = 1629
  6976
  6977 333C A9 24			lda #$24
  6978 333E 8D C4 02			sta ATARI.COLOR0
  6979
  6980 				; optimize OK (block_attack.pas), line = 1630
  6981
  6982 3341 A9 18			lda #$18
  6983 3343 8D C5 02			sta ATARI.COLOR1
  6984
  6985 				; optimize OK (block_attack.pas), line = 1631
  6986
  6987 3346 A9 7C			lda #$7C
  6988 3348 8D C6 02			sta ATARI.COLOR2
  6989
  6990 				; optimize OK (block_attack.pas), line = 1632
  6991
  6992 334B A9 46			lda #$46
  6993 334D 8D C7 02			sta ATARI.COLOR3
  6994
  6995 				; optimize OK (block_attack.pas), line = 1634
  6996
  6997 3350 A9 02			lda #$02
  6998 3352 8D C8 02			sta ATARI.COLOR4
  6999
  7000 				; optimize OK (block_attack.pas), line = 1636
  7001
  7002 3355 8D 86 A2			sta XSEL
  7003
  7004 				; optimize OK (block_attack.pas), line = 1637
  7005
  7006 3358 A9 06			lda #$06
  7007 335A 8D 87 A2			sta YSEL
  7008
  7009 				; optimize FAIL ('SELECTBOX', block_attack.pas), line = 1639
  7010
  7011 335D 20 F8 2C			jsr SELECTBOX
  7012
  7013 				; optimize OK (block_attack.pas), line = 1641
  7014
  7015 3360 A9 08			lda #$08
  7016 3362 8D 84 A2			sta SCROLL
  7017
  7018 				; optimize OK (block_attack.pas), line = 1643
  7019
  7020 3365 A9 00			lda #$00
  7021 3367 8D 0C D0			sta ATARI.SIZEM
  7022
  7023 				; optimize OK (block_attack.pas), line = 1645
  7024
  7025 336A 8D 82 A2			sta VSC
  7026
  7027 				; optimize OK (block_attack.pas), line = 1646
  7028
  7029 336D 8D 83 A2			sta CNTROW
  7030
  7031 				; optimize OK (block_attack.pas), line = 1647
  7032
  7033 3370 8D 8D A2			sta TICK
  7034
  7035 				; optimize OK (block_attack.pas), line = 1649
  7036
  7037 3373 8D 88 A2			sta FOUND
  7038
  7039 				; optimize OK (block_attack.pas), line = 1650
  7040
  7041 3376 8D 9F A2			sta SCORE
  7042 3379 8D A0 A2			sta SCORE+1
  7043 337C 8D A1 A2			sta SCORE+2
  7044 337F 8D A2 A2			sta SCORE+3
  7045
  7046 				; optimize OK (block_attack.pas), line = 1651
  7047
  7048 3382 8D A3 A2			sta SCORE_
  7049 3385 8D A4 A2			sta SCORE_+1
  7050 3388 8D A5 A2			sta SCORE_+2
  7051 338B 8D A6 A2			sta SCORE_+3
  7052
  7053 				; optimize OK (block_attack.pas), line = 1653
  7054
  7055 338E 8D A7 A2			sta HISCORE_
  7056 3391 8D A8 A2			sta HISCORE_+1
  7057 3394 8D A9 A2			sta HISCORE_+2
  7058 3397 8D AA A2			sta HISCORE_+3
  7059
  7060 				; optimize OK (block_attack.pas), line = 1654
  7061
  7062 339A 8D 98 A2			sta SPEED_CNT
  7063
  7064 				; optimize OK (block_attack.pas), line = 1655
  7065
  7066 339D 8D 93 A2			sta SPEEDINC
  7067
  7068 				; optimize OK (block_attack.pas), line = 1656
  7069
  7070 33A0 8D 9D A2			sta SCROLLFREEZE
  7071 33A3 8D 9E A2			sta SCROLLFREEZE+1
  7072
  7073 				; optimize OK (block_attack.pas), line = 1658
  7074
  7075 33A6 8D 94 A2			sta SECOND
  7076
  7077 				; optimize OK (block_attack.pas), line = 1660
  7078
  7079 33A9 8D BE A2			sta STOP
  7080
  7081 				; optimize OK (block_attack.pas), line = 1662
  7082
  7083 33AC AD 81 A2			lda GAMEMODE
  7084 33AF C9 01			cmp #$01
  7085 33B1 D0 0B			jne l_18ED
  7086
  7087 				; optimize OK (block_attack.pas), line = 1663
  7088
  7089 33B3 A9 02			lda #$02
  7090 33B5 8D 90 A2			sta MINUTE
  7091
  7092 				; optimize OK (block_attack.pas), line = 1668
  7093
  7094 33B8 AD 7C A2			lda adr.GMSPEED+$01
  7095 33BB 4C C6 33			jmp l_1902
  7096 33BE			l_18ED
  7097
  7098 				; optimize OK (block_attack.pas), line = 1670
  7099
  7100 33BE A9 00			lda #$00
  7101 33C0 8D 90 A2			sta MINUTE
  7102
  7103 				; optimize OK (block_attack.pas), line = 1671
  7104
  7105 33C3 AD 7B A2			lda adr.GMSPEED
  7106 33C6			l_1902
  7107 33C6 8D 97 A2			sta SPEED
  7108
  7109 				; optimize OK (block_attack.pas), line = 1674
  7110
  7111 33C9 A9 FF			lda #$FF
  7112 33CB 8D 95 A2			sta SECOND_
  7113
  7114 				; optimize OK (block_attack.pas), line = 1676
  7115
  7116 33CE A9 01			lda #$01
  7117 33D0 8D 96 A2			sta LEVEL
  7118
  7119 				; optimize FAIL ('TIMEUPDATE', block_attack.pas), line = 1678
  7120
  7121 33D3 20 53 24			jsr TIMEUPDATE
  7122
  7123 				; optimize FAIL ('PANELUPDATE', block_attack.pas), line = 1679
  7124
  7125 33D6 20 80 23			jsr PANELUPDATE
  7126
  7127 				; optimize FAIL ('PRINTSPEED', block_attack.pas), line = 1681
  7128
  7129 33D9 20 D7 1F			jsr PRINTSPEED
  7130
  7131 				; optimize FAIL ('PRINTSCORE', block_attack.pas), line = 1682
  7132
  7133 33DC 20 A9 20			jsr PRINTSCORE
  7134
  7135 				; optimize FAIL ('PRINTHISCORE', block_attack.pas), line = 1683
  7136
  7137 33DF 20 D1 21			jsr PRINTHISCORE
  7138
  7139 				; optimize OK (block_attack.pas), line = 1685
  7140
  7141 33E2 A9 3E			lda #$3E
  7142 33E4 8D 2F 02			sta ATARI.SDMCTL
  7143
  7144 				; optimize OK (block_attack.pas), line = 1687
  7145
  7146 33E7 A9 04			lda #$04
  7147 33E9 20 F1 31			jsr RESETCHARSET
  7148
  7149 				; optimize OK (block_attack.pas), line = 1689
  7150
  7151 33EC A9 00			lda #$00
  7152 33EE 85 88			sta SYSTEM.FILLCHAR_0141.A
  7153 33F0 A9 A7			lda #$A7
  7154 33F2 85 89			sta SYSTEM.FILLCHAR_0141.A+1
  7155 33F4 A9 00			lda #$00
  7156 33F6 85 8C			sta SYSTEM.FILLCHAR_0141.COUNT
  7157 33F8 A9 09			lda #$09
  7158 33FA 85 8D			sta SYSTEM.FILLCHAR_0141.COUNT+1
  7159 33FC A9 00			lda #$00
  7160 33FE 85 84			sta SYSTEM.FILLCHAR_0141.VALUE
  7161 3400				.LOCAL +MAIN.SYSTEM.FILLCHAR_0141
  7162 3400				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0141.M@INLINE [Source: block_attack.a65]
     4 3400 20 E8 16			jsr @fill
Source: block_attack.a65
  7163 					.ENDL
  7164
  7165 				; GetResourceHandle
  7166 3403 A9 0E			lda <MAIN.@RESOURCE.sapr_yoshi
  7167 3405 8D C9 A2			sta MSX.MODUL
  7168 3408 A9 6F			lda >MAIN.@RESOURCE.sapr_yoshi
  7169 340A 8D CA A2			sta MSX.MODUL+1
  7170
  7171 				; optimize OK (block_attack.pas), line = 1692
  7172
  7173 340D A9 00			lda #$00
  7174 340F 8D C7 A2			sta MSX.PLAYER
  7175 3412 A9 A4			lda #$A4
  7176 3414 8D C8 A2			sta MSX.PLAYER+1
  7177
  7178 				; optimize OK (block_attack.pas), line = 1694
  7179
  7180 3417 A9 10			lda #$10
  7181 3419 8D 5A A2			sta SAPLZSS.TLZSSPLAY.INIT.A
  7182 341C AD 73 A1			lda MSX
  7183 341F AC 74 A1			ldy MSX+1
  7184 3422 20 68 1D			jsr SAPLZSS.TLZSSPLAY.INIT
  7185
  7186 				; optimize FAIL ('SAPLZSS.TLZSSPLAY.DECODE', block_attack.pas), line = 1695
  7187
  7188 3425 AD 73 A1			lda MSX
  7189 3428 AC 74 A1			ldy MSX+1
  7190 342B 20 C0 1D			jsr SAPLZSS.TLZSSPLAY.DECODE
  7191
  7192 				; optimize FAIL ('SAPLZSS.TLZSSPLAY.PLAY', block_attack.pas), line = 1696
  7193
  7194 342E AD 73 A1			lda MSX
  7195 3431 AC 74 A1			ldy MSX+1
  7196 3434 20 FF 1D			jsr SAPLZSS.TLZSSPLAY.PLAY
  7197
  7198 				; optimize OK (block_attack.pas), line = 1698
  7199
  7200 3437 A9 01			lda #$01
  7201 3439 8D C1 A2			sta MSX_PLAY
  7202
  7203 				; optimize OK (block_attack.pas), line = 1699
  7204
  7205 343C A9 00			lda #$00
  7206 343E 8D C5 A2			sta MSX_FASTER
  7207
  7208 				; ------------------------------------------------------------
  7209
  7210 = A3A8			I	= DATAORIGIN+$01C5
  7211 = A3A9			P	= DATAORIGIN+$01C6
  7212 = A3AB			PTR	= DATAORIGIN+$01C8
  7213
  7214 = A3A8			@VarData	= I
  7215 = 0005			@VarDataSize	= 5
  7216
  7217 3441			@exit
  7218 					.ifdef @new
  7219 					lda <@VarData
  7220 					sta :ztmp
  7221 					lda >@VarData
  7222 					ldy #@VarDataSize-1
  7223 					jmp @FreeMem
  7224 					els
  7225 3441 60				rts						; ret
  7226 					eif
  7227 				.endl
  7228
  7229 3442			.local	ONSHIFTDOWN					; FUNCTION | ASSEMBLER
  7230
  7231 				; -------------------  ASM Block 00000144  -------------------
  7232
  7233 3442 A0 00			ldy #0
  7234
  7235 3444 AD 0F D2			lda skctl
  7236 3447 29 08			and #%1000
  7237 3449 D0 01			sne
  7238 344B C8				iny
  7239
  7240 344C 8C AD A3			sty Result
  7241
  7242 344F			@exit
  7243
  7244 				; ------------------------------------------------------------
  7245
  7246 = A3AD			RESULT	= DATAORIGIN+$01CA
  7247 344F 60				rts						; ret
  7248 				.endl
  7249
  7250 3450			.local	JOYSCAN						; PROCEDURE
  7251
  7252 3450 4C 75 34			jmp l_1939
  7253
  7254 3453			.local	GET_KEY						; PROCEDURE | ASSEMBLER
  7255
  7256 				; -------------------  ASM Block 00000145  -------------------
  7257
  7258 3453 AD 0F D2			lda $d20f
  7259 3456 29 04			and #4
  7260 3458 D0 1A			bne @exit
  7261
  7262 345A AD 09 D2			lda $d209
  7263
  7264 345D C9 00			cmp onKey_: #0
  7265 345F D0 08			bne skp
  7266
  7267 3461 A0 06			ldy delay: #6
  7268 3463 88				dey
  7269 3464 8C 62 34			sty delay
  7270 3467 D0 0B			bne @exit
  7271 3469			skp
  7272 3469 8D B1 A3			sta onKey
  7273 346C 8D 5E 34			sta onKey_
  7274
  7275 346F A9 06 8D 62 34		mva #6 delay
  7276
  7277 3474			@exit
  7278 					.ifdef @new
  7279 					lda <@VarData
  7280 					sta :ztmp
  7281 					lda >@VarData
  7282 					ldy #@VarDataSize-1
  7283 					jmp @FreeMem
  7284 					els
  7285 3474 60				rts						; ret
  7286 					eif
  7287 				.endl
  7288 3475			l_1939
  7289
  7290 				; optimize OK (block_attack.pas), line = 1745
  7291
  7292 3475			?volatile:
  7293 3475 A0 01			ldy #1
  7294 3477 AD 10 D0			lda JOYSTICK.TRIG0
  7295 347A F0 01			beq @+
  7296 347C 88				dey
  7297 				@
  7298 347D 98				tya
  7299 347E 8D C0 A2			sta FIREBTN
  7300
  7301 				; optimize FAIL ('GET_KEY', block_attack.pas), line = 1747
  7302
  7303 3481 20 53 34			jsr GET_KEY
  7304
  7305 				; optimize OK (block_attack.pas), line = 1749
  7306
  7307 3484 AD 00 D3			lda ATARI.PORTA
  7308 3487 29 0F			and #$0F
  7309 3489 8D B0 A3			sta A
  7310
  7311 				; optimize FAIL ('ONSHIFTDOWN', block_attack.pas), line = 1751
  7312
  7313 348C 20 42 34			jsr ONSHIFTDOWN
  7314 348F AD AD A3			lda ONSHIFTDOWN.RESULT
  7315 3492 8D BC A2			sta SHIFTKEY
  7316
  7317 				; optimize FAIL ('JOYSTICK.FIRE2', block_attack.pas), line = 1753
  7318
  7319 3495 20 13 1B			jsr JOYSTICK.FIRE2
  7320 3498 AD 32 A2			lda JOYSTICK.FIRE2.RESULT
  7321 349B C9 1F			cmp #$1F
  7322 349D 90 05			jcc l_1962
  7323 349F A9 01			lda #$01
  7324 34A1 8D BC A2			sta SHIFTKEY
  7325 34A4			l_1962
  7326
  7327 				; optimize OK (block_attack.pas), line = 1756
  7328
  7329 34A4 AD B0 A3			lda A
  7330 34A7 CD 8A A2			cmp JOY
  7331 34AA D0 12			jne l_197D
  7332
  7333 				; optimize OK (block_attack.pas), line = 1758
  7334
  7335 34AC AD 89 A2			lda JOYDELAY
  7336 34AF C9 01			cmp #$01
  7337 34B1 90 06			jcc l_1990
  7338 34B3 CE 89 A2			dec JOYDELAY
  7339 34B6 4C 3D 35			jmp @exit
  7340 34B9			l_1990
  7341
  7342 				; optimize OK (block_attack.pas), line = 1760
  7343
  7344 34B9 A9 FF			lda #$FF
  7345 34BB 4C C6 34			jmp l_19A4
  7346 34BE			l_197D
  7347
  7348 				; optimize OK (block_attack.pas), line = 1763
  7349
  7350 34BE A9 06			lda #$06
  7351 34C0 8D 89 A2			sta JOYDELAY
  7352
  7353 				; optimize OK (block_attack.pas), line = 1764
  7354
  7355 34C3 AD B0 A3			lda A
  7356 34C6			l_19A4
  7357 34C6 8D 8A A2			sta JOY
  7358
  7359 				; optimize OK (block_attack.pas), line = 1768
  7360
  7361 34C9 AD B1 A3			lda ONKEY
  7362 34CC F0 58			jeq l_19C0
  7363
  7364 				; optimize OK (block_attack.pas), line = 1770
  7365
  7366 34CE A9 00			lda #$00
  7367 34D0 8D C0 A2			sta FIREBTN
  7368
  7369 				; optimize OK (block_attack.pas), line = 1772
  7370
  7371 34D3 AD B1 A3			lda ONKEY
  7372 34D6 8D B2 A3			sta @CASETMP_0009
  7373 34D9 C9 1C			cmp #$1C
  7374 34DB D0 0B			jne l_19D0
  7375 				@
  7376
  7377 				; optimize OK (block_attack.pas), line = 1773
  7378
  7379 34DD A9 01			lda #$01
  7380 34DF 8D BE A2			sta STOP
  7381 34E2 EE 90 A2			inc MINUTE
  7382
  7383 34E5 4C 21 35			jmp a_0009
  7384 34E8			l_19D0
  7385 34E8 C9 2F			cmp #$2F
  7386 34EA D0 08			jne l_19E1
  7387 				@
  7388
  7389 				; optimize OK (block_attack.pas), line = 1775
  7390
  7391 34EC A9 01			lda #$01
  7392 34EE 8D C0 A2			sta FIREBTN
  7393
  7394 34F1 4C 21 35			jmp a_0009
  7395 34F4			l_19E1
  7396 34F4 C9 3A			cmp #$3A
  7397 34F6 D0 08			jne l_19EE
  7398 				@
  7399
  7400 				; optimize OK (block_attack.pas), line = 1777
  7401
  7402 34F8 A9 07			lda #$07
  7403 34FA 8D B0 A3			sta A
  7404
  7405 34FD 4C 21 35			jmp a_0009
  7406 3500			l_19EE
  7407 3500 C9 3F			cmp #$3F
  7408 3502 D0 08			jne l_19FB
  7409 				@
  7410
  7411 				; optimize OK (block_attack.pas), line = 1778
  7412
  7413 3504 A9 0B			lda #$0B
  7414 3506 8D B0 A3			sta A
  7415
  7416 3509 4C 21 35			jmp a_0009
  7417 350C			l_19FB
  7418 350C C9 2E			cmp #$2E
  7419 350E D0 08			jne l_1A08
  7420 				@
  7421
  7422 				; optimize OK (block_attack.pas), line = 1779
  7423
  7424 3510 A9 0E			lda #$0E
  7425 3512 8D B0 A3			sta A
  7426
  7427 3515 4C 21 35			jmp a_0009
  7428 3518			l_1A08
  7429 3518 C9 3E			cmp #$3E
  7430 351A D0 05			jne l_1A15
  7431 				@
  7432
  7433 				; optimize OK (block_attack.pas), line = 1780
  7434
  7435 351C A9 0D			lda #$0D
  7436 351E 8D B0 A3			sta A
  7437
  7438 3521			l_1A15
  7439 3521			a_0009
  7440
  7441 				; optimize OK (block_attack.pas), line = 1783
  7442
  7443 3521 A9 00			lda #$00
  7444 3523 8D B1 A3			sta ONKEY
  7445 3526			l_19C0
  7446
  7447 				; optimize FAIL (':TMP', block_attack.pas), line = 1787
  7448
  7449 3526 AD AE A3			lda PRC
  7450 3529 85 91			sta :TMP+1
  7451 352B AD AF A3			lda PRC+1
  7452 352E 85 92			sta :TMP+2
  7453 3530 A9 4C			lda #$4C
  7454 3532 85 90			sta :TMP
  7455 3534 E8				inx
  7456 3535 AD B0 A3 95 94		mva A :STACKORIGIN,x
  7457 353A 20 90 00			jsr :TMP
  7458
  7459 				; ------------------------------------------------------------
  7460
  7461 = A3AE			PRC	= DATAORIGIN+$01CB
  7462 = A3B0			A	= DATAORIGIN+$01CD
  7463 = A3B1			ONKEY	= DATAORIGIN+$01CE
  7464 = A3B2			@CASETMP_0009	= DATAORIGIN+$01CF
  7465
  7466 = A3AE			@VarData	= PRC
  7467 = 0005			@VarDataSize	= 5
  7468
  7469 353D			@exit
  7470 					.ifdef @new
  7471 					lda <@VarData
  7472 					sta :ztmp
  7473 					lda >@VarData
  7474 					ldy #@VarDataSize-1
  7475 					jmp @FreeMem
  7476 					els
  7477 353D 60				rts						; ret
  7478 					eif
  7479 				.endl
  7480
  7481 353E			.local	JOYGAME						; PROCEDURE
  7482
  7483 				; ------------------------------------------------------------
  7484
  7485 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  7486 				; as Pointer
  7487 353E B5 94			lda :STACKORIGIN,x
  7488 3540 8D B3 A3			sta A
  7489 3543 CA				dex
  7490 3544			@main
  7491
  7492 				; optimize OK (block_attack.pas), line = 1795
  7493
  7494 3544 AD 84 A2			lda SCROLL
  7495 3547 F0 03			jeq l_1A46
  7496 3549 4C 9B 35			jmp @exit
  7497 354C			l_1A46
  7498
  7499 				; optimize OK (block_attack.pas), line = 1797
  7500
  7501 354C AD B3 A3			lda A
  7502 354F 8D B4 A3			sta @CASETMP_000A
  7503 3552 C9 0B			cmp #$0B
  7504 3554 D0 0D			jne l_1A54
  7505 				@
  7506
  7507 				; optimize OK (block_attack.pas), line = 1798
  7508
  7509 3556 AD 86 A2			lda XSEL
  7510 3559 C9 01			cmp #$01
  7511 355B 90 03			jcc l_1A66
  7512 355D CE 86 A2			dec XSEL
  7513 3560			l_1A66
  7514
  7515 3560 4C 9B 35			jmp a_000A
  7516 3563			l_1A54
  7517 3563 C9 07			cmp #$07
  7518 3565 D0 0D			jne l_1A76
  7519 				@
  7520
  7521 				; optimize OK (block_attack.pas), line = 1799
  7522
  7523 3567 AD 86 A2			lda XSEL
  7524 356A C9 04			cmp #$04
  7525 356C B0 03			jcs l_1A88
  7526 356E EE 86 A2			inc XSEL
  7527 3571			l_1A88
  7528
  7529 3571 4C 9B 35			jmp a_000A
  7530 3574			l_1A76
  7531 3574 C9 0D			cmp #$0D
  7532 3576 D0 15			jne l_1A98
  7533 				@
  7534
  7535 				; optimize OK (block_attack.pas), line = 1800
  7536
  7537 3578 A9 0D			lda #$0D
  7538 357A 38 ED 83 A2			sub CNTROW
  7539 357E 85 9E			sta :STACKORIGIN+10
  7540 3580 AD 87 A2			lda YSEL
  7541 3583 C5 9E			cmp :STACKORIGIN+10
  7542 3585 B0 03			jcs l_1AB0
  7543 3587 EE 87 A2			inc YSEL
  7544 358A			l_1AB0
  7545
  7546 358A 4C 9B 35			jmp a_000A
  7547 358D			l_1A98
  7548 358D C9 0E			cmp #$0E
  7549 358F D0 0A			jne l_1AC0
  7550 				@
  7551
  7552 				; optimize OK (block_attack.pas), line = 1801
  7553
  7554 3591 AD 87 A2			lda YSEL
  7555 3594 C9 01			cmp #$01
  7556 3596 90 03			jcc l_1AD2
  7557 3598 CE 87 A2			dec YSEL
  7558 359B			l_1AD2
  7559
  7560 359B			l_1AC0
  7561 359B			a_000A
  7562
  7563 				; ------------------------------------------------------------
  7564
  7565 = A3B3			A	= DATAORIGIN+$01D0
  7566 = A3B4			@CASETMP_000A	= DATAORIGIN+$01D1
  7567
  7568 = A3B3			@VarData	= A
  7569 = 0002			@VarDataSize	= 2
  7570
  7571 359B			@exit
  7572 					.ifdef @new
  7573 					lda <@VarData
  7574 					sta :ztmp
  7575 					lda >@VarData
  7576 					ldy #@VarDataSize-1
  7577 					jmp @FreeMem
  7578 					els
  7579 359B 60				rts						; ret
  7580 					eif
  7581 				.endl
  7582
  7583 359C			.local	DOGAMEOVER					; FUNCTION
  7584
  7585 359C 4C EC 36			jmp l_1AE5
  7586
  7587 359F			.local	SETYES						; PROCEDURE
  7588
  7589 				; optimize OK (doGameOver2.inc), line = 17
  7590
  7591 359F A9 52			lda #$52
  7592 35A1 8D 92 A2			sta RIGHT_EDGE
  7593
  7594 				; optimize OK (doGameOver2.inc), line = 18
  7595
  7596 35A4 A9 5F			lda #$5F
  7597 35A6 8D 91 A2			sta LEFT_EDGE
  7598
  7599 				; optimize OK (doGameOver2.inc), line = 19
  7600
  7601 35A9 A9 58			lda #$58
  7602 35AB 8D 06 D0			sta ATARI.HPOSM2
  7603 35AE			@exit
  7604 					.ifdef @new
  7605 					lda <@VarData
  7606 					sta :ztmp
  7607 					lda >@VarData
  7608 					ldy #@VarDataSize-1
  7609 					jmp @FreeMem
  7610 					els
  7611 35AE 60				rts						; ret
  7612 					eif
  7613 				.endl
  7614
  7615 35AF			.local	SETNO						; PROCEDURE
  7616
  7617 				; optimize OK (doGameOver2.inc), line = 26
  7618
  7619 35AF A9 75			lda #$75
  7620 35B1 8D 92 A2			sta RIGHT_EDGE
  7621
  7622 				; optimize OK (doGameOver2.inc), line = 27
  7623
  7624 35B4 A9 7B			lda #$7B
  7625 35B6 8D 91 A2			sta LEFT_EDGE
  7626
  7627 				; optimize OK (doGameOver2.inc), line = 28
  7628
  7629 35B9 A9 00			lda #$00
  7630 35BB 8D 06 D0			sta ATARI.HPOSM2
  7631 35BE			@exit
  7632 					.ifdef @new
  7633 					lda <@VarData
  7634 					sta :ztmp
  7635 					lda >@VarData
  7636 					ldy #@VarDataSize-1
  7637 					jmp @FreeMem
  7638 					els
  7639 35BE 60				rts						; ret
  7640 					eif
  7641 				.endl
  7642
  7643 35BF			.local	FILL						; PROCEDURE
  7644 35BF 8D BC A3			sta A
  7645
  7646 				; optimize OK (doGameOver2.inc), line = 37
  7647
  7648 35C2 A9 59			lda #$59
  7649 35C4 8D BD A3			sta K
  7650
  7651 35C7			l_1B11
  7652 				; --- ForToDoCondition
  7653 35C7 AC BD A3			ldy K
  7654 35CA B9 80 06			lda adr.PLAYFIELD,y
  7655 35CD F0 26			jeq l_1B34
  7656
  7657 				; optimize OK (doGameOver2.inc), line = 40
  7658
  7659 35CF AD BC A3			lda A
  7660 35D2 99 80 06			sta adr.PLAYFIELD,y
  7661
  7662 				; optimize OK (doGameOver2.inc), line = 42
  7663
  7664 35D5 A9 06			lda #$06
  7665 35D7 85 8C			sta @BYTE.MOD.B
  7666 35D9 AD BD A3			lda K
  7667 35DC 85 84			sta @BYTE.MOD.A
  7668 35DE 20 78 17			jsr @BYTE.MOD
  7669 35E1 A5 90			lda @BYTE.MOD.RESULT
  7670 35E3 D0 10			jne l_1B54
  7671 35E5 20 50 28			jsr UPDATETILES
  7672 35E8 A9 02			lda #$02
  7673 35EA 8D F4 A1			sta SYSTEM.PAUSE_016E.N
  7674 35ED A9 00			lda #$00
  7675 35EF 8D F5 A1			sta SYSTEM.PAUSE_016E.N+1
  7676 35F2 20 55 19			jsr SYSTEM.PAUSE_016E
  7677 35F5			l_1B54
  7678 35F5			l_1B34
  7679
  7680 				; --- ForToDoEpilog
  7681 35F5 CE BD A3			dec K
  7682 35F8 10 CD			jpl l_1B11
  7683 35FA			l_1B1F
  7684
  7685 				; optimize FAIL ('UPDATETILES', doGameOver2.inc), line = 45
  7686
  7687 35FA 20 50 28			jsr UPDATETILES
  7688
  7689 				; ------------------------------------------------------------
  7690
  7691 = A3BC			A	= DATAORIGIN+$01D9
  7692 = A3BD			K	= DATAORIGIN+$01DA
  7693
  7694 = A3BC			@VarData	= A
  7695 = 0002			@VarDataSize	= 2
  7696
  7697 35FD			@exit
  7698 					.ifdef @new
  7699 					lda <@VarData
  7700 					sta :ztmp
  7701 					lda >@VarData
  7702 					ldy #@VarDataSize-1
  7703 					jmp @FreeMem
  7704 					els
  7705 35FD 60				rts						; ret
  7706 					eif
  7707 				.endl
  7708
  7709 35FE			.local	DOMOVELOGO					; PROCEDURE
  7710 35FE 8D BE A3			sta Y
  7711
  7712 				; optimize OK (doGameOver2.inc), line = 59
  7713
  7714 3601 AD BB A3			lda TIMEOUT
  7715 3604 F0 09			jeq l_1B72
  7716
  7717 				; optimize OK (doGameOver2.inc), line = 60
  7718
  7719 3606 A9 90			lda #$90
  7720 3608 85 E0			sta PTR
  7721 360A A9 10			lda #$10
  7722 360C 4C 15 36			jmp l_1B80
  7723 360F			l_1B72
  7724
  7725 				; optimize OK (doGameOver2.inc), line = 62
  7726
  7727 360F A9 30			lda #$30
  7728 3611 85 E0			sta PTR
  7729 3613 A9 0D			lda #$0D
  7730 3615			l_1B80
  7731 3615 85 E1			sta PTR+1
  7732
  7733 				; optimize OK (doGameOver2.inc), line = 64
  7734
  7735 3617 A5 58			lda ATARI.SAVMSC
  7736 3619 18 69 04			add #$04
  7737 361C 8D B6 A3			sta P
  7738 361F A5 59			lda ATARI.SAVMSC+1
  7739 3621 69 00			adc #$00
  7740 3623 8D B7 A3			sta P+1
  7741
  7742 				; -------------------  ASM Block 00000146  -------------------
  7743
  7744 3626 AD BE A3			lda y
  7745 3629 29 03			and #3
  7746 362B 0A 0A			:2 asl @
  7747 362D 18 69 E0			add >CHARSET_RAM_ADDRESS
  7748
  7749 3630 8D 7B 25		 	sta JGPFirstCharset
  7750 3633 8D EF 19			sta JGPCharset
  7751 				 
  7752 				; optimize OK (doGameOver2.inc), line = 76
  7753
  7754 3636 AD BE A3			lda Y
  7755 3639 29 03			and #$03
  7756 363B 0A				asl @
  7757 363C A8				tay
  7758 363D A5 E0			lda PTR
  7759 363F 18 79 60 16			add adr.GMOV,y
  7760 3643 85 E0			sta PTR
  7761 3645 A5 E1			lda PTR+1
  7762 3647 79 61 16			adc adr.GMOV+1,y
  7763 364A 85 E1			sta PTR+1
  7764
  7765 				; optimize OK (doGameOver2.inc), line = 78
  7766
  7767 364C AD BE A3			lda Y
  7768 364F 4A				lsr @
  7769 3650 4A				lsr @
  7770 3651 8D BE A3			sta Y
  7771
  7772 				; optimize OK (doGameOver2.inc), line = 80
  7773
  7774 3654 20 99 17			jsr @mul40
  7775 3657 18 6D B6 A3			add P
  7776 365B 8D B6 A3			sta P
  7777 365E AD B7 A3			lda P+1
  7778 3661 65 85			adc :eax+1
  7779 3663 8D B7 A3			sta P+1
  7780
  7781 				; optimize OK (doGameOver2.inc), line = 82
  7782
  7783 3666 AD B6 A3			lda P
  7784 3669 85 82			sta :bp2
  7785 366B AD B7 A3			lda P+1
  7786 366E 85 83			sta :bp2+1
  7787 3670 A9 00			lda #$00
  7788 3672 A0 17			ldy #$17
  7789 3674 91 82 88 10 FB		sta:rpl (:bp2),y-
  7790
  7791 				; optimize OK (doGameOver2.inc), line = 83
  7792
  7793 3679 AD B6 A3			lda P
  7794 367C 18 69 28			add #$28
  7795 367F 8D B6 A3			sta P
  7796 3682 90 03			scc
  7797 3684 EE B7 A3			inc P+1
  7798
  7799 				; optimize OK (doGameOver2.inc), line = 84
  7800
  7801 3687 85 88			sta SYSTEM.FILLCHAR_0141.A
  7802 3689 AD B7 A3			lda P+1
  7803 368C 85 89			sta SYSTEM.FILLCHAR_0141.A+1
  7804 368E A9 18			lda #$18
  7805 3690 85 8C			sta SYSTEM.FILLCHAR_0141.COUNT
  7806 3692 A9 00			lda #$00
  7807 3694 85 8D			sta SYSTEM.FILLCHAR_0141.COUNT+1
  7808 3696 85 84			sta SYSTEM.FILLCHAR_0141.VALUE
  7809 3698				.LOCAL +MAIN.SYSTEM.FILLCHAR_0141
  7810 3698				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0141.M@INLINE [Source: block_attack.a65]
     4 3698 20 E8 16			jsr @fill
Source: block_attack.a65
  7811 					.ENDL
  7812
  7813 				; optimize OK (doGameOver2.inc), line = 85
  7814
  7815 369B AD B6 A3			lda P
  7816 369E 18 69 28			add #$28
  7817 36A1 8D B6 A3			sta P
  7818 36A4 90 03			scc
  7819 36A6 EE B7 A3			inc P+1
  7820
  7821 				; optimize OK (doGameOver2.inc), line = 87
  7822
  7823 36A9 A9 06			lda #$06
  7824 36AB 8D BF A3			sta I
  7825
  7826 36AE			l_1BBC
  7827 				; --- ForToDoCondition
  7828 36AE A5 E0			lda PTR
  7829 36B0 85 88			sta SYSTEM.MOVE_0143.SOURCE
  7830 36B2 A5 E1			lda PTR+1
  7831 36B4 85 89			sta SYSTEM.MOVE_0143.SOURCE+1
  7832 36B6 AD B6 A3			lda P
  7833 36B9 85 8C			sta SYSTEM.MOVE_0143.DEST
  7834 36BB AD B7 A3			lda P+1
  7835 36BE 85 8D			sta SYSTEM.MOVE_0143.DEST+1
  7836 36C0 A9 18			lda #$18
  7837 36C2 85 84			sta SYSTEM.MOVE_0143.COUNT
  7838 36C4 A9 00			lda #$00
  7839 36C6 85 85			sta SYSTEM.MOVE_0143.COUNT+1
  7840 36C8				.LOCAL +MAIN.SYSTEM.MOVE_0143
  7841 36C8				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0143.M@INLINE [Source: block_attack.a65]
     4 36C8 20 93 16			jsr @move
Source: block_attack.a65
  7842 					.ENDL
  7843
  7844 				; optimize OK (doGameOver2.inc), line = 89
  7845
  7846 36CB A5 E0			lda PTR
  7847 36CD 18 69 18			add #$18
  7848 36D0 85 E0			sta PTR
  7849 36D2 90 02			scc
  7850 36D4 E6 E1			inc PTR+1
  7851
  7852 				; optimize OK (doGameOver2.inc), line = 90
  7853
  7854 36D6 AD B6 A3			lda P
  7855 36D9 18 69 28			add #$28
  7856 36DC 8D B6 A3			sta P
  7857 36DF 90 03			scc
  7858 36E1 EE B7 A3			inc P+1
  7859
  7860 				; --- ForToDoEpilog
  7861 36E4 CE BF A3			dec I
  7862 36E7 10 C5			jpl l_1BBC
  7863 36E9			l_1BCA
  7864
  7865 				; ------------------------------------------------------------
  7866
  7867 = A3BE			Y	= DATAORIGIN+$01DB
  7868 = A3BF			I	= DATAORIGIN+$01DC
  7869 = 1660			adr.GMOV	= CODEORIGIN+$0CE0
  7870 36E9			.var GMOV	= adr.GMOV .word
  7871
  7872 = A3BE			@VarData	= Y
  7873 = 0002			@VarDataSize	= 2
  7874
  7875 36E9			@exit
  7876 					.ifdef @new
  7877 					lda <@VarData
  7878 					sta :ztmp
  7879 					lda >@VarData
  7880 					ldy #@VarDataSize-1
  7881 					jmp @FreeMem
  7882 					els
  7883 36E9 60				rts						; ret
  7884 					eif
  7885 = 36EA 60 16		GMOV
  7885 				.endl
  7886 36EC			l_1AE5
  7887
  7888 				; optimize OK (doGameOver2.inc), line = 102
  7889
  7890 36EC A9 00			lda #$00
  7891 36EE 8D 84 A2			sta SCROLL
  7892
  7893 				; optimize OK (doGameOver2.inc), line = 104
  7894
  7895 36F1 8D C5 A2			sta MSX_FASTER
  7896
  7897 				; optimize OK (doGameOver2.inc), line = 105
  7898
  7899 36F4 8D C1 A2			sta MSX_PLAY
  7900
  7901 				; optimize FAIL ('SYSTEM.PAUSE_016D', doGameOver2.inc), line = 107
  7902
  7903 36F7 20 4E 19			jsr SYSTEM.PAUSE_016D
  7904
  7905 				; optimize OK (doGameOver2.inc), line = 109
  7906
  7907 36FA A9 10			lda #$10
  7908 36FC 8D 74 A2			sta SAPLZSS.TLZSSPLAY.STOP.A
  7909 36FF AD 73 A1			lda MSX
  7910 3702 AC 74 A1			ldy MSX+1
  7911 3705 20 38 1E			jsr SAPLZSS.TLZSSPLAY.STOP
  7912
  7913 				; optimize OK (doGameOver2.inc), line = 117
  7914
  7915 3708 AD 94 A2			lda SECOND
  7916 370B 18 6D 90 A2			add MINUTE
  7917 370F 85 9D			sta :STACKORIGIN+9
  7918 3711 A9 00			lda #$00
  7919 3713 69 00			adc #$00
  7920 3715 A0 01			ldy #1
  7921 3717 05 9D			ora :STACKORIGIN+9
  7922 3719 F0 01			beq @+
  7923 371B 88				dey
  7924 				@
  7925 371C 98				tya
  7926 371D 8D BB A3			sta TIMEOUT
  7927
  7928 				; optimize OK (doGameOver2.inc), line = 120
  7929
  7930 3720 A9 00			lda #$00
  7931 3722 8D 05 D0			sta ATARI.HPOSM1
  7932
  7933 				; optimize OK (doGameOver2.inc), line = 121
  7934
  7935 3725 8D 06 D0			sta ATARI.HPOSM2
  7936
  7937 				; optimize OK (doGameOver2.inc), line = 123
  7938
  7939 3728 8D 92 A2			sta RIGHT_EDGE
  7940
  7941 				; optimize OK (doGameOver2.inc), line = 124
  7942
  7943 372B 8D 91 A2			sta LEFT_EDGE
  7944
  7945 				; optimize OK (doGameOver2.inc), line = 126
  7946
  7947 372E A9 AD			lda #$AD
  7948 3730 20 BF 35			jsr FILL
  7949
  7950 				; optimize OK (doGameOver2.inc), line = 127
  7951
  7952 3733 A9 02			lda #$02
  7953 3735 8D F4 A1			sta SYSTEM.PAUSE_016E.N
  7954 3738 A9 00			lda #$00
  7955 373A 8D F5 A1			sta SYSTEM.PAUSE_016E.N+1
  7956 373D 20 55 19			jsr SYSTEM.PAUSE_016E
  7957
  7958 				; optimize OK (doGameOver2.inc), line = 129
  7959
  7960 3740 A9 AE			lda #$AE
  7961 3742 20 BF 35			jsr FILL
  7962
  7963 				; optimize OK (doGameOver2.inc), line = 131
  7964
  7965 3745 A9 00			lda #$00
  7966 3747 20 BF 35			jsr FILL
  7967
  7968 				; optimize OK (doGameOver2.inc), line = 134
  7969
  7970 374A A5 58			lda ATARI.SAVMSC
  7971 374C 85 E0			sta PTR
  7972 374E A5 59			lda ATARI.SAVMSC+1
  7973 3750 85 E1			sta PTR+1
  7974
  7975 				; optimize OK (doGameOver2.inc), line = 136
  7976
  7977 3752 A9 3F			lda #$3F
  7978 3754 8D BA A3			sta I
  7979
  7980 3757			l_1C1F
  7981 				; --- ForToDoCondition
  7982 3757 A5 E0			lda PTR
  7983 3759 85 82			sta :bp2
  7984 375B A5 E1			lda PTR+1
  7985 375D 85 83			sta :bp2+1
  7986 375F A9 00			lda #$00
  7987 3761 A0 1B			ldy #$1B
  7988 3763 91 82 88 10 FB		sta:rpl (:bp2),y-
  7989
  7990 				; optimize OK (doGameOver2.inc), line = 139
  7991
  7992 3768 A0 1E			ldy #$1E
  7993 376A A9 FA			lda #$FA
  7994 376C 91 E0			sta (PTR),y
  7995
  7996 				; optimize OK (doGameOver2.inc), line = 140
  7997
  7998 376E C8				iny
  7999 376F 91 E0			sta (PTR),y
  8000
  8001 				; optimize OK (doGameOver2.inc), line = 141
  8002
  8003 3771 C8				iny
  8004 3772 91 E0			sta (PTR),y
  8005
  8006 				; optimize OK (doGameOver2.inc), line = 142
  8007
  8008 3774 C8				iny
  8009 3775 91 E0			sta (PTR),y
  8010
  8011 				; optimize OK (doGameOver2.inc), line = 143
  8012
  8013 3777 C8				iny
  8014 3778 91 E0			sta (PTR),y
  8015
  8016 				; optimize OK (doGameOver2.inc), line = 144
  8017
  8018 377A C8				iny
  8019 377B 91 E0			sta (PTR),y
  8020
  8021 				; optimize OK (doGameOver2.inc), line = 145
  8022
  8023 377D C8				iny
  8024 377E 91 E0			sta (PTR),y
  8025
  8026 				; optimize OK (doGameOver2.inc), line = 147
  8027
  8028 3780 A5 E0			lda PTR
  8029 3782 18 69 28			add #$28
  8030 3785 85 E0			sta PTR
  8031 3787 90 02			scc
  8032 3789 E6 E1			inc PTR+1
  8033
  8034 				; --- ForToDoEpilog
  8035 378B CE BA A3			dec I
  8036 378E 10 C7			jpl l_1C1F
  8037 3790			l_1C2D
  8038
  8039 				; optimize OK (doGameOver2.inc), line = 150
  8040
  8041 3790 A9 00			lda #$00
  8042 3792 85 88			sta SYSTEM.FILLCHAR_0141.A
  8043 3794 A9 A7			lda #$A7
  8044 3796 85 89			sta SYSTEM.FILLCHAR_0141.A+1
  8045 3798 A9 00			lda #$00
  8046 379A 85 8C			sta SYSTEM.FILLCHAR_0141.COUNT
  8047 379C A9 09			lda #$09
  8048 379E 85 8D			sta SYSTEM.FILLCHAR_0141.COUNT+1
  8049 37A0 A9 00			lda #$00
  8050 37A2 85 84			sta SYSTEM.FILLCHAR_0141.VALUE
  8051 37A4				.LOCAL +MAIN.SYSTEM.FILLCHAR_0141
  8052 37A4				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0141.M@INLINE [Source: block_attack.a65]
     4 37A4 20 E8 16			jsr @fill
Source: block_attack.a65
  8053 					.ENDL
  8054
  8055 				; GetResourceHandle
  8056 37A7 A9 FE			lda <MAIN.@RESOURCE.sapr_critical
  8057 37A9 8D C9 A2			sta MSX.MODUL
  8058 37AC A9 83			lda >MAIN.@RESOURCE.sapr_critical
  8059 37AE 8D CA A2			sta MSX.MODUL+1
  8060
  8061 				; optimize OK (doGameOver2.inc), line = 153
  8062
  8063 37B1 A9 10			lda #$10
  8064 37B3 8D 5A A2			sta SAPLZSS.TLZSSPLAY.INIT.A
  8065 37B6 AD 73 A1			lda MSX
  8066 37B9 AC 74 A1			ldy MSX+1
  8067 37BC 20 68 1D			jsr SAPLZSS.TLZSSPLAY.INIT
  8068
  8069 				; optimize FAIL ('SYSTEM.PAUSE_016D', doGameOver2.inc), line = 155
  8070
  8071 37BF 20 4E 19			jsr SYSTEM.PAUSE_016D
  8072
  8073 				; optimize OK (doGameOver2.inc), line = 157
  8074
  8075 37C2 A9 01			lda #$01
  8076 37C4 8D C1 A2			sta MSX_PLAY
  8077
  8078 				; optimize OK (doGameOver2.inc), line = 159
  8079
  8080 37C7 AC AB A2 84 82 AC + 	mwy VRAM :bp2
  8081 37D1 A0 00			ldy #$00
  8082 37D3 A5 58			lda ATARI.SAVMSC
  8083 37D5 18 69 80			add #$80
  8084 37D8 91 82			sta (:bp2),y
  8085 37DA C8				iny
  8086 37DB A5 59			lda ATARI.SAVMSC+1
  8087 37DD 69 02			adc #$02
  8088 37DF 91 82			sta (:bp2),y
  8089
  8090 				; optimize OK (doGameOver2.inc), line = 161
  8091
  8092 37E1 A9 00			lda #$00
  8093 37E3 8D 82 A2			sta VSC
  8094
  8095 				; optimize OK (doGameOver2.inc), line = 162
  8096
  8097 37E6 A9 01			lda #$01
  8098 37E8 8D 05 D4			sta ATARI.VSCROL
  8099
  8100 				; optimize FAIL ('PANELUPDATE', doGameOver2.inc), line = 164
  8101
  8102 37EB 20 80 23			jsr PANELUPDATE
  8103
  8104 				; optimize OK (doGameOver2.inc), line = 168
  8105
  8106 37EE A9 00			lda #$00
  8107 37F0 20 F1 31			jsr RESETCHARSET
  8108
  8109 				; optimize OK (doGameOver2.inc), line = 172
  8110
  8111 37F3 AD BB A3			lda TIMEOUT
  8112 37F6 F0 17			jeq l_1C8A
  8113
  8114 				; GetResourceHandle
  8115 37F8 A9 27			lda <MAIN.@RESOURCE.f_id2
  8116 37FA 8D B6 A3			sta P
  8117 37FD A9 4B			lda >MAIN.@RESOURCE.f_id2
  8118 37FF 8D B7 A3			sta P+1
  8119
  8120 				; optimize OK (doGameOver2.inc), line = 175
  8121
  8122 3802 A9 04			lda #$04
  8123 3804 8D C4 02			sta ATARI.COLOR0
  8124
  8125 				; optimize OK (doGameOver2.inc), line = 176
  8126
  8127 3807 A9 0E			lda #$0E
  8128 3809 8D C5 02			sta ATARI.COLOR1
  8129
  8130 				; optimize OK (doGameOver2.inc), line = 177
  8131 380C 4C 23 38			jmp l_1CA0
  8132 380F			l_1C8A
  8133
  8134 				; GetResourceHandle
  8135 380F A9 67			lda <MAIN.@RESOURCE.f_id1
  8136 3811 8D B6 A3			sta P
  8137 3814 A9 44			lda >MAIN.@RESOURCE.f_id1
  8138 3816 8D B7 A3			sta P+1
  8139
  8140 				; optimize OK (doGameOver2.inc), line = 182
  8141
  8142 3819 A9 34			lda #$34
  8143 381B 8D C4 02			sta ATARI.COLOR0
  8144
  8145 				; optimize OK (doGameOver2.inc), line = 183
  8146
  8147 381E A9 28			lda #$28
  8148 3820 8D C5 02			sta ATARI.COLOR1
  8149
  8150 				; optimize OK (doGameOver2.inc), line = 184
  8151 3823			l_1CA0
  8152
  8153 3823 A9 00			lda #$00
  8154 3825 8D C6 02			sta ATARI.COLOR2
  8155
  8156 				; optimize OK (doGameOver2.inc), line = 188
  8157
  8158 3828 AD B6 A3			lda P
  8159 382B 8D 50 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER
  8160 382E AD B7 A3			lda P+1
  8161 3831 8D 51 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER+1
  8162 3834 A9 00			lda #$00
  8163 3836 8D 52 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER
  8164 3839 A9 E0			lda #$E0
  8165 383B 8D 53 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER+1
  8166 383E 20 4E 1B			jsr ZX5.UNZX5_02A4
  8167
  8168 				; optimize FAIL ('PANELUPDATE', doGameOver2.inc), line = 191
  8169
  8170 3841 20 80 23			jsr PANELUPDATE
  8171
  8172 				; optimize OK (doGameOver2.inc), line = 193
  8173
  8174 3844 A9 08			lda #$08
  8175 3846 8D 1B D0			sta ATARI.PRIOR
  8176
  8177 				; optimize OK (doGameOver2.inc), line = 195
  8178
  8179 3849 A9 FF			lda #$FF
  8180 384B 8D 0C D0			sta ATARI.SIZEM
  8181
  8182 				; optimize OK (doGameOver2.inc), line = 199
  8183
  8184 384E A9 18			lda #$18
  8185
  8186 				; --- WhileProlog
  8187 3850 4C 62 38			jmp l_1CBF
  8188 3853			l_1CC0
  8189
  8190 				; optimize FAIL ('SYSTEM.PAUSE_016D', doGameOver2.inc), line = 203
  8191
  8192 3853 20 4E 19			jsr SYSTEM.PAUSE_016D
  8193
  8194 				; optimize OK (doGameOver2.inc), line = 205
  8195
  8196 3856 AD BA A3			lda I
  8197 3859 20 FE 35			jsr DOMOVELOGO
  8198
  8199 				; optimize OK (doGameOver2.inc), line = 207
  8200
  8201 385C AD BA A3			lda I
  8202 385F 18 69 02			add #$02
  8203 3862			l_1CBF
  8204 3862 8D BA A3			sta I
  8205
  8206 				; optimize OK (doGameOver2.inc), line = 201
  8207
  8208 3865 C9 50			cmp #$50
  8209 3867 90 EA			jcc l_1CC0
  8210
  8211 				; optimize OK (doGameOver2.inc), line = 213
  8212
  8213 3869 AD BB A3			lda TIMEOUT
  8214 386C D0 03 4C 18 39		jeq l_1CDE
  8215
  8216 				; GetResourceHandle
  8217 3871 A9 9E			lda <MAIN.@RESOURCE.f_id2_a
  8218 3873 8D B6 A3			sta P
  8219 3876 A9 4E			lda >MAIN.@RESOURCE.f_id2_a
  8220 3878 8D B7 A3			sta P+1
  8221
  8222 				; GetResourceHandle
  8223 387B A9 DB			lda <MAIN.@RESOURCE.f_id2_b
  8224 387D 8D B8 A3			sta Q
  8225 3880 A9 4F			lda >MAIN.@RESOURCE.f_id2_b
  8226 3882 8D B9 A3			sta Q+1
  8227
  8228 				; optimize OK (doGameOver2.inc), line = 218
  8229
  8230 3885 AD B6 A3			lda P
  8231 3888 8D 50 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER
  8232 388B AD B7 A3			lda P+1
  8233 388E 8D 51 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER+1
  8234 3891 A9 00			lda #$00
  8235 3893 8D 52 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER
  8236 3896 A9 E0			lda #$E0
  8237 3898 8D 53 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER+1
  8238 389B 20 4E 1B			jsr ZX5.UNZX5_02A4
  8239
  8240 				; optimize OK (doGameOver2.inc), line = 219
  8241
  8242 389E AD B8 A3			lda Q
  8243 38A1 8D 50 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER
  8244 38A4 AD B9 A3			lda Q+1
  8245 38A7 8D 51 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER+1
  8246 38AA A9 00			lda #$00
  8247 38AC 8D 52 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER
  8248 38AF A9 E4			lda #$E4
  8249 38B1 8D 53 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER+1
  8250 38B4 20 4E 1B			jsr ZX5.UNZX5_02A4
  8251
  8252 				; optimize OK (doGameOver2.inc), line = 221
  8253
  8254 38B7 A9 04			lda #$04
  8255 38B9 20 F1 31			jsr RESETCHARSET
  8256
  8257 				; optimize OK (doGameOver2.inc), line = 223
  8258
  8259 38BC A9 D0			lda #$D0
  8260 38BE 85 E0			sta PTR
  8261 38C0 A9 0F			lda #$0F
  8262 38C2 85 E1			sta PTR+1
  8263
  8264 				; optimize OK (doGameOver2.inc), line = 225
  8265
  8266 38C4 A5 58			lda ATARI.SAVMSC
  8267 38C6 18 69 24			add #$24
  8268 38C9 8D B6 A3			sta P
  8269 38CC A5 59			lda ATARI.SAVMSC+1
  8270 38CE 69 03			adc #$03
  8271 38D0 8D B7 A3			sta P+1
  8272
  8273 				; optimize OK (doGameOver2.inc), line = 227
  8274
  8275 38D3 A9 07			lda #$07
  8276 38D5 8D BA A3			sta I
  8277
  8278 38D8			l_1D07
  8279 				; --- ForToDoCondition
  8280 38D8 A5 E0			lda PTR
  8281 38DA 85 88			sta SYSTEM.MOVE_0143.SOURCE
  8282 38DC A5 E1			lda PTR+1
  8283 38DE 85 89			sta SYSTEM.MOVE_0143.SOURCE+1
  8284 38E0 AD B6 A3			lda P
  8285 38E3 85 8C			sta SYSTEM.MOVE_0143.DEST
  8286 38E5 AD B7 A3			lda P+1
  8287 38E8 85 8D			sta SYSTEM.MOVE_0143.DEST+1
  8288 38EA A9 18			lda #$18
  8289 38EC 85 84			sta SYSTEM.MOVE_0143.COUNT
  8290 38EE A9 00			lda #$00
  8291 38F0 85 85			sta SYSTEM.MOVE_0143.COUNT+1
  8292 38F2				.LOCAL +MAIN.SYSTEM.MOVE_0143
  8293 38F2				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0143.M@INLINE [Source: block_attack.a65]
     4 38F2 20 93 16			jsr @move
Source: block_attack.a65
  8294 					.ENDL
  8295
  8296 				; optimize OK (doGameOver2.inc), line = 229
  8297
  8298 38F5 A5 E0			lda PTR
  8299 38F7 18 69 18			add #$18
  8300 38FA 85 E0			sta PTR
  8301 38FC 90 02			scc
  8302 38FE E6 E1			inc PTR+1
  8303
  8304 				; optimize OK (doGameOver2.inc), line = 230
  8305
  8306 3900 AD B6 A3			lda P
  8307 3903 18 69 28			add #$28
  8308 3906 8D B6 A3			sta P
  8309 3909 90 03			scc
  8310 390B EE B7 A3			inc P+1
  8311
  8312 				; --- ForToDoEpilog
  8313 390E CE BA A3			dec I
  8314 3911 10 C5			jpl l_1D07
  8315 3913			l_1D15
  8316
  8317 				; optimize OK (doGameOver2.inc), line = 233
  8318
  8319 3913 A9 F0			lda #$F0
  8320 3915 4C BC 39			jmp l_1D2F
  8321 3918			l_1CDE
  8322
  8323 				; GetResourceHandle
  8324 3918 A9 6C			lda <MAIN.@RESOURCE.f_id1_a
  8325 391A 8D B6 A3			sta P
  8326 391D A9 48			lda >MAIN.@RESOURCE.f_id1_a
  8327 391F 8D B7 A3			sta P+1
  8328
  8329 				; GetResourceHandle
  8330 3922 A9 EC			lda <MAIN.@RESOURCE.f_id1_b
  8331 3924 8D B8 A3			sta Q
  8332 3927 A9 49			lda >MAIN.@RESOURCE.f_id1_b
  8333 3929 8D B9 A3			sta Q+1
  8334
  8335 				; optimize OK (doGameOver2.inc), line = 240
  8336
  8337 392C AD B6 A3			lda P
  8338 392F 8D 50 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER
  8339 3932 AD B7 A3			lda P+1
  8340 3935 8D 51 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER+1
  8341 3938 A9 00			lda #$00
  8342 393A 8D 52 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER
  8343 393D A9 E0			lda #$E0
  8344 393F 8D 53 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER+1
  8345 3942 20 4E 1B			jsr ZX5.UNZX5_02A4
  8346
  8347 				; optimize OK (doGameOver2.inc), line = 241
  8348
  8349 3945 AD B8 A3			lda Q
  8350 3948 8D 50 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER
  8351 394B AD B9 A3			lda Q+1
  8352 394E 8D 51 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER+1
  8353 3951 A9 00			lda #$00
  8354 3953 8D 52 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER
  8355 3956 A9 E4			lda #$E4
  8356 3958 8D 53 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER+1
  8357 395B 20 4E 1B			jsr ZX5.UNZX5_02A4
  8358
  8359 				; optimize OK (doGameOver2.inc), line = 243
  8360
  8361 395E A9 04			lda #$04
  8362 3960 20 F1 31			jsr RESETCHARSET
  8363
  8364 				; optimize OK (doGameOver2.inc), line = 245
  8365
  8366 3963 A9 70			lda #$70
  8367 3965 85 E0			sta PTR
  8368 3967 A9 0C			lda #$0C
  8369 3969 85 E1			sta PTR+1
  8370
  8371 				; optimize OK (doGameOver2.inc), line = 247
  8372
  8373 396B A5 58			lda ATARI.SAVMSC
  8374 396D 18 69 24			add #$24
  8375 3970 8D B6 A3			sta P
  8376 3973 A5 59			lda ATARI.SAVMSC+1
  8377 3975 69 03			adc #$03
  8378 3977 8D B7 A3			sta P+1
  8379
  8380 				; optimize OK (doGameOver2.inc), line = 249
  8381
  8382 397A A9 07			lda #$07
  8383 397C 8D BA A3			sta I
  8384
  8385 397F			l_1D57
  8386 				; --- ForToDoCondition
  8387 397F A5 E0			lda PTR
  8388 3981 85 88			sta SYSTEM.MOVE_0143.SOURCE
  8389 3983 A5 E1			lda PTR+1
  8390 3985 85 89			sta SYSTEM.MOVE_0143.SOURCE+1
  8391 3987 AD B6 A3			lda P
  8392 398A 85 8C			sta SYSTEM.MOVE_0143.DEST
  8393 398C AD B7 A3			lda P+1
  8394 398F 85 8D			sta SYSTEM.MOVE_0143.DEST+1
  8395 3991 A9 18			lda #$18
  8396 3993 85 84			sta SYSTEM.MOVE_0143.COUNT
  8397 3995 A9 00			lda #$00
  8398 3997 85 85			sta SYSTEM.MOVE_0143.COUNT+1
  8399 3999				.LOCAL +MAIN.SYSTEM.MOVE_0143
  8400 3999				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0143.M@INLINE [Source: block_attack.a65]
     4 3999 20 93 16			jsr @move
Source: block_attack.a65
  8401 					.ENDL
  8402
  8403 				; optimize OK (doGameOver2.inc), line = 251
  8404
  8405 399C A5 E0			lda PTR
  8406 399E 18 69 18			add #$18
  8407 39A1 85 E0			sta PTR
  8408 39A3 90 02			scc
  8409 39A5 E6 E1			inc PTR+1
  8410
  8411 				; optimize OK (doGameOver2.inc), line = 252
  8412
  8413 39A7 AD B6 A3			lda P
  8414 39AA 18 69 28			add #$28
  8415 39AD 8D B6 A3			sta P
  8416 39B0 90 03			scc
  8417 39B2 EE B7 A3			inc P+1
  8418
  8419 				; --- ForToDoEpilog
  8420 39B5 CE BA A3			dec I
  8421 39B8 10 C5			jpl l_1D57
  8422 39BA			l_1D65
  8423
  8424 				; optimize OK (doGameOver2.inc), line = 255
  8425
  8426 39BA A9 30			lda #$30
  8427 39BC			l_1D2F
  8428 39BC 85 E0			sta PTR
  8429 39BE A9 13			lda #$13
  8430 39C0 85 E1			sta PTR+1
  8431
  8432 				; optimize OK (doGameOver2.inc), line = 259
  8433
  8434 39C2 A5 58			lda ATARI.SAVMSC
  8435 39C4 18 69 B4			add #$B4
  8436 39C7 8D B6 A3			sta P
  8437 39CA A5 59			lda ATARI.SAVMSC+1
  8438 39CC 69 04			adc #$04
  8439 39CE 8D B7 A3			sta P+1
  8440
  8441 				; optimize OK (doGameOver2.inc), line = 261
  8442
  8443 39D1 A9 07			lda #$07
  8444 39D3 8D BA A3			sta I
  8445
  8446 39D6			l_1D90
  8447 				; --- ForToDoCondition
  8448 39D6 A5 E0			lda PTR
  8449 39D8 85 88			sta SYSTEM.MOVE_0143.SOURCE
  8450 39DA A5 E1			lda PTR+1
  8451 39DC 85 89			sta SYSTEM.MOVE_0143.SOURCE+1
  8452 39DE AD B6 A3			lda P
  8453 39E1 85 8C			sta SYSTEM.MOVE_0143.DEST
  8454 39E3 AD B7 A3			lda P+1
  8455 39E6 85 8D			sta SYSTEM.MOVE_0143.DEST+1
  8456 39E8 A9 18			lda #$18
  8457 39EA 85 84			sta SYSTEM.MOVE_0143.COUNT
  8458 39EC A9 00			lda #$00
  8459 39EE 85 85			sta SYSTEM.MOVE_0143.COUNT+1
  8460 39F0				.LOCAL +MAIN.SYSTEM.MOVE_0143
  8461 39F0				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0143.M@INLINE [Source: block_attack.a65]
     4 39F0 20 93 16			jsr @move
Source: block_attack.a65
  8462 					.ENDL
  8463
  8464 				; optimize OK (doGameOver2.inc), line = 263
  8465
  8466 39F3 A5 E0			lda PTR
  8467 39F5 18 69 18			add #$18
  8468 39F8 85 E0			sta PTR
  8469 39FA 90 02			scc
  8470 39FC E6 E1			inc PTR+1
  8471
  8472 				; optimize OK (doGameOver2.inc), line = 264
  8473
  8474 39FE AD B6 A3			lda P
  8475 3A01 18 69 28			add #$28
  8476 3A04 8D B6 A3			sta P
  8477 3A07 90 03			scc
  8478 3A09 EE B7 A3			inc P+1
  8479
  8480 				; --- ForToDoEpilog
  8481 3A0C CE BA A3			dec I
  8482 3A0F 10 C5			jpl l_1D90
  8483 3A11			l_1D9E
  8484
  8485 				; optimize OK (doGameOver2.inc), line = 268
  8486
  8487 3A11 A9 00			lda #$00
  8488 3A13 A0 00			ldy #256-256
  8489 3A15 99 00 DB C8 D0 FA		sta:rne $DB00+256-256,y+
  8490
  8491 				; optimize OK (doGameOver2.inc), line = 270
  8492
  8493 3A1B A9 FF			lda #$FF
  8494 3A1D A0 0D			ldy #$0D
  8495 3A1F 99 A9 DB 88 10 FA		sta:rpl $DBA9,y-
  8496
  8497 				; optimize OK (doGameOver2.inc), line = 272
  8498
  8499 3A25 A9 01			lda #$01
  8500 3A27 8D B5 A3			sta RESULT
  8501
  8502 				; optimize FAIL ('SETYES', doGameOver2.inc), line = 275
  8503
  8504 3A2A 20 9F 35			jsr SETYES
  8505
  8506 				; optimize OK (doGameOver2.inc), line = 278
  8507
  8508 3A2D A9 01			lda #$01
  8509 3A2F 8D 86 A2			sta XSEL
  8510
  8511 				; --- WhileProlog
  8512 3A32 4C BD 3A			jmp l_1DBE
  8513 3A35			l_1DBF
  8514
  8515 				; optimize OK (doGameOver2.inc), line = 282
  8516
  8517 3A35 AD BB A3			lda TIMEOUT
  8518 3A38 D0 12			jne l_1DCE
  8519
  8520 				; optimize OK (doGameOver2.inc), line = 283
  8521
  8522 3A3A AD C4 02			lda ATARI.COLOR0
  8523 3A3D 18 69 11			add #$11
  8524 3A40 8D C4 02			sta ATARI.COLOR0
  8525
  8526 				; optimize OK (doGameOver2.inc), line = 284
  8527
  8528 3A43 AD C5 02			lda ATARI.COLOR1
  8529 3A46 38 E9 11			sub #$11
  8530 3A49 8D C5 02			sta ATARI.COLOR1
  8531 3A4C			l_1DCE
  8532
  8533 				; optimize FAIL ('SYSTEM.PAUSE_016D', doGameOver2.inc), line = 287
  8534
  8535 3A4C 20 4E 19			jsr SYSTEM.PAUSE_016D
  8536
  8537 				; optimize OK (doGameOver2.inc), line = 289
  8538
  8539 3A4F A9 3E			lda <JOYGAME
  8540 3A51 8D AE A3			sta JOYSCAN.PRC
  8541 3A54 A9 35			lda >JOYGAME
  8542 3A56 8D AF A3			sta JOYSCAN.PRC+1
  8543 3A59 20 50 34			jsr JOYSCAN
  8544
  8545 				; optimize OK (doGameOver2.inc), line = 291
  8546
  8547 3A5C AD C0 A2			lda FIREBTN
  8548 3A5F F0 03			jeq l_1DE1
  8549 3A61 4C C0 3A			jmp b_1DBF					; break
  8550 3A64			l_1DE1
  8551
  8552 				; optimize OK (doGameOver2.inc), line = 293
  8553
  8554 3A64 AD 86 A2			lda XSEL
  8555 3A67 8D C0 A3			sta @CASETMP_000B
  8556 3A6A D0 13			jne l_1DEF
  8557 				@
  8558
  8559 				; optimize OK (doGameOver2.inc), line = 294
  8560
  8561 3A6C AD B5 A3			lda RESULT
  8562 3A6F D0 0B			jne l_1DFE
  8563 3A71 20 9F 35			jsr SETYES
  8564 3A74 A9 01			lda #$01
  8565 3A76 8D 86 A2			sta XSEL
  8566 3A79 8D B5 A3			sta RESULT
  8567 3A7C			l_1DFE
  8568
  8569 3A7C 4C 9D 3A			jmp a_000B
  8570 3A7F			l_1DEF
  8571 3A7F C9 02			cmp #$02
  8572 3A81 D0 15			jne l_1E13
  8573 				@
  8574
  8575 				; optimize OK (doGameOver2.inc), line = 295
  8576
  8577 3A83 AD B5 A3			lda RESULT
  8578 3A86 F0 0D			jeq l_1E1F
  8579 3A88 20 AF 35			jsr SETNO
  8580 3A8B A9 01			lda #$01
  8581 3A8D 8D 86 A2			sta XSEL
  8582 3A90 A9 00			lda #$00
  8583 3A92 8D B5 A3			sta RESULT
  8584 3A95			l_1E1F
  8585
  8586 3A95 4C 9D 3A			jmp a_000B
  8587 3A98			l_1E13
  8588
  8589 				; optimize OK (doGameOver2.inc), line = 297
  8590
  8591 3A98 A9 01			lda #$01
  8592 3A9A 8D 86 A2			sta XSEL
  8593 3A9D			a_000B
  8594
  8595 				; --- WhileProlog
  8596 3A9D			l_1E38
  8597
  8598 				; optimize OK (doGameOver2.inc), line = 300
  8599
  8600 3A9D			?volatile:
  8601 3A9D AD 0B D4			lda ATARI.VCOUNT
  8602 3AA0 C9 46			cmp #$46
  8603 3AA2 D0 F9			jne l_1E38
  8604
  8605 				; --- WhileProlog
  8606 3AA4 4C B1 3A			jmp l_1E46
  8607 3AA7			l_1E47
  8608
  8609 				; optimize OK (doGameOver2.inc), line = 302
  8610
  8611 3AA7 AD 0A D2			lda RND
  8612 3AAA 29 F0			and #$F0
  8613 3AAC 09 04			ora #$04
  8614 3AAE 8D 16 D0			sta ATARI.COLPF0
  8615 3AB1			l_1E46
  8616 3AB1			?volatile:
  8617 3AB1 AD 0B D4			lda ATARI.VCOUNT
  8618 3AB4 C9 4E			cmp #$4E
  8619 3AB6 D0 EF			jne l_1E47
  8620
  8621 				; optimize OK (doGameOver2.inc), line = 304
  8622
  8623 3AB8 A9 02			lda #$02
  8624 3ABA 8D 16 D0			sta ATARI.COLPF0
  8625 3ABD			l_1DBE
  8626
  8627 				; optimize OK (doGameOver2.inc), line = 280
  8628
  8629 3ABD 4C 35 3A			jmp l_1DBF
  8630 3AC0			b_1DBF
  8631
  8632 				; optimize OK (doGameOver2.inc), line = 309
  8633
  8634 3AC0 A9 00			lda #$00
  8635 3AC2 8D 92 A2			sta RIGHT_EDGE
  8636
  8637 				; optimize OK (doGameOver2.inc), line = 310
  8638
  8639 3AC5 8D 91 A2			sta LEFT_EDGE
  8640
  8641 				; optimize OK (doGameOver2.inc), line = 311
  8642
  8643 3AC8 8D 06 D0			sta ATARI.HPOSM2
  8644
  8645 				; optimize OK (doGameOver2.inc), line = 313
  8646
  8647 3ACB 8D 2F 02			sta ATARI.SDMCTL
  8648
  8649 				; optimize FAIL ('CLEARGTIA', doGameOver2.inc), line = 315
  8650
  8651 3ACE 20 71 31			jsr CLEARGTIA
  8652
  8653 				; optimize OK (doGameOver2.inc), line = 318
  8654
  8655 3AD1 A9 00			lda #$00
  8656 3AD3 8D C1 A2			sta MSX_PLAY
  8657
  8658 				; optimize FAIL ('SYSTEM.PAUSE_016D', doGameOver2.inc), line = 320
  8659
  8660 3AD6 20 4E 19			jsr SYSTEM.PAUSE_016D
  8661
  8662 				; optimize OK (doGameOver2.inc), line = 322
  8663
  8664 3AD9 A9 10			lda #$10
  8665 3ADB 8D 74 A2			sta SAPLZSS.TLZSSPLAY.STOP.A
  8666 3ADE AD 73 A1			lda MSX
  8667 3AE1 AC 74 A1			ldy MSX+1
  8668 3AE4 20 38 1E			jsr SAPLZSS.TLZSSPLAY.STOP
  8669 3AE7			@exit
  8670
  8671 				; ------------------------------------------------------------
  8672
  8673 = A3B5			RESULT	= DATAORIGIN+$01D2
  8674 = A3B6			P	= DATAORIGIN+$01D3
  8675 = A3B8			Q	= DATAORIGIN+$01D5
  8676 = 00E0			PTR	= $E0
  8677 = A3BA			I	= DATAORIGIN+$01D7
  8678 = A3BB			TIMEOUT	= DATAORIGIN+$01D8
  8679 = 0023			YPOS	= $23
  8680 = A3C0			@CASETMP_000B	= DATAORIGIN+$01DD
  8681
  8682 = A3B6			@VarData	= P
  8683 = 0007			@VarDataSize	= 7
  8684
  8685 3AE7 60				rts						; ret
  8686 				.endl
  8687
  8688 3AE8			.local	SETGAMESPEED					; PROCEDURE
  8689
  8690 3AE8 4C 11 3B			jmp l_1E85
  8691
  8692 3AEB			.local	D1						; PROCEDURE
  8693
  8694 				; optimize OK (block_title2.inc), line = 12
  8695
  8696 3AEB AD C3 A3			lda adr.T+$01
  8697 3AEE 38 E9 30			sub #$30
  8698 3AF1 0A				asl @
  8699 3AF2 0A				asl @
  8700 3AF3 0A				asl @
  8701 3AF4 0A				asl @
  8702 3AF5 8D C1 A3			sta A
  8703
  8704 				; optimize OK (block_title2.inc), line = 13
  8705
  8706 3AF8 A9 10			lda <adr.PMDIGIT
  8707 3AFA 18 6D C1 A3			add A
  8708 3AFE 85 82			sta :bp2
  8709 3B00 A9 0B			lda >adr.PMDIGIT
  8710 3B02 69 00			adc #$00
  8711 3B04 85 83			sta :bp2+1
  8712 3B06 A0 0F			ldy #$0F
  8713 3B08 B1 82 99 88 DE 88 + 	mva:rpl (:bp2),y $DE88,y-
  8714 3B10			@exit
  8715 					.ifdef @new
  8716 					lda <@VarData
  8717 					sta :ztmp
  8718 					lda >@VarData
  8719 					ldy #@VarDataSize-1
  8720 					jmp @FreeMem
  8721 					els
  8722 3B10 60				rts						; ret
  8723 					eif
  8724 				.endl
  8725 3B11			l_1E85
  8726
  8727 				; optimize OK (block_title2.inc), line = 18
  8728
  8729 3B11 AC 81 A2			ldy GAMEMODE
  8730 3B14 B9 7B A2			lda adr.GMSPEED,y
  8731 3B17 8D C1 A3			sta A
  8732
  8733 				; optimize OK (block_title2.inc), line = 20
  8734
  8735 3B1A A9 64			lda #$64
  8736 3B1C 38 ED C1 A3			sub A
  8737 3B20 20 A7 19			jsr SYSUTILS.BYTETOSTR
  8738 3B23 E8				inx
  8739 3B24 AD EB 19			lda SYSUTILS.BYTETOSTR.RESULT
  8740 3B27 85 88			sta @move.src
  8741 3B29 AD EC 19			lda SYSUTILS.BYTETOSTR.RESULT+1
  8742 3B2C 85 89			sta @move.src+1
  8743 					@moveSTRING T #4
  8743 				 MWA T @MOVE.DST\ MWA #4 @MOVE.CNT\ JSR @MOVESTRING
  8743 3B2E AD 8B 3B 85 8C AD +  MWA T @MOVE.DST
  8743 3B38 A9 04 85 84 A9 00 +  MWA #4 @MOVE.CNT
  8743 3B40 20 30 17		 JSR @MOVESTRING
  8744 3B43 CA				dex
  8745
  8746 				; optimize OK (block_title2.inc), line = 22
  8747
  8748 3B44 AD C2 A3			lda adr.T
  8749 3B47 C9 02			cmp #$02
  8750 3B49 D0 32			jne l_1EBE
  8751
  8752 				; optimize OK (block_title2.inc), line = 24
  8753
  8754 3B4B AD C4 A3			lda adr.T+$02
  8755 3B4E 38 E9 30			sub #$30
  8756 3B51 0A				asl @
  8757 3B52 0A				asl @
  8758 3B53 0A				asl @
  8759 3B54 0A				asl @
  8760 3B55 8D C1 A3			sta A
  8761
  8762 				; optimize OK (block_title2.inc), line = 25
  8763
  8764 3B58 A9 10			lda <adr.PMDIGIT
  8765 3B5A 18 6D C1 A3			add A
  8766 3B5E 85 82			sta :bp2
  8767 3B60 A9 0B			lda >adr.PMDIGIT
  8768 3B62 69 00			adc #$00
  8769 3B64 85 83			sta :bp2+1
  8770 3B66 A0 0F			ldy #$0F
  8771 3B68 B1 82 99 88 DF 88 + 	mva:rpl (:bp2),y $DF88,y-
  8772
  8773 				; optimize FAIL ('D1', block_title2.inc), line = 27
  8774
  8775 3B70 20 EB 3A			jsr D1
  8776
  8777 				; optimize OK (block_title2.inc), line = 29
  8778
  8779 3B73 A9 9F			lda #$9F
  8780 3B75 8D 07 D8			sta $D807
  8781
  8782 				; optimize OK (block_title2.inc), line = 30
  8783
  8784 3B78 A9 99			lda #$99
  8785 3B7A 4C 87 3B			jmp l_1EE4
  8786 3B7D			l_1EBE
  8787
  8788 				; optimize FAIL ('D1', block_title2.inc), line = 34
  8789
  8790 3B7D 20 EB 3A			jsr D1
  8791
  8792 				; optimize OK (block_title2.inc), line = 36
  8793
  8794 3B80 A9 00			lda #$00
  8795 3B82 8D 07 D8			sta $D807
  8796
  8797 				; optimize OK (block_title2.inc), line = 37
  8798
  8799 3B85 A9 9C			lda #$9C
  8800 3B87			l_1EE4
  8801 3B87 8D 06 D8			sta $D806
  8802
  8803 				; ------------------------------------------------------------
  8804
  8805 = A3C1			A	= DATAORIGIN+$01DE
  8806 = A3C2			adr.T	= [DATAORIGIN+$01DF] .array [4]
  8807 3B8A			.var T	= adr.T .word
  8808
  8809 = A3C1			@VarData	= A
  8810 = 0005			@VarDataSize	= 5
  8811
  8812 3B8A			@exit
  8813 					.ifdef @new
  8814 					lda <@VarData
  8815 					sta :ztmp
  8816 					lda >@VarData
  8817 					ldy #@VarDataSize-1
  8818 					jmp @FreeMem
  8819 					els
  8820 3B8A 60				rts						; ret
  8821 					eif
  8822 = 3B8B C2 A3		T
  8822 				.endl
  8823
  8824 3B8D			.local	SETGAMEMODE					; PROCEDURE
  8825 3B8D 8D C6 A3			sta A
  8826
  8827 				; optimize OK (block_title2.inc), line = 47
  8828
  8829 3B90 8D 81 A2			sta GAMEMODE
  8830
  8831 				; optimize OK (block_title2.inc), line = 49
  8832
  8833 3B93 AD C6 A3			lda A
  8834 3B96 8D C7 A3			sta @CASETMP_000C
  8835 3B99 D0 17			jne l_1F00
  8836 				@
  8837
  8838 				; optimize OK (block_title2.inc), line = 52
  8839
  8840 3B9B A9 11			lda #$11
  8841 3B9D 8D E6 F1			sta $F1E6
  8842
  8843 				; optimize OK (block_title2.inc), line = 53
  8844
  8845 3BA0 A9 2B			lda #$2B
  8846 3BA2 8D 0E F2			sta $F20E
  8847
  8848 				; optimize OK (block_title2.inc), line = 55
  8849
  8850 3BA5 A9 42			lda #$42
  8851 3BA7 8D 06 D9			sta $D906
  8852
  8853 				; optimize OK (block_title2.inc), line = 56
  8854
  8855 3BAA A9 50			lda #$50
  8856 3BAC 8D 2E D9			sta $D92E
  8857
  8858 3BAF 4C CA 3B			jmp a_000C
  8859 3BB2			l_1F00
  8860 3BB2 C9 01			cmp #$01
  8861 3BB4 D0 14			jne l_1F15
  8862 				@
  8863
  8864 				; optimize OK (block_title2.inc), line = 62
  8865
  8866 3BB6 A9 42			lda #$42
  8867 3BB8 8D E6 F1			sta $F1E6
  8868
  8869 				; optimize OK (block_title2.inc), line = 63
  8870
  8871 3BBB A9 50			lda #$50
  8872 3BBD 8D 0E F2			sta $F20E
  8873
  8874 				; optimize OK (block_title2.inc), line = 65
  8875
  8876 3BC0 A9 11			lda #$11
  8877 3BC2 8D 06 D9			sta $D906
  8878
  8879 				; optimize OK (block_title2.inc), line = 66
  8880
  8881 3BC5 A9 2B			lda #$2B
  8882 3BC7 8D 2E D9			sta $D92E
  8883
  8884 3BCA			l_1F15
  8885 3BCA			a_000C
  8886
  8887 				; optimize FAIL ('SETGAMESPEED', block_title2.inc), line = 72
  8888
  8889 3BCA 20 E8 3A			jsr SETGAMESPEED
  8890
  8891 				; ------------------------------------------------------------
  8892
  8893 = A3C6			A	= DATAORIGIN+$01E3
  8894 = A3C7			@CASETMP_000C	= DATAORIGIN+$01E4
  8895
  8896 = A3C6			@VarData	= A
  8897 = 0002			@VarDataSize	= 2
  8898
  8899 3BCD			@exit
  8900 					.ifdef @new
  8901 					lda <@VarData
  8902 					sta :ztmp
  8903 					lda >@VarData
  8904 					ldy #@VarDataSize-1
  8905 					jmp @FreeMem
  8906 					els
  8907 3BCD 60				rts						; ret
  8908 					eif
  8909 				.endl
  8910
  8911 3BCE			.local	DOTITLE						; PROCEDURE
  8912
  8913 3BCE 4C 4D 3C			jmp l_1F2C
  8914
  8915 3BD1			.local	JOYMENU						; PROCEDURE
  8916
  8917 				; ------------------------------------------------------------
  8918
  8919 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  8920 				; as Pointer
  8921 3BD1 B5 94			lda :STACKORIGIN,x
  8922 3BD3 8D CC A3			sta A
  8923 3BD6 CA				dex
  8924 3BD7			@main
  8925
  8926 				; optimize OK (block_title2.inc), line = 85
  8927
  8928 3BD7 AD CC A3			lda A
  8929 3BDA 8D CD A3			sta @CASETMP_000D
  8930 3BDD C9 07			cmp #$07
  8931 3BDF D0 19			jne l_1F3D
  8932 				@
  8933
  8934 				; optimize OK (block_title2.inc), line = 86
  8935
  8936 3BE1 AD CA A3			lda S
  8937 3BE4 C9 02			cmp #$02
  8938 3BE6 90 0F			jcc l_1F4F
  8939 3BE8 CE CA A3			dec S
  8940 3BEB AC CB A3			ldy Y
  8941 3BEE AD CA A3			lda S
  8942 3BF1 99 7B A2			sta adr.GMSPEED,y
  8943 3BF4 20 E8 3A			jsr SETGAMESPEED
  8944 3BF7			l_1F4F
  8945 3BF7 4C 4C 3C			jmp a_000D
  8946 3BFA			l_1F3D
  8947 3BFA C9 0B			cmp #$0B
  8948 3BFC D0 19			jne l_1F69
  8949
  8950 				; optimize OK (block_title2.inc), line = 87
  8951
  8952 3BFE AD CA A3			lda S
  8953 3C01 C9 63			cmp #$63
  8954 3C03 B0 0F			jcs l_1F7B
  8955 3C05 EE CA A3			inc S
  8956 3C08 AC CB A3			ldy Y
  8957 3C0B AD CA A3			lda S
  8958 3C0E 99 7B A2			sta adr.GMSPEED,y
  8959 3C11 20 E8 3A			jsr SETGAMESPEED
  8960 3C14			l_1F7B
  8961 3C14 4C 4C 3C			jmp a_000D
  8962 3C17			l_1F69
  8963 3C17 C9 0D			cmp #$0D
  8964 3C19 D0 17			jne l_1F95
  8965
  8966 				; optimize OK (block_title2.inc), line = 88
  8967
  8968 3C1B AD CB A3			lda Y
  8969 3C1E D0 0F			jne l_1FA7
  8970 3C20 EE CB A3			inc Y
  8971 3C23 AC CB A3			ldy Y
  8972 3C26 B9 7B A2			lda adr.GMSPEED,y
  8973 3C29 8D CA A3			sta S
  8974 3C2C 20 E8 3A			jsr SETGAMESPEED
  8975 3C2F			l_1FA7
  8976 3C2F 4C 4C 3C			jmp a_000D
  8977 3C32			l_1F95
  8978 3C32 C9 0E			cmp #$0E
  8979 3C34 D0 16			jne l_1FC1
  8980
  8981 				; optimize OK (block_title2.inc), line = 89
  8982
  8983 3C36 AD CB A3			lda Y
  8984 3C39 C9 01			cmp #$01
  8985 3C3B D0 0F			jne l_1FD3
  8986 3C3D CE CB A3			dec Y
  8987 3C40 AC CB A3			ldy Y
  8988 3C43 B9 7B A2			lda adr.GMSPEED,y
  8989 3C46 8D CA A3			sta S
  8990 3C49 20 E8 3A			jsr SETGAMESPEED
  8991 3C4C			l_1FD3
  8992 3C4C			l_1FC1
  8993 3C4C			a_000D
  8994
  8995 				; ------------------------------------------------------------
  8996
  8997 = A3CC			A	= DATAORIGIN+$01E9
  8998 = A3CD			@CASETMP_000D	= DATAORIGIN+$01EA
  8999
  9000 = A3CC			@VarData	= A
  9001 = 0002			@VarDataSize	= 2
  9002
  9003 3C4C			@exit
  9004 					.ifdef @new
  9005 					lda <@VarData
  9006 					sta :ztmp
  9007 					lda >@VarData
  9008 					ldy #@VarDataSize-1
  9009 					jmp @FreeMem
  9010 					els
  9011 3C4C 60				rts						; ret
  9012 					eif
  9013 				.endl
  9014 3C4D			l_1F2C
  9015
  9016 				; optimize OK (block_title2.inc), line = 99
  9017
  9018 3C4D A9 00			lda #$00
  9019 3C4F 8D 2F 02			sta ATARI.SDMCTL
  9020
  9021 				; optimize FAIL ('SYSTEM.PAUSE_016D', block_title2.inc), line = 100
  9022
  9023 3C52 20 4E 19			jsr SYSTEM.PAUSE_016D
  9024
  9025 				; GetResourceHandle
  9026 3C55 A9 C0			lda <MAIN.@RESOURCE.t_tit
  9027 3C57 8D C8 A3			sta PTR
  9028 3C5A A9 53			lda >MAIN.@RESOURCE.t_tit
  9029 3C5C 8D C9 A3			sta PTR+1
  9030
  9031 				; optimize OK (block_title2.inc), line = 103
  9032
  9033 3C5F AD C8 A3			lda PTR
  9034 3C62 8D 50 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER
  9035 3C65 AD C9 A3			lda PTR+1
  9036 3C68 8D 51 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER+1
  9037 3C6B A9 00			lda #$00
  9038 3C6D 8D 52 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER
  9039 3C70 A9 D8			lda #$D8
  9040 3C72 8D 53 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER+1
  9041 3C75 20 4E 1B			jsr ZX5.UNZX5_02A4
  9042
  9043 				; optimize OK (block_title2.inc), line = 105
  9044
  9045 3C78 A9 00			lda #$00
  9046 3C7A 85 88			sta SYSTEM.FILLCHAR_0141.A
  9047 3C7C A9 A7			lda #$A7
  9048 3C7E 85 89			sta SYSTEM.FILLCHAR_0141.A+1
  9049 3C80 A9 00			lda #$00
  9050 3C82 85 8C			sta SYSTEM.FILLCHAR_0141.COUNT
  9051 3C84 A9 09			lda #$09
  9052 3C86 85 8D			sta SYSTEM.FILLCHAR_0141.COUNT+1
  9053 3C88 A9 00			lda #$00
  9054 3C8A 85 84			sta SYSTEM.FILLCHAR_0141.VALUE
  9055 3C8C				.LOCAL +MAIN.SYSTEM.FILLCHAR_0141
  9056 3C8C				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0141.M@INLINE [Source: block_attack.a65]
     4 3C8C 20 E8 16			jsr @fill
Source: block_attack.a65
  9057 					.ENDL
  9058
  9059 				; GetResourceHandle
  9060 3C8F A9 2C			lda <MAIN.@RESOURCE.sapr_modul
  9061 3C91 8D C9 A2			sta MSX.MODUL
  9062 3C94 A9 96			lda >MAIN.@RESOURCE.sapr_modul
  9063 3C96 8D CA A2			sta MSX.MODUL+1
  9064
  9065 				; optimize OK (block_title2.inc), line = 108
  9066
  9067 3C99 A9 00			lda #$00
  9068 3C9B 8D C7 A2			sta MSX.PLAYER
  9069 3C9E A9 A4			lda #$A4
  9070 3CA0 8D C8 A2			sta MSX.PLAYER+1
  9071
  9072 				; optimize OK (block_title2.inc), line = 110
  9073
  9074 3CA3 A9 00			lda #$00
  9075 3CA5 8D 5A A2			sta SAPLZSS.TLZSSPLAY.INIT.A
  9076 3CA8 AD 73 A1			lda MSX
  9077 3CAB AC 74 A1			ldy MSX+1
  9078 3CAE 20 68 1D			jsr SAPLZSS.TLZSSPLAY.INIT
  9079
  9080 				; -------------------  ASM Block 00000147  -------------------
  9081
  9082 3CB1 A9 A5			lda <MAIN.PlaySAP
  9083 3CB3 A0 24			ldy >MAIN.PlaySAP
  9084
  9085 3CB5 20 00 D8			jsr pmb_page
  9086 				 
  9087 				; optimize OK (block_title2.inc), line = 122
  9088
  9089 3CB8 A9 00			lda #$00
  9090 3CBA 8D 2F 02			sta ATARI.SDMCTL
  9091
  9092 				; optimize FAIL ('SYSTEM.PAUSE_016D', block_title2.inc), line = 123
  9093
  9094 3CBD 20 4E 19			jsr SYSTEM.PAUSE_016D
  9095
  9096 				; optimize OK (block_title2.inc), line = 125
  9097
  9098 3CC0 A9 00			lda #$00
  9099 3CC2 8D 74 A2			sta SAPLZSS.TLZSSPLAY.STOP.A
  9100 3CC5 AD 73 A1			lda MSX
  9101 3CC8 AC 74 A1			ldy MSX+1
  9102 3CCB 20 38 1E			jsr SAPLZSS.TLZSSPLAY.STOP
  9103
  9104 				; GetResourceHandle
  9105 3CCE A9 E4			lda <MAIN.@RESOURCE.t_tit2
  9106 3CD0 8D C8 A3			sta PTR
  9107 3CD3 A9 63			lda >MAIN.@RESOURCE.t_tit2
  9108 3CD5 8D C9 A3			sta PTR+1
  9109
  9110 				; optimize OK (block_title2.inc), line = 129
  9111
  9112 3CD8 AD C8 A3			lda PTR
  9113 3CDB 8D 50 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER
  9114 3CDE AD C9 A3			lda PTR+1
  9115 3CE1 8D 51 A2			sta ZX5.UNZX5_02A4.INPUTPOINTER+1
  9116 3CE4 A9 00			lda #$00
  9117 3CE6 8D 52 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER
  9118 3CE9 A9 D8			lda #$D8
  9119 3CEB 8D 53 A2			sta ZX5.UNZX5_02A4.OUTPUTPOINTER+1
  9120 3CEE 20 4E 1B			jsr ZX5.UNZX5_02A4
  9121
  9122 				; -------------------  ASM Block 00000148  -------------------
  9123
  9124 3CF1 A9 A5		 	lda <MAIN.PlaySAP
  9125 3CF3 A0 24			ldy >MAIN.PlaySAP
  9126
  9127 3CF5 20 00 D8			jsr pmb_page
  9128 				 
  9129 				; --- WhileProlog
  9130 3CF8			l_200E
  9131
  9132 				; optimize OK (block_title2.inc), line = 141
  9133
  9134 3CF8			?volatile:
  9135 3CF8 AD 10 D0			lda JOYSTICK.TRIG0
  9136 3CFB F0 FB			jeq l_200E
  9137
  9138 				; optimize OK (block_title2.inc), line = 143
  9139
  9140 3CFD AD 81 A2			lda GAMEMODE
  9141 3D00 8D CB A3			sta Y
  9142
  9143 				; optimize OK (block_title2.inc), line = 144
  9144
  9145 3D03 A8				tay
  9146 3D04 B9 7B A2			lda adr.GMSPEED,y
  9147 3D07 8D CA A3			sta S
  9148
  9149 				; optimize OK (block_title2.inc), line = 146
  9150
  9151 3D0A AD 81 A2			lda GAMEMODE
  9152 3D0D 20 8D 3B			jsr SETGAMEMODE
  9153
  9154 				; optimize FAIL ('SETGAMESPEED', block_title2.inc), line = 147
  9155
  9156 3D10 20 E8 3A			jsr SETGAMESPEED
  9157
  9158 				; --- WhileProlog
  9159 3D13 4C 3C 3D			jmp l_2030
  9160 3D16			l_2031
  9161
  9162 				; optimize FAIL ('SYSTEM.PAUSE_016D', block_title2.inc), line = 151
  9163
  9164 3D16 20 4E 19			jsr SYSTEM.PAUSE_016D
  9165
  9166 				; optimize OK (block_title2.inc), line = 153
  9167
  9168 3D19 A9 D1			lda <JOYMENU
  9169 3D1B 8D AE A3			sta JOYSCAN.PRC
  9170 3D1E A9 3B			lda >JOYMENU
  9171 3D20 8D AF A3			sta JOYSCAN.PRC+1
  9172 3D23 20 50 34			jsr JOYSCAN
  9173
  9174 				; optimize OK (block_title2.inc), line = 155
  9175
  9176 3D26 AD 81 A2			lda GAMEMODE
  9177 3D29 CD CB A3			cmp Y
  9178 3D2C F0 06			jeq l_2047
  9179 3D2E AD CB A3			lda Y
  9180 3D31 20 8D 3B			jsr SETGAMEMODE
  9181 3D34			l_2047
  9182
  9183 				; optimize OK (block_title2.inc), line = 157
  9184
  9185 3D34 AD C0 A2			lda FIREBTN
  9186 3D37 F0 03			jeq l_205A
  9187 3D39 4C 3F 3D			jmp b_2031					; break
  9188 3D3C			l_205A
  9189 3D3C			l_2030
  9190
  9191 				; optimize OK (block_title2.inc), line = 149
  9192
  9193 3D3C 4C 16 3D			jmp l_2031
  9194 3D3F			b_2031
  9195
  9196 				; -------------------  ASM Block 00000149  -------------------
  9197
  9198 3D3F 20 03 D8			jsr pmb_page+3
  9199 				 
  9200 				; optimize OK (block_title2.inc), line = 166
  9201
  9202 3D42 A9 00			lda #$00
  9203 3D44 8D 2F 02			sta ATARI.SDMCTL
  9204
  9205 				; optimize FAIL ('SYSTEM.PAUSE_016D', block_title2.inc), line = 167
  9206
  9207 3D47 20 4E 19			jsr SYSTEM.PAUSE_016D
  9208
  9209 				; optimize OK (block_title2.inc), line = 169
  9210
  9211 3D4A A9 00			lda #$00
  9212 3D4C 8D 74 A2			sta SAPLZSS.TLZSSPLAY.STOP.A
  9213 3D4F AD 73 A1			lda MSX
  9214 3D52 AC 74 A1			ldy MSX+1
  9215 3D55 20 38 1E			jsr SAPLZSS.TLZSSPLAY.STOP
  9216
  9217 				; ------------------------------------------------------------
  9218
  9219 = A3C8			PTR	= DATAORIGIN+$01E5
  9220 = A3CA			S	= DATAORIGIN+$01E7
  9221 = A3CB			Y	= DATAORIGIN+$01E8
  9222
  9223 = A3C8			@VarData	= PTR
  9224 = 0004			@VarDataSize	= 4
  9225
  9226 3D58			@exit
  9227 					.ifdef @new
  9228 					lda <@VarData
  9229 					sta :ztmp
  9230 					lda >@VarData
  9231 					ldy #@VarDataSize-1
  9232 					jmp @FreeMem
  9233 					els
  9234 3D58 60				rts						; ret
  9235 					eif
  9236 				.endl
  9237 3D59			l_00F9
  9238
  9239 				; optimize OK (block_attack.pas), line = 1819
  9240
  9241 3D59 A9 02			lda #$02
  9242 3D5B 8D C8 02			sta ATARI.COLOR4
  9243
  9244 				; optimize FAIL ('SYSTEM.PAUSE_016D', block_attack.pas), line = 1821
  9245
  9246 3D5E 20 4E 19			jsr SYSTEM.PAUSE_016D
  9247
  9248 				; -------------------  ASM Block 00000150  -------------------
  9249
  9250 3D61 78			  sei
  9251 3D62 A9 00		  lda #0
  9252 3D64 8D 0E D4		  sta nmien
  9253 3D67 8D 0E D2		  sta irqen
  9254 3D6A 8D 1E D2		  sta irqen+$10
  9255 3D6D 8D 2E D2		  sta irqen+$20
  9256 3D70 8D 3E D2		  sta irqen+$30
  9257
  9258 3D73 A9 FE 8D 01 D3	  mva #$fe portb
  9259
  9260 3D78 A9 B8 8D FA FF A9 +   mwa #NMI nmivec
  9261 3D82 A9 8C 8D FE FF A9 +   mwa #IRQ irqvec
  9262
  9263 3D8C A9 00		  lda #0
  9264 3D8E 8D 00 06		  sta pm_color
  9265 3D91 8D 01 06		  sta pm_color+1
  9266 3D94 8D 02 06		  sta pm_color+2
  9267 3D97 8D 03 06		  sta pm_color+3
  9268 3D9A 8D 04 06		  sta pm_color+4
  9269 3D9D 8D 05 06		  sta pm_color+5
  9270 3DA0 8D 06 06		  sta pm_color+6
  9271 3DA3 8D 07 06		  sta pm_color+7
  9272
  9273 3DA6 A9 78		  lda #$78
  9274 3DA8 8D 08 06		  sta pm_color+8
  9275 3DAB 8D 09 06		  sta pm_color+9
  9276 3DAE 8D 0A 06		  sta pm_color+10
  9277 3DB1 8D 0B 06		  sta pm_color+11
  9278 3DB4 8D 0C 06		  sta pm_color+12
  9279
  9280 3DB7 A9 56		  lda #$56
  9281 3DB9 8D 0D 06		  sta pm_color+13
  9282 3DBC 8D 0E 06		  sta pm_color+14
  9283 3DBF 8D 0F 06		  sta pm_color+15
  9284 3DC2 8D 10 06		  sta pm_color+16
  9285
  9286 3DC5 A9 48		  lda #$48
  9287 3DC7 8D 11 06		  sta pm_color+17
  9288 3DCA 8D 12 06		  sta pm_color+18
  9289 3DCD 8D 13 06		  sta pm_color+19
  9290 3DD0 8D 14 06		  sta pm_color+20
  9291
  9292 3DD3 A9 36		  lda #$36
  9293 3DD5 8D 15 06		  sta pm_color+21
  9294 3DD8 8D 16 06		  sta pm_color+22
  9295 3DDB 8D 17 06		  sta pm_color+23
  9296 3DDE 8D 18 06		  sta pm_color+24
  9297
  9298 3DE1 A9 24		  lda #$24
  9299 3DE3 8D 19 06		  sta pm_color+25
  9300 3DE6 8D 1A 06		  sta pm_color+26
  9301 3DE9 8D 1B 06		  sta pm_color+27
  9302 3DEC 8D 1C 06		  sta pm_color+28
  9303
  9304 3DEF A9 16		  lda #$16
  9305 3DF1 8D 1D 06		  sta pm_color+29
  9306 3DF4 8D 1E 06		  sta pm_color+30
  9307 3DF7 8D 1F 06		  sta pm_color+31
  9308 3DFA 8D 20 06		  sta pm_color+32
  9309
  9310 3DFD A9 E6		  lda #$e6
  9311 3DFF 8D 21 06		  sta pm_color+33
  9312 3E02 8D 22 06		  sta pm_color+34
  9313 3E05 8D 23 06		  sta pm_color+35
  9314 3E08 8D 24 06		  sta pm_color+36
  9315
  9316 				;  lda #bkg_color
  9317 3E0B 8D 25 06		  sta pm_color+37
  9318 3E0E 8D 26 06		  sta pm_color+38
  9319
  9320 3E11 A9 40 8D 0E D4	  mva #$40 nmien
  9321
  9322 				 
  9323 				; --- RepeatUntilProlog
  9324 3E16			l_206F
  9325
  9326 				; optimize FAIL ('DOTITLE', block_attack.pas), line = 1901
  9327
  9328 3E16 20 CE 3B			jsr DOTITLE
  9329
  9330 				; optimize OK (block_attack.pas), line = 1903
  9331
  9332 3E19 A9 00			lda #$00
  9333 3E1B 8D 2B A2			sta JGP2.JGPINIT.DLISTADDRESS
  9334 3E1E A9 D8			lda #$D8
  9335 3E20 8D 2C A2			sta JGP2.JGPINIT.DLISTADDRESS+1
  9336 3E23 A9 00			lda #$00
  9337 3E25 8D 2D A2			sta JGP2.JGPINIT.VRAMADDRESS
  9338 3E28 A9 C0			lda #$C0
  9339 3E2A 8D 2E A2			sta JGP2.JGPINIT.VRAMADDRESS+1
  9340 3E2D A9 1C			lda #$1C
  9341 3E2F 8D 2F A2			sta JGP2.JGPINIT.LINES
  9342 3E32 A9 01			lda #$01
  9343 3E34 8D 30 A2			sta JGP2.JGPINIT.BLANKS
  9344 3E37 20 B2 1A			jsr JGP2.JGPINIT
  9345
  9346 				; optimize OK (block_attack.pas), line = 1905
  9347
  9348 3E3A A9 02			lda #$02
  9349 3E3C 8D AB A2			sta VRAM
  9350 3E3F A9 D8			lda #$D8
  9351 3E41 8D AC A2			sta VRAM+1
  9352
  9353 				; -------------------  ASM Block 00000151  -------------------
  9354
  9355 3E44 78				sei
  9356 3E45 A9 00			lda #0
  9357 3E47 8D 0E D4			sta nmien
  9358
  9359 					;sta AUDCTL+$10
  9360
  9361 3E4A 8D 0F D2			sta SKCTL			; jedna linia nizej dzieki WSYNC i SKCTL=0
  9362 					;sta SKCTL+$10
  9363
  9364 3E4D A9 01		 	lda #1				; 0=POKEY 64KHz, 1=15KHz
  9365 3E4F 8D 08 D2			sta AUDCTL
  9366 3E52 A9 07			lda #7				; ~64KHz clock 16 = ~4Khz timer, ~15KHz clock 4 = ~4KHz
  9367 3E54 8D 06 D2			sta AUDF4			; in timer 1
  9368
  9369 3E57 A9 F0			lda #$f0			; test - no polycounters + volume only
  9370 3E59 8D 07 D2			sta AUDC4
  9371 3E5C A9 04			lda #4
  9372 3E5E 8D 0E D2			sta IRQEN			; enable timer 1
  9373
  9374 3E61 8D 0A D4			sta wsync
  9375
  9376 3E64 A9 03			lda #3
  9377 3E66 8D 0F D2			sta SKCTL			; test - reset pokey and polycounters
  9378 					;sta SKCTL+$10
  9379
  9380 3E69 8D 09 D2			sta STIMER			; start timers
  9381
  9382 3E6C 58				cli
  9383 				 
  9384 				; optimize OK (block_attack.pas), line = 1938
  9385
  9386 3E6D A9 C0			lda #$C0
  9387 3E6F 8D 0E D4			sta ATARI.NMIEN
  9388
  9389 				; optimize FAIL ('DOINITGAME', block_attack.pas), line = 1940
  9390
  9391 3E72 20 06 32			jsr DOINITGAME
  9392
  9393 				; --- RepeatUntilProlog
  9394 3E75			l_207F
  9395
  9396 				; optimize OK (block_attack.pas), line = 1944
  9397
  9398 3E75 AD 94 A2			lda SECOND
  9399 3E78 CD 95 A2			cmp SECOND_
  9400 3E7B F0 2C			jeq l_2093
  9401
  9402 				; optimize FAIL ('PRINTTIME', block_attack.pas), line = 1945
  9403
  9404 3E7D 20 85 1E			jsr PRINTTIME
  9405
  9406 				; optimize OK (block_attack.pas), line = 1947
  9407
  9408 3E80 AD 94 A2			lda SECOND
  9409 3E83 8D 95 A2			sta SECOND_
  9410
  9411 				; optimize OK (block_attack.pas), line = 1949
  9412
  9413 3E86 AD A2 A2			lda SCORE+3
  9414 3E89 CD A6 A2			cmp SCORE_+3
  9415 3E8C D0 16			bne @+
  9416 3E8E AD A1 A2			lda SCORE+2
  9417 3E91 CD A5 A2			cmp SCORE_+2
  9418 3E94 D0 0E			bne @+
  9419 3E96 AD A0 A2			lda SCORE+1
  9420 3E99 CD A4 A2			cmp SCORE_+1
  9421 3E9C D0 06			bne @+
  9422 3E9E AD 9F A2			lda SCORE
  9423 3EA1 CD A3 A2			cmp SCORE_
  9424 				@
  9425 3EA4 F0 03			jeq l_20AB
  9426 3EA6 20 A6 2A			jsr PRINTALLSCORES
  9427 3EA9			l_20AB
  9428 3EA9			l_2093
  9429
  9430 				; optimize OK (block_attack.pas), line = 1954
  9431
  9432 3EA9 AD 8E A2			lda MATCH
  9433 3EAC D0 09			jne l_20D3x
  9434 3EAE AD 9A A2			lda MONSTER0_FRM
  9435 3EB1 29 03			and #$03
  9436 3EB3 C9 01			cmp #$01
  9437 3EB5 F0 1C			jeq l_20D3
  9438 3EB7			l_20D3x
  9439
  9440 				; optimize OK (block_attack.pas), line = 1956
  9441
  9442 3EB7 A9 B0			lda #$B0
  9443 3EB9 8D 6A A3			sta MONSTERS.PTR
  9444 3EBC A9 14			lda #$14
  9445 3EBE 8D 6B A3			sta MONSTERS.PTR+1
  9446 3EC1 A9 18			lda #$18
  9447 3EC3 8D 6C A3			sta MONSTERS.OFS
  9448 3EC6 A9 9A			lda <MONSTER0_FRM
  9449 3EC8 8D 6D A3			sta MONSTERS.FRM
  9450 3ECB A9 A2			lda >MONSTER0_FRM
  9451 3ECD 8D 6E A3			sta MONSTERS.FRM+1
  9452 3ED0 20 E9 22			jsr MONSTERS
  9453 3ED3			l_20D3
  9454
  9455 				; optimize OK (block_attack.pas), line = 1960
  9456
  9457 3ED3 AD 99 A2			lda COMBO_CNT
  9458 3ED6 D0 09			jne l_20FCx
  9459 3ED8 AD 9B A2			lda MONSTER1_FRM
  9460 3EDB 29 03			and #$03
  9461 3EDD C9 01			cmp #$01
  9462 3EDF F0 1C			jeq l_20FC
  9463 3EE1			l_20FCx
  9464 3EE1 A9 40			lda #$40
  9465 3EE3 8D 6A A3			sta MONSTERS.PTR
  9466 3EE6 A9 15			lda #$15
  9467 3EE8 8D 6B A3			sta MONSTERS.PTR+1
  9468 3EEB A9 78			lda #$78
  9469 3EED 8D 6C A3			sta MONSTERS.OFS
  9470 3EF0 A9 9B			lda <MONSTER1_FRM
  9471 3EF2 8D 6D A3			sta MONSTERS.FRM
  9472 3EF5 A9 A2			lda >MONSTER1_FRM
  9473 3EF7 8D 6E A3			sta MONSTERS.FRM+1
  9474 3EFA 20 E9 22			jsr MONSTERS
  9475 3EFD			l_20FC
  9476
  9477 				; optimize OK (block_attack.pas), line = 1963
  9478
  9479 3EFD AD 9C A2			lda MONSTER2_FRM
  9480 3F00 A0 01			ldy #1
  9481 3F02 29 03			and #$03
  9482 3F04 C9 01			cmp #$01
  9483 3F06 D0 01			bne @+
  9484 3F08 88				dey
  9485 				@
  9486 3F09 98				tya
  9487 3F0A 0D C4 A2			ora SWAP_PLAY
  9488 3F0D F0 1C			jeq l_211F
  9489 3F0F A9 D0			lda #$D0
  9490 3F11 8D 6A A3			sta MONSTERS.PTR
  9491 3F14 A9 15			lda #$15
  9492 3F16 8D 6B A3			sta MONSTERS.PTR+1
  9493 3F19 A9 D8			lda #$D8
  9494 3F1B 8D 6C A3			sta MONSTERS.OFS
  9495 3F1E A9 9C			lda <MONSTER2_FRM
  9496 3F20 8D 6D A3			sta MONSTERS.FRM
  9497 3F23 A9 A2			lda >MONSTER2_FRM
  9498 3F25 8D 6E A3			sta MONSTERS.FRM+1
  9499 3F28 20 E9 22			jsr MONSTERS
  9500 3F2B			l_211F
  9501
  9502 				; optimize FAIL ('SYSTEM.PAUSE_016D', block_attack.pas), line = 1966
  9503
  9504 3F2B 20 4E 19			jsr SYSTEM.PAUSE_016D
  9505
  9506 				; optimize OK (block_attack.pas), line = 1968
  9507
  9508 3F2E A9 3E			lda <JOYGAME
  9509 3F30 8D AE A3			sta JOYSCAN.PRC
  9510 3F33 A9 35			lda >JOYGAME
  9511 3F35 8D AF A3			sta JOYSCAN.PRC+1
  9512 3F38 20 50 34			jsr JOYSCAN
  9513
  9514 				; optimize OK (block_attack.pas), line = 1971
  9515
  9516 3F3B AD BF A2			lda FIREDELAY
  9517 3F3E 2D C0 A2			and FIREBTN
  9518 3F41 F0 08			jeq l_213A
  9519
  9520 				; optimize FAIL ('SWAPTILESON', block_attack.pas), line = 1972
  9521
  9522 3F43 20 89 2E			jsr SWAPTILESON
  9523
  9524 				; optimize OK (block_attack.pas), line = 1974
  9525
  9526 3F46 A9 00			lda #$00
  9527 3F48 8D BF A2			sta FIREDELAY
  9528 3F4B			l_213A
  9529
  9530 				; optimize OK (block_attack.pas), line = 1978
  9531
  9532 3F4B AD CB A2			lda SWAPTILES.STAGE
  9533 3F4E D0 17			jne l_2154
  9534
  9535 				; optimize OK (block_attack.pas), line = 1979
  9536
  9537 3F50 AD B9 A2			lda FOUNDTHREE
  9538 3F53 D0 12			jne l_2167
  9539
  9540 				; optimize OK (block_attack.pas), line = 1980
  9541
  9542 3F55 AD 84 A2			lda SCROLL
  9543 3F58 C9 01			cmp #$01
  9544 3F5A B0 08			jcs l_2180x
  9545 3F5C AD BA A2 D0 03		lda:sne SCROLLUP
  9546 3F61 4C 67 3F			jmp l_2180
  9547 3F64			l_2180x
  9548 3F64 20 A1 2D			jsr ONSCROLL
  9549 3F67			l_2180
  9550 3F67			l_2167
  9551 3F67			l_2154
  9552
  9553 				; optimize FAIL ('SELECTBOX', block_attack.pas), line = 1982
  9554
  9555 3F67 20 F8 2C			jsr SELECTBOX
  9556
  9557 				; optimize OK (block_attack.pas), line = 1984
  9558
  9559 3F6A AD CB A2			lda SWAPTILES.STAGE
  9560 3F6D D0 24			jne l_219B
  9561
  9562 				; optimize OK (block_attack.pas), line = 1985
  9563
  9564 3F6F AD B9 A2			lda FOUNDTHREE
  9565 3F72 F0 16			jeq l_21A8
  9566
  9567 				; optimize FAIL ('DOSCORE', block_attack.pas), line = 1987
  9568
  9569 3F74 20 EF 29			jsr DOSCORE
  9570 3F77 AD 8B A3			lda DOSCORE.RESULT
  9571 3F7A F0 08			jeq l_21B3
  9572
  9573 				; --- WhileProlog
  9574 3F7C			l_21B7
  9575
  9576 				; optimize FAIL ('TILESFALLDOWN', block_attack.pas), line = 1988
  9577
  9578 3F7C 20 C2 25			jsr TILESFALLDOWN
  9579 3F7F AD 72 A3			lda TILESFALLDOWN.RESULT
  9580 3F82 D0 F8			jne l_21B7
  9581 3F84			l_21B3
  9582
  9583 				; optimize FAIL ('UPDATETILES', block_attack.pas), line = 1990
  9584
  9585 3F84 20 50 28			jsr UPDATETILES
  9586 3F87 4C 93 3F			jmp l_21C7
  9587 3F8A			l_21A8
  9588
  9589 				; optimize FAIL ('FINDTHREEINROW', block_attack.pas), line = 1993
  9590
  9591 3F8A 20 B3 28			jsr FINDTHREEINROW
  9592 3F8D AD 85 A3			lda FINDTHREEINROW.RESULT
  9593 3F90 8D B9 A2			sta FOUNDTHREE
  9594 3F93			l_21C7
  9595 3F93			l_219B
  9596
  9597 				; optimize OK (block_attack.pas), line = 1997
  9598
  9599 3F93 AD CB A2			lda SWAPTILES.STAGE
  9600 3F96 F0 06			jeq l_21DF
  9601
  9602 				; optimize FAIL ('ONSWAP', block_attack.pas), line = 1998
  9603
  9604 3F98 20 A8 2F			jsr ONSWAP
  9605 3F9B 4C AD 3F			jmp l_21EA
  9606 3F9E			l_21DF
  9607
  9608 				; optimize OK (block_attack.pas), line = 2000
  9609
  9610 3F9E AD C0 A2			lda FIREBTN
  9611 3FA1 D0 0A			jne l_21F9
  9612
  9613 				; optimize OK (block_attack.pas), line = 2001
  9614
  9615 3FA3 AD BF A2			lda FIREDELAY
  9616 3FA6 D0 05			jne l_2209
  9617 3FA8 A9 01			lda #$01
  9618 3FAA 8D BF A2			sta FIREDELAY
  9619 3FAD			l_21EA
  9620 3FAD			l_2209
  9621 3FAD			l_21F9
  9622
  9623 				; optimize OK (block_attack.pas), line = 2004
  9624
  9625 3FAD AD CB A2			lda SWAPTILES.STAGE
  9626 3FB0 D0 03			jne l_2224
  9627 3FB2 20 D5 30			jsr WARNINGJUMPS
  9628 3FB5			l_2224
  9629
  9630 				; optimize OK (block_attack.pas), line = 2007
  9631
  9632 3FB5 AD BE A2			lda STOP
  9633 3FB8 D0 3D			jne l_223A
  9634
  9635 				; optimize OK (block_attack.pas), line = 2008
  9636
  9637 3FBA AD 81 06			lda adr.PLAYFIELD+$01
  9638 3FBD 0D 80 06			ora adr.PLAYFIELD
  9639 3FC0 0D 82 06			ora adr.PLAYFIELD+$02
  9640 3FC3 0D 83 06			ora adr.PLAYFIELD+$03
  9641 3FC6 0D 84 06			ora adr.PLAYFIELD+$04
  9642 3FC9 A0 01			ldy #1
  9643 3FCB 0D 85 06			ora adr.PLAYFIELD+$05
  9644 3FCE D0 01			bne @+
  9645 3FD0 88				dey
  9646 				@
  9647 3FD1 98				tya
  9648 3FD2 8D BE A2			sta STOP
  9649
  9650 				; optimize OK (block_attack.pas), line = 2010
  9651
  9652 3FD5 AD 81 A2			lda GAMEMODE
  9653 3FD8 C9 01			cmp #$01
  9654 3FDA D0 1B			jne l_227D
  9655 3FDC AD 94 A2			lda SECOND
  9656 3FDF 18 6D 90 A2			add MINUTE
  9657 3FE3 85 9E			sta :STACKORIGIN+10
  9658 3FE5 A9 00			lda #$00
  9659 3FE7 69 00			adc #$00
  9660 3FE9 A0 01			ldy #1
  9661 3FEB 05 9E			ora :STACKORIGIN+10
  9662 3FED F0 01			beq @+
  9663 3FEF 88				dey
  9664 				@
  9665 3FF0 98				tya
  9666 3FF1 0D BE A2			ora STOP
  9667 3FF4 8D BE A2			sta STOP
  9668 3FF7			l_227D
  9669 3FF7			l_223A
  9670
  9671 				; optimize OK (block_attack.pas), line = 2016
  9672
  9673 3FF7 AD 95 A2			lda SECOND_
  9674 3FFA CD 94 A2			cmp SECOND
  9675 3FFD D0 24			jne l_22B4
  9676 3FFF AD BE A2			lda STOP
  9677 4002 F0 1F			jeq l_22B4
  9678
  9679 				; --- WhileProlog
  9680 4004 4C 0D 40			jmp l_22B7
  9681 4007			l_22B8
  9682
  9683 				; optimize FAIL ('SYSTEM.PAUSE_016D', block_attack.pas), line = 2019
  9684
  9685 4007 20 4E 19			jsr SYSTEM.PAUSE_016D
  9686 400A 20 A1 2D			jsr ONSCROLL
  9687 400D			l_22B7
  9688 400D AD 83 A2			lda CNTROW
  9689 4010 D0 F5			jne l_22B8
  9690
  9691 				; optimize FAIL ('DOGAMEOVER', block_attack.pas), line = 2021
  9692
  9693 4012 20 9C 35			jsr DOGAMEOVER
  9694 4015 AD B5 A3			lda DOGAMEOVER.RESULT
  9695 4018 F0 06			jeq l_22D0
  9696 401A 20 06 32			jsr DOINITGAME
  9697 401D 4C 23 40			jmp l_22DB
  9698 4020			l_22D0
  9699 4020 4C C4 40			jmp b_207F					; break
  9700 4023			l_22DB
  9701 4023			l_22B4
  9702
  9703 				; optimize OK (block_attack.pas), line = 2026
  9704
  9705 4023 AD 98 A2			lda SPEED_CNT
  9706 4026 CD 97 A2			cmp SPEED
  9707 4029 B0 08			jcs l_22F7x
  9708 402B AD BC A2 D0 03		lda:sne SHIFTKEY
  9709 4030 4C 3D 40			jmp l_22F7
  9710 4033			l_22F7x
  9711
  9712 				; optimize OK (block_attack.pas), line = 2027
  9713
  9714 4033 A9 00			lda #$00
  9715 4035 8D 98 A2			sta SPEED_CNT
  9716
  9717 				; optimize OK (block_attack.pas), line = 2028
  9718
  9719 4038 A9 01			lda #$01
  9720 403A 8D BA A2			sta SCROLLUP
  9721 403D			l_22F7
  9722
  9723 				; optimize OK (block_attack.pas), line = 2031
  9724
  9725 403D AD 9E A2			lda SCROLLFREEZE+1
  9726 4040 0D 9D A2			ora SCROLLFREEZE
  9727 4043 F0 0B			jeq l_2313
  9728 4045 AD 9D A2			lda SCROLLFREEZE
  9729 4048 D0 03			bne @+
  9730 404A CE 9E A2			dec SCROLLFREEZE+1
  9731 				@
  9732 404D CE 9D A2			dec SCROLLFREEZE
  9733 4050			l_2313
  9734
  9735 				; optimize OK (block_attack.pas), line = 2034
  9736
  9737 4050 AD 88 A2			lda FOUND
  9738 4053 F0 4F			jeq l_2338
  9739 4055 AD B9 A2			lda FOUNDTHREE
  9740 4058 D0 4A			jne l_2338
  9741
  9742 				; optimize OK (block_attack.pas), line = 2036
  9743
  9744 405A AD 93 A2			lda SPEEDINC
  9745 405D 18 6D 88 A2			add FOUND
  9746 4061 8D 93 A2			sta SPEEDINC
  9747
  9748 				; optimize OK (block_attack.pas), line = 2038
  9749
  9750 4064 AD 99 A2			lda COMBO_CNT
  9751 4067 30 10			jmi l_2354
  9752 4069 AD BB A2			lda COMBO
  9753 406C F0 0B			jeq l_2354
  9754
  9755 				; optimize FAIL ('COMBOSCORE', block_attack.pas), line = 2039
  9756
  9757 406E 20 E7 2A			jsr COMBOSCORE
  9758
  9759 				; optimize OK (block_attack.pas), line = 2040
  9760
  9761 4071 A9 00			lda #$00
  9762 4073 8D 99 A2			sta COMBO_CNT
  9763 4076 4C 88 40			jmp l_2363
  9764 4079			l_2354
  9765
  9766 				; optimize OK (block_attack.pas), line = 2042
  9767
  9768 4079 AD 88 A2			lda FOUND
  9769 407C C9 04			cmp #$04
  9770 407E 90 08			jcc l_2375
  9771
  9772 				; optimize FAIL ('COMBOSCORE', block_attack.pas), line = 2043
  9773
  9774 4080 20 E7 2A			jsr COMBOSCORE
  9775
  9776 				; optimize OK (block_attack.pas), line = 2044
  9777
  9778 4083 A9 01			lda #$01
  9779 4085 8D BB A2			sta COMBO
  9780 4088			l_2363
  9781 4088			l_2375
  9782
  9783 				; optimize OK (block_attack.pas), line = 2047
  9784
  9785 4088 AD 93 A2			lda SPEEDINC
  9786 408B C9 0D			cmp #$0D
  9787 408D 90 10			jcc l_238F
  9788
  9789 				; optimize OK (block_attack.pas), line = 2048
  9790
  9791 408F AD 97 A2			lda SPEED
  9792 4092 F0 03			jeq l_23A2
  9793 4094 CE 97 A2			dec SPEED
  9794 4097			l_23A2
  9795
  9796 				; optimize FAIL ('PRINTSPEED', block_attack.pas), line = 2049
  9797
  9798 4097 20 D7 1F			jsr PRINTSPEED
  9799
  9800 				; optimize OK (block_attack.pas), line = 2050
  9801
  9802 409A A9 00			lda #$00
  9803 409C 8D 93 A2			sta SPEEDINC
  9804 409F			l_238F
  9805
  9806 				; optimize OK (block_attack.pas), line = 2053
  9807
  9808 409F A9 00			lda #$00
  9809 40A1 8D 88 A2			sta FOUND
  9810 40A4			l_2338
  9811
  9812 				; optimize OK (block_attack.pas), line = 2056
  9813
  9814 40A4 AD BB A2			lda COMBO
  9815 40A7 F0 12			jeq l_23C2
  9816
  9817 				; optimize FAIL (0, block_attack.pas), line = 2057
  9818
  9819 40A9 EE 99 A2			inc COMBO_CNT
  9820
  9821 				; optimize OK (block_attack.pas), line = 2058
  9822
  9823 40AC AD 99 A2			lda COMBO_CNT
  9824 40AF C9 81			cmp #$81
  9825 40B1 90 08			jcc l_23D9
  9826 40B3 A9 00			lda #$00
  9827 40B5 8D BB A2			sta COMBO
  9828 40B8 8D 99 A2			sta COMBO_CNT
  9829 40BB			l_23D9
  9830 40BB			l_23C2
  9831
  9832 				; optimize FAIL (0, block_attack.pas), line = 2061
  9833
  9834 40BB EE 8D A2			inc TICK
  9835
  9836 				; optimize FAIL (0, block_attack.pas), line = 2063
  9837
  9838 40BE EE 8F A2			inc FRAME_CNT
  9839
  9840 				; optimize OK (block_attack.pas), line = 2065
  9841
  9842 40C1 4C 75 3E			jmp l_207F
  9843 40C4			b_207F
  9844
  9845 				; optimize OK (block_attack.pas), line = 2072
  9846
  9847 40C4 4C 16 3E			jmp l_206F
  9848
  9849 				; ------------------------------------------------------------
  9850
  9851 = 0600			PM_COLOR	= $0600
  9852 = D800			PMB_PAGE	= $D800
  9853 = D800			DISPLAY_LIST_ADDRESS	= $D800
  9854 = E000			CHARSET_RAM_ADDRESS	= $E000
  9855 = C000			VIDEO_RAM_ADDRESS_A	= $C000
  9856 = B000			VIDEO_RAM_ADDRESS_B	= $B000
  9857 = A400			SAPR_PLAYER	= $A400
  9858 = 0002			BKG_COLOR	= $02
  9859 = 00FA			BKG_PANEL	= $FA
  9860 = 0028			WIDTH	= $28
  9861 = 0064			MAX_SPEED	= $64
  9862 = 0AA2			adr.MATCH1	= CODEORIGIN+$0122
  9863 40C7			.var MATCH1	= adr.MATCH1 .word
  9864 = 0AB5			adr.MATCH2	= CODEORIGIN+$0135
  9865 40C7			.var MATCH2	= adr.MATCH2 .word
  9866 = 0AC8			adr.MATCH3	= CODEORIGIN+$0148
  9867 40C7			.var MATCH3	= adr.MATCH3 .word
  9868 = 0ADB			adr.SFMOVE	= CODEORIGIN+$015B
  9869 40C7			.var SFMOVE	= adr.SFMOVE .word
  9870 = 0AEE			adr.SFSWAP	= CODEORIGIN+$016E
  9871 40C7			.var SFSWAP	= adr.SFSWAP .word
  9872 = 0B01			adr.VPANEL	= CODEORIGIN+$0181
  9873 40C7			.var VPANEL	= adr.VPANEL .word
  9874 = 0B10			adr.PMDIGIT	= CODEORIGIN+$0190
  9875 40C7			.var PMDIGIT	= adr.PMDIGIT .word
  9876 = 0BB0			adr.DIGITH	= CODEORIGIN+$0230
  9877 40C7			.var DIGITH	= adr.DIGITH .word
  9878 = 0C70			adr.GAMEOVER_YN	= CODEORIGIN+$02F0
  9879 40C7			.var GAMEOVER_YN	= adr.GAMEOVER_YN .word
  9880 = 0D30			adr.GAMEOVER	= CODEORIGIN+$03B0
  9881 40C7			.var GAMEOVER	= adr.GAMEOVER .word
  9882 = 0FD0			adr.TIMEOVER_YN	= CODEORIGIN+$0650
  9883 40C7			.var TIMEOVER_YN	= adr.TIMEOVER_YN .word
  9884 = 1090			adr.TIMEOVER	= CODEORIGIN+$0710
  9885 40C7			.var TIMEOVER	= adr.TIMEOVER .word
  9886 = 1330			adr.TRYAGAIN	= CODEORIGIN+$09B0
  9887 40C7			.var TRYAGAIN	= adr.TRYAGAIN .word
  9888 = 13F0			adr.TRYAGAIN2	= CODEORIGIN+$0A70
  9889 40C7			.var TRYAGAIN2	= adr.TRYAGAIN2 .word
  9890 = 14B0			adr.MONSTER0	= CODEORIGIN+$0B30
  9891 40C7			.var MONSTER0	= adr.MONSTER0 .word
  9892 = 1540			adr.MONSTER1	= CODEORIGIN+$0BC0
  9893 40C7			.var MONSTER1	= adr.MONSTER1 .word
  9894 = 15D0			adr.MONSTER2	= CODEORIGIN+$0C50
  9895 40C7			.var MONSTER2	= adr.MONSTER2 .word
  9896 = 0680			adr.PLAYFIELD	= $0680
  9897 40C7			.var PLAYFIELD	= adr.PLAYFIELD .word
  9898 = DB00			adr.MISSILE	= $DB00
  9899 40C7			.var MISSILE	= adr.MISSILE .word
  9900 = A27B			adr.GMSPEED	= [DATAORIGIN+$0098] .array [2]
  9901 40C7			.var GMSPEED	= adr.GMSPEED .word
  9902 = A27D			HISCORE	= DATAORIGIN+$009A
  9903 = A281			GAMEMODE	= DATAORIGIN+$009E
  9904 = D20A			RND	= $D20A
  9905 = A282			VSC	= DATAORIGIN+$009F
  9906 = A283			CNTROW	= DATAORIGIN+$00A0
  9907 = A284			SCROLL	= DATAORIGIN+$00A1
  9908 = A285			CNTFOUND	= DATAORIGIN+$00A2
  9909 = A286			XSEL	= DATAORIGIN+$00A3
  9910 = A287			YSEL	= DATAORIGIN+$00A4
  9911 = A288			FOUND	= DATAORIGIN+$00A5
  9912 = A289			JOYDELAY	= DATAORIGIN+$00A6
  9913 = A28A			JOY	= DATAORIGIN+$00A7
  9914 = A28B			YOLD	= DATAORIGIN+$00A8
  9915 = A28C			YSHIFT	= DATAORIGIN+$00A9
  9916 = A28D			TICK	= DATAORIGIN+$00AA
  9917 = A28E			MATCH	= DATAORIGIN+$00AB
  9918 = A28F			FRAME_CNT	= DATAORIGIN+$00AC
  9919 = A290			MINUTE	= DATAORIGIN+$00AD
  9920 = A291			LEFT_EDGE	= DATAORIGIN+$00AE
  9921 = A292			RIGHT_EDGE	= DATAORIGIN+$00AF
  9922 = A293			SPEEDINC	= DATAORIGIN+$00B0
  9923 = A294			SECOND	= DATAORIGIN+$00B1
  9924 = A295			SECOND_	= DATAORIGIN+$00B2
  9925 = A296			LEVEL	= DATAORIGIN+$00B3
  9926 = A297			SPEED	= DATAORIGIN+$00B4
  9927 = A298			SPEED_CNT	= DATAORIGIN+$00B5
  9928 = A299			COMBO_CNT	= DATAORIGIN+$00B6
  9929 = A29A			MONSTER0_FRM	= DATAORIGIN+$00B7
  9930 = A29B			MONSTER1_FRM	= DATAORIGIN+$00B8
  9931 = A29C			MONSTER2_FRM	= DATAORIGIN+$00B9
  9932 = A29D			SCROLLFREEZE	= DATAORIGIN+$00BA
  9933 = A29F			SCORE	= DATAORIGIN+$00BC
  9934 = A2A3			SCORE_	= DATAORIGIN+$00C0
  9935 = A2A7			HISCORE_	= DATAORIGIN+$00C4
  9936 = A2AB			VRAM	= DATAORIGIN+$00C8
  9937 = A2AD			OLD_VBL	= DATAORIGIN+$00CA
  9938 = A2AF			OLD_DLI	= DATAORIGIN+$00CC
  9939 = A2B1			OLD_IRQ	= DATAORIGIN+$00CE
  9940 = A2B3			adr.JUMP	= [DATAORIGIN+$00D0] .array [6]
  9941 40C7			.var JUMP	= adr.JUMP .word
  9942 = A2B9			FOUNDTHREE	= DATAORIGIN+$00D6
  9943 = A2BA			SCROLLUP	= DATAORIGIN+$00D7
  9944 = A2BB			COMBO	= DATAORIGIN+$00D8
  9945 = A2BC			SHIFTKEY	= DATAORIGIN+$00D9
  9946 = A2BD			MONSTER_SCORE	= DATAORIGIN+$00DA
  9947 = A2BE			STOP	= DATAORIGIN+$00DB
  9948 = A2BF			FIREDELAY	= DATAORIGIN+$00DC
  9949 = A2C0			FIREBTN	= DATAORIGIN+$00DD
  9950 = A2C1			MSX_PLAY	= DATAORIGIN+$00DE
  9951 = A2C2			MATCH_PLAY	= DATAORIGIN+$00DF
  9952 = A2C3			MOVE_PLAY	= DATAORIGIN+$00E0
  9953 = A2C4			SWAP_PLAY	= DATAORIGIN+$00E1
  9954 = A2C5			MSX_FASTER	= DATAORIGIN+$00E2
  9955 = A2C6			adr.MSX	= DATAORIGIN+$00E3	; [5] OBJECT
  9956 40C7			.var MSX	= adr.MSX .word
  9957 = A2C6			MSX.JMP	= DATAORIGIN+$00E3
  9958 = A2C7			MSX.PLAYER	= DATAORIGIN+$00E4
  9959 = A2C9			MSX.MODUL	= DATAORIGIN+$00E6
  9960 = A2CB			adr.SWAPTILES	= DATAORIGIN+$00E8	; [6] RECORD
  9961 40C7			.var SWAPTILES	= adr.SWAPTILES .word
  9962 = A2CB			SWAPTILES.STAGE	= DATAORIGIN+$00E8
  9963 = A2CC			SWAPTILES.INDEX	= DATAORIGIN+$00E9
  9964 = A2CD			SWAPTILES.TILE0	= DATAORIGIN+$00EA
  9965 = A2CE			SWAPTILES.TILE1	= DATAORIGIN+$00EB
  9966 = A2CF			SWAPTILES.P	= DATAORIGIN+$00EC
  9967 40C7			@exit
  9968
  9969 40C7 A2 00		@halt	ldx #$00
  9970 40C9 9A				txs
  9971 					.ifdef MAIN.@DEFINES.ROMOFF
  9972 					inc portb
  9973 					.fi
  9974
  9975 40CA A0 01			ldy #$01
  9976
  9977 40CC 60				rts
  9978
  9979 				; ------------------------------------------------------------
  9980
  9981 40CD 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  9982
  9983 				; ------------------------------------------------------------
  9984
  9985 40DD			.local	@DEFINES
  9986 40DD			ATARI
  9987 40DD			BASICOFF
  9988 				.endl
  9989
  9990 40DD			.local	@RESOURCE
  9991 40DD 80 00 25 3E 02 0A + F_ID0	ins 'assets\ta_charset.zx0'
  9992 4467			F_ID0.end
  9993 4467 91 00 99 03 3E 00 + F_ID1	ins 'assets\gameover\game_over_anim.zx0'
  9994 486C			F_ID1.end
  9995 486C 95 00 42 7E 0F 3A + F_ID1_A	ins 'assets\gameover\game_over_1.zx0'
  9996 49EC			F_ID1_A.end
  9997 49EC 84 00 63 03 0D A6 + F_ID1_B	ins 'assets\gameover\game_over_2.zx0'
  9998 4B27			F_ID1_B.end
  9999 4B27 84 00 AA 0F 3A 22 + F_ID2	ins 'assets\timeover\time_over_anim.zx0'
 10000 4E9E			F_ID2.end
 10001 4E9E 85 00 22 0F 00 0A + F_ID2_A	ins 'assets\timeover\time_over_1.zx0'
 10002 4FDB			F_ID2_A.end
 10003 4FDB 95 00 89 0F 3A 22 + F_ID2_B	ins 'assets\timeover\time_over_2.zx0'
 10004 5102			F_ID2_B.end
 10005 5102 80 00 15 25 F9 3F + T_PM0	ins 'assets\panel_anim\panel.zx0'
 10006 53C0			T_PM0.end
 10007 53C0 06 4C F8 F6 70 44 + T_TIT	ins 'assets\title\title.zx0'
 10008 63E4			T_TIT.end
 10009 63E4 5A 4C D0 F2 4C 16 + T_TIT2	ins 'assets\title\title2.zx0'
 10010 6F0E			T_TIT2.end
 10011 6F0E			SAPR_YOSHI
 10012 6F0E EE 14			dta a(SAPR_YOSHI.end-SAPR_YOSHI-2)
 10013 6F10 00 40 08 00 87 00 + 	ins 'assets\msx_final\Yoshi.Theme.lzss'
 10014 83FE			SAPR_YOSHI.end
 10015 83FE			SAPR_CRITICAL
 10016 83FE 2C 12			dta a(SAPR_CRITICAL.end-SAPR_CRITICAL-2)
 10017 8400 00 00 09 00 C7 B6 + 	ins 'assets\msx_final\Yoshi.Theme.Critical.lzss'
 10018 962C			SAPR_CRITICAL.end
 10019 962C			SAPR_MODUL
 10020 962C 1B 0B			dta a(SAPR_MODUL.end-SAPR_MODUL-2)
 10021 962E 00 00 AF D0 00 00 + 	ins 'assets\msx\lzss\battack.lz16'
 10022 A149			SAPR_MODUL.end
 10023 				.endl
 10024
 10025 = A149 A2 0A		MATCH1
 10025 = A14B B5 0A		MATCH2
 10025 = A14D C8 0A		MATCH3
 10025 = A14F DB 0A		SFMOVE
 10025 = A151 EE 0A		SFSWAP
 10025 = A153 01 0B		VPANEL
 10025 = A155 10 0B		PMDIGIT
 10025 = A157 B0 0B		DIGITH
 10025 = A159 70 0C		GAMEOVER_YN
 10025 = A15B 30 0D		GAMEOVER
 10025 = A15D D0 0F		TIMEOVER_YN
 10025 = A15F 90 10		TIMEOVER
 10025 = A161 30 13		TRYAGAIN
 10025 = A163 F0 13		TRYAGAIN2
 10025 = A165 B0 14		MONSTER0
 10025 = A167 40 15		MONSTER1
 10025 = A169 D0 15		MONSTER2
 10025 = A16B 80 06		PLAYFIELD
 10025 = A16D 00 DB		MISSILE
 10025 = A16F 7B A2		GMSPEED
 10025 = A171 B3 A2		JUMP
 10025 = A173 C6 A2		MSX
 10025 = A175 CB A2		SWAPTILES
 10025 				.endl							; MAIN
 10026
 10027 				; ------------------------------------------------------------
 10028 				; ------------------------------------------------------------
 10029
 10030 				.macro	UNITINITIALIZATION
 10031 				
 10032 					.ifdef MAIN.SYSTEM.@UnitInit
 10033 					jsr MAIN.SYSTEM.@UnitInit
 10034 					.fi
 10035 				
 10036 					.ifdef MAIN.ATARI.@UnitInit
 10037 					jsr MAIN.ATARI.@UnitInit
 10038 					.fi
 10039 				
 10040 					.ifdef MAIN.CRT.@UnitInit
 10041 					jsr MAIN.CRT.@UnitInit
 10042 					.fi
 10043 				
 10044 					.ifdef MAIN.DOS.@UnitInit
 10045 					jsr MAIN.DOS.@UnitInit
 10046 					.fi
 10047 				
 10048 					.ifdef MAIN.STRUTILS.@UnitInit
 10049 					jsr MAIN.STRUTILS.@UnitInit
 10050 					.fi
 10051 				
 10052 					.ifdef MAIN.SYSUTILS.@UnitInit
 10053 					jsr MAIN.SYSUTILS.@UnitInit
 10054 					.fi
 10055 				
 10056 					.ifdef MAIN.JGP2.@UnitInit
 10057 					jsr MAIN.JGP2.@UnitInit
 10058 					.fi
 10059 				
 10060 					.ifdef MAIN.JOYSTICK.@UnitInit
 10061 					jsr MAIN.JOYSTICK.@UnitInit
 10062 					.fi
 10063 				
 10064 					.ifdef MAIN.TYPES.@UnitInit
 10065 					jsr MAIN.TYPES.@UnitInit
 10066 					.fi
 10067 				
 10068 					.ifdef MAIN.GRAPH.@UnitInit
 10069 					jsr MAIN.GRAPH.@UnitInit
 10070 					.fi
 10071 				
 10072 					.ifdef MAIN.ZX5.@UnitInit
 10073 					jsr MAIN.ZX5.@UnitInit
 10074 					.fi
 10075 				
 10076 					.ifdef MAIN.MISC.@UnitInit
 10077 					jsr MAIN.MISC.@UnitInit
 10078 					.fi
 10079 				
 10080 					.ifdef MAIN.SYSREQ.@UnitInit
 10081 					jsr MAIN.SYSREQ.@UnitInit
 10082 					.fi
 10083 				
 10084 					.ifdef MAIN.SAPLZSS.@UnitInit
 10085 					jsr MAIN.SAPLZSS.@UnitInit
 10086 					.fi
 10087 				.endm
 10088
 10089 				; ------------------------------------------------------------
 10090
 10091 					ift .SIZEOF(MAIN.SYSTEM) > 0
 10092 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
 10092 				SYSTEM: $18FE..$1998
 10093 					eif
 10094
 10095 					ift .SIZEOF(MAIN.ATARI) > 0
 10096 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
 10097 					eif
 10098
 10099 					ift .SIZEOF(MAIN.CRT) > 0
 10100 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
 10100 				CRT: $1999..$19A6
 10101 					eif
 10102
 10103 					ift .SIZEOF(MAIN.DOS) > 0
 10104 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
 10105 					eif
 10106
 10107 					ift .SIZEOF(MAIN.STRUTILS) > 0
 10108 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
 10109 					eif
 10110
 10111 					ift .SIZEOF(MAIN.SYSUTILS) > 0
 10112 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
 10112 				SYSUTILS: $19A7..$19EC
 10113 					eif
 10114
 10115 					ift .SIZEOF(MAIN.JGP2) > 0
 10116 					.print 'JGP2: ',MAIN.JGP2,'..',MAIN.JGP2+.SIZEOF(MAIN.JGP2)-1
 10116 				JGP2: $19ED..$1AFE
 10117 					eif
 10118
 10119 					ift .SIZEOF(MAIN.JOYSTICK) > 0
 10120 					.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
 10120 				JOYSTICK: $1AFF..$1B4B
 10121 					eif
 10122
 10123 					ift .SIZEOF(MAIN.TYPES) > 0
 10124 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
 10125 					eif
 10126
 10127 					ift .SIZEOF(MAIN.GRAPH) > 0
 10128 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
 10128 				GRAPH: $1B4C..$1B4D
 10129 					eif
 10130
 10131 					ift .SIZEOF(MAIN.ZX5) > 0
 10132 					.print 'ZX5: ',MAIN.ZX5,'..',MAIN.ZX5+.SIZEOF(MAIN.ZX5)-1
 10132 				ZX5: $1B4E..$1C71
 10133 					eif
 10134
 10135 					ift .SIZEOF(MAIN.MISC) > 0
 10136 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
 10136 				MISC: $1C72..$1CE9
 10137 					eif
 10138
 10139 					ift .SIZEOF(MAIN.SYSREQ) > 0
 10140 					.print 'SYSREQ: ',MAIN.SYSREQ,'..',MAIN.SYSREQ+.SIZEOF(MAIN.SYSREQ)-1
 10140 				SYSREQ: $1CEA..$1D67
 10141 					eif
 10142
 10143 					ift .SIZEOF(MAIN.SAPLZSS) > 0
 10144 					.print 'SAPLZSS: ',MAIN.SAPLZSS,'..',MAIN.SAPLZSS+.SIZEOF(MAIN.SAPLZSS)-1
 10144 				SAPLZSS: $1D68..$1E84
 10145 					eif
 10146
 10147 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
 10147 				CODE: $0980..$40DC
 10148 					.print '$R F_ID0',' ',"'assets\ta_charset.zx0'",' ',MAIN.@RESOURCE.F_ID0,'..',MAIN.@RESOURCE.F_ID0.end-1
 10148 				$R F_ID0 'assets\ta_charset.zx0' $40DD..$4466
 10149 					.print '$R F_ID1',' ',"'assets\gameover\game_over_anim.zx0'",' ',MAIN.@RESOURCE.F_ID1,'..',MAIN.@RESOURCE.F_ID1.end-1
 10149 				$R F_ID1 'assets\gameover\game_over_anim.zx0' $4467..$486B
 10150 					.print '$R F_ID1_A',' ',"'assets\gameover\game_over_1.zx0'",' ',MAIN.@RESOURCE.F_ID1_A,'..',MAIN.@RESOURCE.F_ID1_A.end-1
 10150 				$R F_ID1_A 'assets\gameover\game_over_1.zx0' $486C..$49EB
 10151 					.print '$R F_ID1_B',' ',"'assets\gameover\game_over_2.zx0'",' ',MAIN.@RESOURCE.F_ID1_B,'..',MAIN.@RESOURCE.F_ID1_B.end-1
 10151 				$R F_ID1_B 'assets\gameover\game_over_2.zx0' $49EC..$4B26
 10152 					.print '$R F_ID2',' ',"'assets\timeover\time_over_anim.zx0'",' ',MAIN.@RESOURCE.F_ID2,'..',MAIN.@RESOURCE.F_ID2.end-1
 10152 				$R F_ID2 'assets\timeover\time_over_anim.zx0' $4B27..$4E9D
 10153 					.print '$R F_ID2_A',' ',"'assets\timeover\time_over_1.zx0'",' ',MAIN.@RESOURCE.F_ID2_A,'..',MAIN.@RESOURCE.F_ID2_A.end-1
 10153 				$R F_ID2_A 'assets\timeover\time_over_1.zx0' $4E9E..$4FDA
 10154 					.print '$R F_ID2_B',' ',"'assets\timeover\time_over_2.zx0'",' ',MAIN.@RESOURCE.F_ID2_B,'..',MAIN.@RESOURCE.F_ID2_B.end-1
 10154 				$R F_ID2_B 'assets\timeover\time_over_2.zx0' $4FDB..$5101
 10155 					.print '$R T_PM0',' ',"'assets\panel_anim\panel.zx0'",' ',MAIN.@RESOURCE.T_PM0,'..',MAIN.@RESOURCE.T_PM0.end-1
 10155 				$R T_PM0 'assets\panel_anim\panel.zx0' $5102..$53BF
 10156 					.print '$R T_TIT',' ',"'assets\title\title.zx0'",' ',MAIN.@RESOURCE.T_TIT,'..',MAIN.@RESOURCE.T_TIT.end-1
 10156 				$R T_TIT 'assets\title\title.zx0' $53C0..$63E3
 10157 					.print '$R T_TIT2',' ',"'assets\title\title2.zx0'",' ',MAIN.@RESOURCE.T_TIT2,'..',MAIN.@RESOURCE.T_TIT2.end-1
 10157 				$R T_TIT2 'assets\title\title2.zx0' $63E4..$6F0D
 10158 					.print '$R SAPR_YOSHI',' ',"'assets\msx_final\Yoshi.Theme.lzss'",' ',MAIN.@RESOURCE.SAPR_YOSHI,'..',MAIN.@RESOURCE.SAPR_YOSHI.end-1
 10158 				$R SAPR_YOSHI 'assets\msx_final\Yoshi.Theme.lzss' $6F0E..$83FD
 10159 					.print '$R SAPR_CRITICAL',' ',"'assets\msx_final\Yoshi.Theme.Critical.lzss'",' ',MAIN.@RESOURCE.SAPR_CRITICAL,'..',MAIN.@RESOURCE.SAPR_CRITICAL.end-1
 10159 				$R SAPR_CRITICAL 'assets\msx_final\Yoshi.Theme.Critical.lzss' $83FE..$962B
 10160 					.print '$R SAPR_MODUL',' ',"'assets\msx\lzss\battack.lz16'",' ',MAIN.@RESOURCE.SAPR_MODUL,'..',MAIN.@RESOURCE.SAPR_MODUL.end-1
 10160 				$R SAPR_MODUL 'assets\msx\lzss\battack.lz16' $962C..$A148
 10161
 10162 				; ------------------------------------------------------------
 10163
 10164 = A177				?adr = *
 10165 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
 10166 = A1E3				?adr = ?old_adr
 10167 					eif
 10168
 10169 					org ?adr
 10170 = A1E3				?old_adr = *
 10171
 10172 A1E3			DATAORIGIN
 10173 A1E3-A27E> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10174 A1FB 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10175 A213 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10176 A22B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $27 $00 $00 $00 $17 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10177 A243 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10178 A25B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10179 A273 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $50 $19 $F4 $01
 10180
 10181 = 009C			VARINITSIZE	= *-DATAORIGIN
 10182 = 01EB			VARDATASIZE	= 491
 10183
 10184 = A3CE			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
 10185
 10186 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
 10186 				DATA: $A1E3..$A3CE
 10187
 10188 02E0-02E1> BA 18			run START
 10189
 10190 				; ------------------------------------------------------------
 10191
 10192 				.macro	STATICDATA
 10193 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $15 $41 $4E  $54 $49 $43 $20 $50 $41 $4C $20
 10194 				.by  $69 $73 $20 $72 $65 $71 $75 $69  $72 $65 $64 $00 $15 $20 $36 $35  $30 $32 $20 $43 $50 $55 $20 $69
 10195 				.by  $73 $20 $72 $65 $71 $75 $69 $72  $65 $64 $00 $19 $53 $65 $63 $6F  $6E $64 $20 $50 $4F $4B $45 $59
 10196 				.by  $20 $6E $6F $74 $20 $64 $65 $74  $65 $63 $74 $65 $64 $00 $15 $44  $69 $73 $61 $62 $6C $65 $20 $65
 10197 				.by  $78 $74 $65 $72 $6E $61 $6C $20  $63 $61 $72 $74 $00 $0D $50 $72  $65 $73 $73 $20 $61 $6E $79 $20
 10198 				.by  $6B $65 $79 $00 $0D $73 $61 $70  $72 $5F $63 $72 $69 $74 $69 $63  $61 $6C $00 $0A $73 $61 $70 $72
 10199 				.by  $5F $79 $6F $73 $68 $69 $00 $05  $74 $5F $70 $6D $30 $00 $05 $66  $5F $69 $64 $30 $00 $05 $66 $5F
 10200 				.by  $69 $64 $32 $00 $05 $66 $5F $69  $64 $31 $00 $07 $66 $5F $69 $64  $32 $5F $61 $00 $07 $66 $5F $69
 10201 				.by  $64 $32 $5F $62 $00 $07 $66 $5F  $69 $64 $31 $5F $61 $00 $07 $66  $5F $69 $64 $31 $5F $62 $00 $05
 10202 				.by  $74 $5F $74 $69 $74 $00 $0A $73  $61 $70 $72 $5F $6D $6F $64 $75  $6C $00 $06 $74 $5F $74 $69 $74
 10203 				.by  $32 $00 $03 $02 $02 $01 $01 $02  $02 $03 $03 $03 $03 $03 $03 $03  $02 $03 $28 $14 $14 $28 $50 $50
 10204 				.by  $A0 $A0 $40 $50 $50 $50 $28 $28  $A0 $A0 $18 $18 $0C $18 $30 $30  $60 $60 $C0 $C0 $C0 $C0 $18 $0C
 10205 				.by  $C0 $C0 $00 $4F $A8 $4E $A8 $4D  $A8 $4C $A6 $4B $A4 $49 $A3 $48  $A2 $00 $A0 $00 $00 $00 $37 $A8
 10206 				.by  $36 $A8 $35 $A8 $34 $A6 $33 $A4  $32 $A3 $31 $A2 $00 $A0 $00 $00  $00 $1F $A8 $1E $A8 $1D $A8 $1C
 10207 				.by  $A6 $1B $A4 $19 $A3 $18 $A2 $E0  $A0 $00 $00 $00 $00 $A3 $00 $A0  $00 $A3 $00 $A0 $00 $A3 $00 $A0
 10208 				.by  $00 $A0 $00 $A0 $00 $00 $00 $00  $04 $00 $02 $00 $01 $00 $00 $00  $02 $00 $04 $00 $00 $00 $00 $00
 10209 				.by  $00 $00 $FA $FA $FA $FA $FA $FA  $FA $FA $00 $00 $00 $00 $00 $00  $38 $38 $4C $4C $54 $54 $64 $64
 10210 				.by  $44 $44 $44 $44 $38 $38 $00 $00  $10 $10 $30 $30 $10 $10 $10 $10  $10 $10 $10 $10 $7C $7C $00 $00
 10211 				.by  $38 $38 $04 $04 $38 $38 $40 $40  $40 $40 $40 $40 $7C $7C $00 $00  $7C $7C $08 $08 $18 $18 $04 $04
 10212 				.by  $04 $04 $44 $44 $38 $38 $00 $00  $40 $40 $50 $50 $7C $7C $10 $10  $10 $10 $10 $10 $10 $10 $00 $00
 10213 				.by  $7C $7C $40 $40 $78 $78 $04 $04  $04 $04 $44 $44 $38 $38 $00 $00  $38 $38 $40 $40 $78 $78 $44 $44
 10214 				.by  $44 $44 $44 $44 $38 $38 $00 $00  $7C $7C $04 $04 $08 $08 $10 $10  $10 $10 $10 $10 $10 $10 $00 $00
 10215 				.by  $38 $38 $44 $44 $38 $38 $44 $44  $44 $44 $44 $44 $38 $38 $00 $00  $3C $3C $44 $44 $44 $44 $3C $3C
 10216 				.by  $04 $04 $04 $04 $04 $04 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $60 $A0 $A0 $A0 $A0 $C0 $00 $00
 10217 				.by  $C0 $40 $40 $40 $40 $40 $00 $00  $C0 $20 $60 $80 $80 $E0 $00 $00  $E0 $20 $60 $20 $20 $C0 $00 $00
 10218 				.by  $80 $A0 $A0 $E0 $20 $20 $00 $00  $E0 $80 $E0 $20 $20 $C0 $00 $00  $C0 $80 $E0 $A0 $A0 $C0 $00 $00
 10219 				.by  $E0 $20 $20 $20 $20 $20 $00 $00  $E0 $A0 $E0 $A0 $A0 $E0 $00 $00  $E0 $A0 $A0 $E0 $20 $20 $00 $00
 10220 				.by  $00 $40 $40 $00 $40 $40 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $06 $0A $0A $0A $0A $0C $00 $00
 10221 				.by  $0C $04 $04 $04 $04 $04 $00 $00  $0C $02 $06 $08 $08 $0E $00 $00  $0E $02 $06 $02 $02 $0C $00 $00
 10222 				.by  $08 $0A $0A $0E $02 $02 $00 $00  $0E $08 $0E $02 $02 $0C $00 $00  $0C $08 $0E $0A $0A $0C $00 $00
 10223 				.by  $0E $02 $02 $02 $02 $02 $00 $00  $0E $0A $0E $0A $0A $0E $00 $00  $0E $0A $0A $0E $02 $02 $00 $00
 10224 				.by  $00 $04 $04 $00 $04 $04 $00 $00  $00 $01 $00 $01 $00 $01 $02 $03  $04 $05 $06 $07 $08 $09 $0A $0B
 10225 				.by  $0C $0D $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $02 $03  $04 $05 $06 $07 $08 $09 $0A $0B
 10226 				.by  $0C $0D $00 $01 $00 $01 $00 $01  $0E $0F $10 $11 $12 $13 $14 $15  $16 $17 $18 $19 $1A $1B $1C $1D
 10227 				.by  $1E $1F $00 $01 $00 $01 $00 $01  $0E $0F $10 $11 $12 $13 $14 $15  $16 $17 $18 $19 $1A $1B $1C $1D
 10228 				.by  $1E $1F $00 $01 $00 $01 $00 $01  $20 $21 $22 $23 $24 $25 $26 $27  $28 $29 $2A $2B $2C $2D $2E $2F
 10229 				.by  $30 $31 $32 $33 $00 $01 $00 $01  $20 $21 $22 $23 $24 $25 $26 $27  $28 $29 $2A $2B $2C $2D $2E $2F
 10230 				.by  $30 $31 $32 $33 $00 $01 $00 $01  $00 $01 $00 $01 $34 $35 $36 $37  $38 $39 $3A $3B $3C $3D $3E $3F
 10231 				.by  $40 $41 $42 $43 $44 $45 $00 $01  $00 $01 $00 $01 $34 $35 $36 $37  $38 $39 $3A $3B $3C $3D $3E $3F
 10232 				.by  $40 $41 $42 $43 $44 $45 $00 $01  $00 $00 $01 $02 $03 $00 $04 $05  $06 $07 $08 $09 $0A $0B $0C $0D
 10233 				.by  $0E $00 $00 $00 $00 $00 $00 $00  $0F $10 $11 $12 $13 $14 $15 $16  $17 $18 $19 $1A $1B $1C $1D $1E
 10234 				.by  $1F $00 $00 $00 $00 $00 $00 $00  $20 $21 $22 $23 $24 $25 $26 $27  $28 $29 $2A $2B $2C $2D $2E $2F
 10235 				.by  $30 $00 $00 $00 $00 $00 $00 $00  $00 $31 $32 $33 $34 $35 $36 $37  $38 $39 $3A $3B $3C $3D $3E $3F
 10236 				.by  $40 $41 $42 $43 $00 $00 $00 $00  $00 $00 $00 $00 $0F $10 $44 $45  $46 $47 $48 $49 $4A $4B $4C $4D
 10237 				.by  $4E $4F $50 $51 $00 $00 $00 $00  $00 $00 $00 $00 $52 $53 $54 $55  $56 $57 $58 $59 $5A $5B $5C $5D
 10238 				.by  $5E $5F $60 $61 $62 $00 $00 $00  $00 $00 $00 $00 $00 $63 $64 $65  $66 $00 $00 $00 $00 $00 $00 $00
 10239 				.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $01 $02  $03 $04 $05 $06 $07 $08 $09 $0A
 10240 				.by  $0B $00 $00 $00 $00 $00 $00 $00  $00 $0C $0D $0E $0F $10 $11 $12  $13 $14 $15 $16 $17 $18 $19 $1A
 10241 				.by  $1B $00 $00 $00 $00 $00 $00 $00  $1C $1D $1E $1F $20 $21 $22 $23  $24 $25 $26 $27 $28 $29 $2A $2B
 10242 				.by  $2C $00 $00 $00 $00 $00 $00 $00  $2D $2E $2F $30 $31 $32 $33 $34  $35 $36 $37 $38 $39 $3A $3B $3C
 10243 				.by  $3D $0A $3E $3F $00 $00 $00 $00  $00 $00 $00 $00 $00 $0C $40 $41  $42 $43 $44 $45 $46 $47 $48 $49
 10244 				.by  $4A $4B $4C $4D $00 $00 $00 $00  $00 $00 $00 $00 $4E $4F $50 $51  $52 $53 $54 $55 $56 $57 $58 $59
 10245 				.by  $5A $5B $5C $5D $5E $00 $00 $00  $00 $00 $00 $00 $00 $5F $60 $61  $62 $63 $00 $00 $00 $00 $00 $00
 10246 				.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $01 $02  $00 $03 $04 $05 $06 $07 $08 $09
 10247 				.by  $0A $00 $00 $00 $00 $00 $00 $00  $00 $0B $0C $0D $0E $0F $10 $11  $12 $13 $14 $15 $16 $17 $18 $19
 10248 				.by  $1A $00 $00 $00 $00 $00 $00 $00  $1B $1C $1D $1E $1F $20 $21 $22  $23 $24 $25 $26 $27 $28 $29 $2A
 10249 				.by  $2B $00 $00 $00 $00 $00 $00 $00  $2C $2D $2E $2F $30 $31 $32 $07  $33 $34 $35 $36 $37 $38 $39 $3A
 10250 				.by  $3B $09 $3C $3D $00 $00 $00 $00  $00 $00 $3E $3F $00 $0B $40 $41  $42 $43 $44 $45 $46 $47 $48 $49
 10251 				.by  $4A $4B $4C $4D $00 $00 $00 $00  $00 $00 $00 $00 $4E $4F $50 $51  $52 $53 $54 $55 $56 $57 $58 $59
 10252 				.by  $5A $5B $5C $5D $5E $00 $00 $00  $00 $00 $00 $00 $00 $5F $60 $61  $62 $63 $64 $00 $65 $66 $00 $00
 10253 				.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $01 $00 $02 $03
 10254 				.by  $04 $00 $00 $00 $00 $00 $00 $00  $00 $05 $06 $07 $08 $09 $0A $0B  $0C $0D $0E $0F $10 $11 $12 $13
 10255 				.by  $14 $00 $00 $00 $00 $00 $00 $00  $15 $16 $17 $18 $19 $1A $1B $1C  $1D $1E $1F $20 $21 $22 $23 $24
 10256 				.by  $25 $00 $00 $00 $00 $00 $00 $00  $26 $27 $28 $29 $2A $2B $2C $00  $2D $2E $2F $30 $31 $32 $33 $34
 10257 				.by  $35 $03 $04 $00 $00 $00 $00 $00  $00 $36 $37 $38 $39 $05 $3A $3B  $3C $3D $3E $3F $40 $41 $42 $43
 10258 				.by  $44 $45 $46 $47 $00 $00 $00 $00  $00 $00 $00 $00 $15 $16 $48 $49  $4A $4B $4C $4D $4E $4F $50 $51
 10259 				.by  $52 $53 $54 $55 $56 $00 $00 $00  $00 $00 $00 $00 $57 $58 $59 $5A  $5B $5C $5D $5E $5F $60 $61 $62
 10260 				.by  $63 $36 $64 $65 $00 $00 $00 $00  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01
 10261 				.by  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01
 10262 				.by  $00 $01 $00 $01 $00 $01 $00 $01  $82 $83 $84 $85 $86 $07 $88 $09  $8A $8B $8C $8D $8E $8F $90 $91
 10263 				.by  $92 $93 $94 $15 $00 $01 $00 $01  $82 $83 $84 $85 $86 $87 $88 $89  $8A $8B $8C $8D $8E $8F $90 $91
 10264 				.by  $92 $93 $94 $95 $00 $01 $00 $01  $96 $97 $98 $99 $9A $9B $9C $9D  $9E $9F $A0 $A1 $A2 $A3 $A4 $A5
 10265 				.by  $A6 $A7 $A8 $A9 $00 $01 $00 $01  $16 $97 $98 $99 $9A $9B $9C $9D  $9E $9F $A0 $A1 $A2 $A3 $A4 $A5
 10266 				.by  $A6 $A7 $A8 $A9 $00 $01 $00 $01  $2A $AB $AC $AD $AE $AF $B0 $B1  $B2 $B3 $B4 $B5 $B6 $B7 $B8 $B9
 10267 				.by  $BA $BB $BC $BD $00 $01 $00 $01  $2A $2B $2C $2D $2E $2F $30 $31  $32 $33 $34 $35 $36 $37 $38 $39
 10268 				.by  $3A $3B $3C $3D $00 $01 $00 $01  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10269 				.by  $00 $00 $00 $00 $00 $00 $00 $00  $81 $82 $83 $84 $85 $86 $87 $88  $89 $8A $8B $8C $8D $8E $8F $90
 10270 				.by  $91 $92 $93 $94 $00 $00 $00 $00  $95 $96 $97 $98 $99 $9A $9B $9C  $9D $9E $9F $A0 $A1 $A2 $A3 $A4
 10271 				.by  $A5 $9F $A6 $A7 $00 $00 $00 $00  $00 $A8 $A9 $AA $AB $AC $AD $A1  $AE $AF $9F $B0 $B1 $B2 $B3 $B4
 10272 				.by  $B5 $B6 $B7 $B8 $00 $00 $00 $00  $00 $B9 $BA $BB $BC $BD $BE $BF  $C0 $C1 $C2 $C3 $C4 $C5 $C6 $C7
 10273 				.by  $C8 $C9 $CA $CB $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10274 				.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10275 				.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10276 				.by  $00 $00 $00 $00 $00 $00 $00 $00  $81 $82 $83 $84 $85 $86 $87 $88  $89 $8A $8B $8C $8D $8E $8F $90
 10277 				.by  $91 $8F $84 $92 $00 $00 $00 $00  $93 $94 $95 $96 $97 $98 $99 $9A  $9B $9C $9D $9E $9F $A0 $A1 $A2
 10278 				.by  $A3 $A4 $A5 $A6 $00 $00 $00 $00  $00 $A7 $A8 $A9 $AA $AB $AC $AD  $AE $AF $A4 $B0 $B1 $B2 $B3 $B4
 10279 				.by  $B5 $B6 $B7 $B8 $00 $00 $00 $00  $00 $B9 $BA $BB $BC $BD $BE $BF  $C0 $C1 $C2 $C3 $C4 $C5 $C6 $C7
 10280 				.by  $C8 $C9 $CA $CB $00 $00 $00 $00  $00 $CC $CD $CE $CD $CF $80 $D0  $CE $80 $D0 $CE $D1 $CC $D1 $D2
 10281 				.by  $D3 $CE $CC $D1 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10282 				.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10283 				.by  $00 $00 $00 $00 $00 $00 $00 $00  $81 $82 $83 $84 $85 $80 $86 $80  $81 $85 $87 $88 $89 $85 $8A $8B
 10284 				.by  $84 $8A $84 $80 $00 $00 $00 $00  $8C $8D $8E $8F $90 $91 $92 $93  $94 $95 $96 $97 $98 $99 $9A $9B
 10285 				.by  $9C $9D $9E $9F $00 $00 $00 $00  $A0 $A1 $A2 $A3 $A4 $A5 $A6 $A7  $A8 $A9 $AA $AB $AC $AD $AE $AF
 10286 				.by  $B0 $B1 $B2 $B3 $00 $00 $00 $00  $00 $B4 $B5 $B6 $B7 $B8 $B9 $BA  $BB $BC $BD $BE $BF $C0 $C1 $C2
 10287 				.by  $C3 $C4 $C5 $C6 $00 $00 $00 $00  $00 $C7 $C8 $C9 $CA $CB $CC $CD  $C9 $CE $CF $D0 $D1 $D2 $D3 $D4
 10288 				.by  $D5 $D6 $D7 $D1 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10289 				.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10290 				.by  $00 $00 $00 $00 $00 $00 $00 $00  $80 $81 $82 $80 $80 $80 $82 $80  $80 $80 $80 $82 $83 $80 $80 $80
 10291 				.by  $80 $80 $80 $80 $00 $00 $00 $00  $84 $85 $86 $87 $88 $89 $8A $8B  $8C $8D $8E $8F $90 $91 $92 $93
 10292 				.by  $94 $95 $96 $97 $00 $00 $00 $00  $98 $99 $9A $9B $9C $9D $9E $9F  $A0 $A1 $A2 $A3 $A4 $A5 $A6 $A7
 10293 				.by  $A8 $A9 $AA $AB $00 $00 $00 $00  $00 $AC $AD $AE $AF $B0 $B1 $A4  $B2 $B3 $A2 $B4 $B5 $B6 $B7 $B8
 10294 				.by  $B9 $BA $BB $BC $00 $00 $00 $00  $80 $BD $BE $BF $C0 $C1 $C2 $C3  $C4 $C5 $C6 $C7 $C8 $C9 $CA $CB
 10295 				.by  $CC $CD $CE $CF $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10296 				.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01
 10297 				.by  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01
 10298 				.by  $00 $01 $00 $01 $00 $01 $00 $01  $46 $C7 $C8 $C9 $CA $CB $CC $CD  $CE $CF $D0 $D1 $D2 $D3 $D4 $D5
 10299 				.by  $D6 $D7 $D8 $D9 $00 $01 $00 $01  $46 $C7 $C8 $C9 $CA $CB $4C $CD  $CE $CF $D0 $D1 $D2 $D3 $D4 $D5
 10300 				.by  $D6 $D7 $D8 $D9 $00 $01 $00 $01  $00 $01 $00 $01 $5A $5B $5C $5D  $5E $5F $00 $01 $60 $61 $62 $63
 10301 				.by  $64 $65 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $5A $5B $5C $5D  $5E $5F $00 $01 $60 $61 $62 $63
 10302 				.by  $64 $65 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $66 $67 $68 $69  $6A $6B $00 $01 $6C $6D $6E $6F
 10303 				.by  $70 $71 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $66 $67 $68 $69  $6A $6B $00 $01 $6C $6D $6E $6F
 10304 				.by  $70 $71 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01
 10305 				.by  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $00 $01 $00 $01
 10306 				.by  $00 $01 $00 $01 $00 $01 $00 $01  $3E $BF $C0 $C1 $C2 $C3 $C4 $C5  $C6 $C7 $C8 $C9 $CA $CB $CC $CD
 10307 				.by  $CE $CF $D0 $D1 $00 $01 $00 $01  $3E $BF $C0 $C1 $C2 $C3 $44 $C5  $C6 $C7 $C8 $C9 $CA $CB $CC $CD
 10308 				.by  $CE $CF $D0 $D1 $00 $01 $00 $01  $00 $01 $00 $01 $52 $53 $54 $55  $56 $57 $00 $01 $58 $59 $5A $5B
 10309 				.by  $5C $5D $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $52 $53 $54 $55  $56 $57 $00 $01 $58 $59 $5A $5B
 10310 				.by  $5C $5D $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $5E $5F $60 $61  $62 $63 $00 $01 $64 $65 $66 $67
 10311 				.by  $68 $69 $00 $01 $00 $01 $00 $01  $00 $01 $00 $01 $5E $5F $60 $61  $62 $63 $00 $01 $64 $65 $66 $67
 10312 				.by  $68 $69 $00 $01 $00 $01 $00 $01  $0E $D7 $8F $4F $0B $2F $26 $00  $10 $0A $00 $15 $14 $0D $2C $2C
 10313 				.by  $1C $54 $20 $44 $00 $00 $40 $FE  $0E $D7 $8F $4B $0B $2B $26 $00  $10 $0A $00 $15 $14 $0C $2C $2D
 10314 				.by  $1C $54 $20 $44 $00 $00 $40 $FE  $0E $D7 $89 $49 $09 $2B $26 $00  $11 $0B $01 $11 $14 $0C $2C $2C
 10315 				.by  $1D $54 $20 $44 $00 $00 $40 $FE  $4E $57 $6F $4F $6B $4F $66 $E0  $51 $5A $F0 $53 $03 $51 $55 $F4
 10316 				.by  $76 $65 $40 $04 $00 $00 $00 $81  $4E $57 $6F $4B $6B $4B $66 $E0  $51 $5A $F0 $53 $03 $01 $05 $54
 10317 				.by  $56 $F5 $70 $64 $40 $00 $00 $81  $4E $57 $69 $49 $49 $6B $E6 $50  $59 $F2 $50 $13 $03 $41 $05 $04
 10318 				.by  $56 $55 $F0 $74 $60 $40 $00 $81  $E0 $32 $18 $0A $08 $42 $2A $23  $05 $08 $80 $17 $2B $17 $0F $20
 10319 				.by  $07 $0B $13 $07 $00 $00 $00 $E8  $E0 $32 $18 $0A $08 $82 $8A $43  $45 $08 $80 $17 $28 $11 $27 $01
 10320 				.by  $27 $01 $20 $01 $0B $00 $00 $E8  $E0 $32 $18 $0A $08 $82 $8A $83  $45 $08 $80 $17 $28 $11 $4F $01
 10321 				.by  $5F $0F $41 $00 $1B $00 $00 $E8  $3E $7E $86 $03 $03 $13 $8B $8B  $82 $C4 $7A $76 $A7 $E3 $F5 $73
 10322 				.by  $60 $E0 $C0 $80 $00 $00 $00 $00  $3E $7E $86 $03 $03 $23 $A3 $93  $92 $C4 $7A $76 $A7 $63 $B5 $23
 10323 				.by  $B0 $20 $20 $C0 $80 $00 $00 $00  $3E $7E $86 $03 $03 $23 $A3 $A3  $92 $C4 $7A $76 $A7 $63 $D5 $13
 10324 				.by  $D0 $90 $10 $E0 $80 $00 $00 $00  $0F $47 $23 $51 $59 $04 $22 $14  $01 $2A $19 $2A $1A $08 $02 $05
 10325 				.by  $02 $01 $00 $00 $00 $00 $00 $4C  $0F $47 $2B $51 $59 $04 $22 $14  $01 $2A $18 $2A $1A $08 $02 $05
 10326 				.by  $02 $01 $00 $00 $00 $00 $00 $4C  $0F $47 $2B $51 $59 $04 $22 $14  $01 $2A $18 $2A $1A $08 $02 $05
 10327 				.by  $02 $01 $00 $00 $00 $00 $00 $4C  $46 $54 $48 $51 $E3 $A4 $A8 $E5  $70 $FA $19 $0B $49 $EA $0C $1C
 10328 				.by  $78 $70 $E0 $00 $00 $00 $00 $00  $46 $54 $4A $51 $E3 $A4 $A8 $E5  $10 $0A $09 $0B $69 $EA $6C $24
 10329 				.by  $31 $5E $EC $43 $00 $00 $00 $00  $46 $54 $4A $51 $E3 $A4 $A8 $E5  $10 $0A $09 $0B $69 $EA $6C $34
 10330 				.by  $10 $58 $EF $44 $02 $00 $00 $00  $00 $00 $A8 $00 $50 $01 $F8 $01
 10331 				.endm
 10332
 10333 					end
